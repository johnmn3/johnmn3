{"version":3,"file":"cognitect.transit.js","sources":["cognitect/transit.cljs"],"mappings":"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","names":["cognitect.transit/WithMeta","x","m","tag-fn","rep-fn","str-rep-fn","js/cljs","js/cljs.core","js/cljs.core.MapEntry","_","verbose-handler-fn","i","goog/math.Long","this","cljs.core/Symbol","symbol-handler","other","from-rep","v","cljs.core/ArrayNodeSeq","list-handler","o","cljs.core/PersistentTreeSet","set-handler","cognitect.transit/opts-merge","cljs.core/clj->js","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","opts","cognitect.transit/VectorBuilder","cognitect.transit/link?","com.cognitect.transit.types/isBinary","map-handler","cognitect.transit/MapHandler","cljs.core/PersistentQueue","uuid-handler","cognitect.transit/UUIDHandler","cognitect.transit/bigdec?","a","ret","cljs.core/RSeq","type","cognitect.transit.writer.cljs$core$IFn$_invoke$arity$2","com.cognitect.transit.types/TaggedValue","cognitect.transit/integer?","cljs.core/UUID","com.cognitect.transit.types/UUID","var_args","G__16763","cognitect.transit/reader","js/Error","cognitect.transit/quoted?","r","str","com.cognitect.transit.types/link","s","cljs.core/PersistentArrayMap","this__4192__auto__","writer__4193__auto__","opt__4194__auto__","cljs.core/-write","cognitect.transit/SetHandler","cognitect.transit/->SetHandler","k","cljs.core/IndexedSeq","cognitect.transit/write","cognitect.transit/MapBuilder","cognitect.transit/->MapBuilder","cljs.core/Keyword","keyword-handler","cljs.core/compare","cljs.core/PersistentHashSet","cljs.core/PROTOCOL_SENTINEL","cljs.core/NodeSeq","cljs.core/transient","cljs.core/EmptyList","cognitect.transit/->VectorBuilder","cognitect.transit/SymbolHandler","cognitect.transit/->SymbolHandler","node","cljs.core/persistent!","cljs.core/Cons","tag","rep","cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$4","com.cognitect.transit.types/uuid","coll","f","com.cognitect.transit.types/isURI","cljs.core/KeySeq","cognitect.transit/uri?","cljs.core/Subvec","vector-handler","cljs.core.into.cljs$core$IFn$_invoke$arity$2","com.cognitect.transit.eq/hashCode","cognitect.transit/->MapHandler","com.cognitect.transit.types/isLink","com.cognitect.transit.types/isQuoted","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cognitect.transit/VectorHandler","cognitect.transit/->VectorHandler","com.cognitect.transit.types/bigInteger","cognitect.transit/uuid?","cljs.core/reduce-kv","meta-handler","cognitect.transit/WithMetaHandler","cljs.core/PersistentVector","cljs.core/ChunkedCons","cljs.core/ValSeq","cognitect.transit/tagged-value","js/cognitect","js/cognitect.transit","js/cognitect.transit.t_cognitect$transit16970","cognitect.transit/t_cognitect$transit16970","_16972","meta16971","cognitect.transit/->t_cognitect$transit16970","cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3","com.cognitect.transit.types/bigDecimalValue","com.cognitect.transit/tagged","cognitect.transit/uuid","com.cognitect.transit.types/taggedValue","cljs.core/LazySeq","obj","cognitect.transit/bigdec","cljs.core/PersistentHashMap","G__16772","G__16773","com.cognitect.transit/reader","cljs.core/name","cognitect.transit/->WithMetaHandler","js/cljs.core.Repeat","cognitect.transit/bigint","G__16926","G__16927","cognitect.transit/binary","cognitect.transit/tagged-value?","or__3949__auto__","com.cognitect.transit.types/isUUID","cognitect.transit/ListHandler","cognitect.transit/->ListHandler","com.cognitect.transit.types/isTaggedValue","cljs.core/PersistentTreeMap","cljs.core/Range","arr","cljs.core/PersistentVector.fromArray","com.cognitect.transit.types/uri","cljs.core/PersistentTreeMapSeq","cognitect.transit/uri","kfn","G__16932","vfn","cljs.core/MapEntry","cljs.core/PersistentArrayMap.fromArray","cognitect.transit/binary?","cognitect.transit/->WithMeta","value","meta","G__16929","cognitect.transit/writer","seq__16806","cljs.core/seq","chunk__16807","count__16809","i__16810","temp__5457__auto__","cljs.core/chunked-seq?","c__4351__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","cljs.core/Repeat","G__16969","cognitect.transit/write-handler","cljs.core/ChunkedSeq","cljs.core/List","seq__16844","chunk__16845","count__16846","i__16847","x16933","cljs.core/clone","handlers","G__16930","G__16931","com.cognitect.transit/writer","cljs.core/PersistentQueueSeq","cljs.core/with-meta","w","cognitect.transit/read-handler","cognitect.transit.reader.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentArrayMapSeq","com.cognitect.transit.types/quoted","b","cljs.core/-equiv","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","seq__16881","chunk__16882","count__16883","i__16884","js/cljs.core.Eduction","cognitect.transit/write-meta","seq__16620","chunk__16621","count__16622","i__16623","cljs.core/js-keys","cognitect.transit/KeywordHandler","cognitect.transit/->KeywordHandler","com.cognitect.transit.types/isBigDecimal","seq__16934","chunk__16935","count__16936","i__16937","vec__16938","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__16941","cognitect.transit/bigint?","com.cognitect.transit.types/isInteger","cognitect.transit/integer","cognitect.transit/read","com.cognitect.transit.types/intValue","uuid","writer","cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2","com.cognitect.transit.types/isBigInteger","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","com.cognitect.transit.types/binary","cljs.core/hash","cognitect.transit/->UUIDHandler","cognitect.transit/quoted","cljs.core/Eduction","cognitect.transit/link"],"sourcesContent":[";; Copyright 2014-2018 Cognitect. All Rights Reserved.\n;;\n;; Licensed under the Apache License, Version 2.0 (the \"License\");\n;; you may not use this file except in compliance with the License.\n;; You may obtain a copy of the License at\n;;\n;;      http://www.apache.org/licenses/LICENSE-2.0\n;;\n;; Unless required by applicable law or agreed to in writing, software\n;; distributed under the License is distributed on an \"AS-IS\" BASIS,\n;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n;; See the License for the specific language governing permissions and\n;; limitations under the License.\n\n(ns cognitect.transit\n  (:refer-clojure :exclude [integer? uuid uuid? uri?])\n  (:require [com.cognitect.transit :as t]\n            [com.cognitect.transit.types :as ty]\n            [com.cognitect.transit.eq :as eq])\n  (:import [goog.math Long]))\n\n;; patch cljs.core/UUID IEquiv\n\n(extend-type UUID\n  IEquiv\n  (-equiv [this other]\n    (cond\n      (instance? UUID other)\n      (identical? (.-uuid this) (.-uuid other))\n\n      (instance? ty/UUID other)\n      (identical? (.-uuid this) (.toString other))\n\n      :else false)))\n\n(extend-protocol IComparable\n  UUID\n  (-compare [this other]\n    (if (or (instance? UUID other)\n            (instance? ty/UUID other))\n      (compare (.toString this) (.toString other))\n      (throw (js/Error. (str \"Cannot compare \" this \" to \" other)))))\n  ty/UUID\n  (-compare [this other]\n    (if (or (instance? UUID other)\n            (instance? ty/UUID other))\n      (compare (.toString this) (.toString other))\n      (throw (js/Error. (str \"Cannot compare \" this \" to \" other))))))\n\n(extend-protocol IEquiv\n  Long\n  (-equiv [this other]\n    (.equiv this other))\n  \n  ty/UUID\n  (-equiv [this other]\n    (if (instance? UUID other)\n      (-equiv other this)\n      (.equiv this other)))\n\n  ty/TaggedValue\n  (-equiv [this other]\n    (.equiv this other)))\n\n(extend-protocol IHash\n  Long\n  (-hash [this]\n    (eq/hashCode this))\n\n  ty/UUID\n  (-hash [this]\n    (hash (.toString this)))\n\n  ty/TaggedValue\n  (-hash [this]\n    (eq/hashCode this)))\n\n(extend-type ty/UUID\n  IPrintWithWriter\n  (-pr-writer [uuid writer _]\n    (-write writer (str \"#uuid \\\"\" (.toString uuid) \"\\\"\"))))\n\n(defn ^:no-doc opts-merge [a b]\n  (doseq [k (js-keys b)]\n    (let [v (aget b k)]\n      (aset a k v)))\n  a)\n\n(deftype ^:no-doc MapBuilder []\n  Object\n  (init [_ node] (transient {}))\n  (add [_ m k v node] (assoc! m k v))\n  (finalize [_ m node] (persistent! m))\n  (fromArray [_ arr node] (cljs.core/PersistentArrayMap.fromArray arr true true)))\n\n(deftype ^:no-doc VectorBuilder []\n  Object\n  (init [_ node] (transient []))\n  (add [_ v x node] (conj! v x))\n  (finalize [_ v node] (persistent! v))\n  (fromArray [_ arr node] (cljs.core/PersistentVector.fromArray arr true)))\n\n(defn reader\n  \"Return a transit reader. type may be either :json or :json-verbose.\n   opts may be a map optionally containing a :handlers entry. The value\n   of :handlers should be map from tag to a decoder function which returns\n   then in-memory representation of the semantic transit value.\"\n  ([type] (reader type nil))\n  ([type opts]\n     (t/reader (name type)\n       (opts-merge\n         #js {:handlers\n              (clj->js\n                (merge\n                  {\"$\"    (fn [v] (symbol v))\n                   \":\"    (fn [v] (keyword v))\n                   \"set\"  (fn [v] (into #{} v))\n                   \"list\" (fn [v] (into () (.reverse v)))\n                   \"cmap\" (fn [v] \n                            (loop [i 0 ret (transient {})]\n                              (if (< i (alength v))\n                                (recur (+ i 2)\n                                  (assoc! ret (aget v i) (aget v (inc i))))\n                                (persistent! ret))))\n                   \"with-meta\"\n                          (fn [v] (with-meta (aget v 0) (aget v 1)))}\n                  (:handlers opts)))\n              :mapBuilder (MapBuilder.)\n              :arrayBuilder (VectorBuilder.)\n              :prefersStrings false}\n         (clj->js (dissoc opts :handlers))))))\n\n(defn read\n  \"Read a transit encoded string into ClojureScript values given a \n   transit reader.\"\n  [r str]\n  (.read r str))\n\n(deftype ^:no-doc KeywordHandler []\n  Object\n  (tag [_ v] \":\")\n  (rep [_ v] (.-fqn v))\n  (stringRep [_ v] (.-fqn v)))\n\n(deftype ^:no-doc SymbolHandler []\n  Object\n  (tag [_ v] \"$\")\n  (rep [_ v] (.-str v))\n  (stringRep [_ v] (.-str v)))\n\n(deftype ^:no-doc ListHandler []\n  Object\n  (tag [_ v] \"list\")\n  (rep [_ v]\n    (let [ret #js []]\n      (doseq [x v] (.push ret x))\n      (t/tagged \"array\" ret)))\n  (stringRep [_ v] nil))\n\n(deftype ^:no-doc MapHandler []\n  Object\n  (tag [_ v] \"map\")\n  (rep [_ v] v)\n  (stringRep [_ v] nil))\n\n(deftype ^:no-doc SetHandler []\n  Object\n  (tag [_ v] \"set\")\n  (rep [_ v]\n    (let [ret #js []]\n      (doseq [x v] (.push ret x))\n      (t/tagged \"array\" ret)))\n  (stringRep [v] nil))\n\n(deftype ^:no-doc VectorHandler []\n  Object\n  (tag [_ v] \"array\")\n  (rep [_ v]\n    (let [ret #js []]\n      (doseq [x v] (.push ret x))\n      ret))\n  (stringRep [_ v] nil))\n\n(deftype ^:no-doc UUIDHandler []\n  Object\n  (tag [_ v] \"u\")\n  (rep [_ v] (.-uuid v))\n  (stringRep [this v] (.rep this v)))\n\n(deftype ^:no-doc WithMeta [value meta])\n\n(deftype ^:no-doc WithMetaHandler []\n  Object\n  (tag [_ v] \"with-meta\")\n  (rep [_ v]\n    (t/tagged \"array\" #js [(.-value v) (.-meta v)]))\n  (stringRep [_ v] nil))\n\n(defn writer\n  \"Return a transit writer. type maybe either :json or :json-verbose.\n  opts is a map with the following optional keys:\n\n    :handlers  - a map of type constructors to handler instances.\n    :transform - a function of one argument returning a transformed value. Will\n                 be invoked on a value before it is written.\"\n  ([type] (writer type nil))\n  ([type opts]\n     (let [keyword-handler (KeywordHandler.)\n           symbol-handler  (SymbolHandler.)\n           list-handler    (ListHandler.)\n           map-handler     (MapHandler.)\n           set-handler     (SetHandler.)\n           vector-handler  (VectorHandler.)\n           uuid-handler    (UUIDHandler.)\n           meta-handler    (WithMetaHandler.)\n           handlers\n           (merge\n             {cljs.core/Keyword               keyword-handler\n              cljs.core/Symbol                symbol-handler\n              cljs.core/Range                 list-handler\n              cljs.core/List                  list-handler\n              cljs.core/Cons                  list-handler\n              cljs.core/EmptyList             list-handler\n              cljs.core/LazySeq               list-handler\n              cljs.core/RSeq                  list-handler\n              cljs.core/IndexedSeq            list-handler\n              cljs.core/ChunkedCons           list-handler\n              cljs.core/ChunkedSeq            list-handler\n              cljs.core/PersistentQueueSeq    list-handler\n              cljs.core/PersistentQueue       list-handler\n              cljs.core/PersistentArrayMapSeq list-handler\n              cljs.core/PersistentTreeMapSeq  list-handler\n              cljs.core/NodeSeq               list-handler\n              cljs.core/ArrayNodeSeq          list-handler\n              cljs.core/KeySeq                list-handler\n              cljs.core/ValSeq                list-handler\n              cljs.core/PersistentArrayMap    map-handler\n              cljs.core/PersistentHashMap     map-handler\n              cljs.core/PersistentTreeMap     map-handler\n              cljs.core/PersistentHashSet     set-handler\n              cljs.core/PersistentTreeSet     set-handler\n              cljs.core/PersistentVector      vector-handler\n              cljs.core/Subvec                vector-handler\n              cljs.core/UUID                  uuid-handler\n              WithMeta                        meta-handler}\n             (when (exists? cljs.core/Eduction)\n               {^:cljs.analyzer/no-resolve cljs.core/Eduction list-handler})\n             (when (exists? cljs.core/Repeat)\n               {^:cljs.analyzer/no-resolve cljs.core/Repeat list-handler})\n             (when (exists? cljs.core/MapEntry)\n               {^:cljs.analyzer/no-resolve cljs.core/MapEntry vector-handler})\n             (:handlers opts))]\n      (t/writer (name type)\n        (opts-merge\n          #js {:objectBuilder\n               (fn [m kfn vfn]\n                 (reduce-kv\n                   (fn [obj k v]\n                     (doto obj (.push (kfn k) (vfn v))))\n                   #js [\"^ \"] m))\n               :handlers\n               (specify handlers\n                 Object\n                 (forEach\n                   ([coll f]\n                      (doseq [[k v] coll]\n                        (f v k)))))\n               :unpack\n               (fn [x]\n                 (if (instance? cljs.core/PersistentArrayMap x)\n                   (.-arr x)\n                   false))}\n          (clj->js (dissoc opts :handlers)))))))\n\n(defn write\n  \"Encode an object into a transit string given a transit writer.\"\n  [w o]\n  (.write w o))\n\n(defn read-handler\n  \"Construct a read handler. Implemented as identity, exists primarily\n   for API compatiblity with transit-clj\"\n  [from-rep]\n  from-rep)\n\n(defn write-handler\n  \"Creates a transit write handler whose tag, rep,\n   stringRep, and verboseWriteHandler methods\n   invoke the provided fns.\"\n  ([tag-fn rep-fn]\n     (write-handler tag-fn rep-fn nil nil))\n  ([tag-fn rep-fn str-rep-fn]\n     (write-handler tag-fn rep-fn str-rep-fn nil))\n  ([tag-fn rep-fn str-rep-fn verbose-handler-fn]\n     (reify\n       Object\n       (tag [_ o] (tag-fn o))\n       (rep [_ o] (rep-fn o))\n       (stringRep [_ o] (when str-rep-fn (str-rep-fn o)))\n       (getVerboseHandler [_] (when verbose-handler-fn (verbose-handler-fn))))))\n\n;; =============================================================================\n;; Constructors & Predicates\n\n(defn tagged-value\n  \"Construct a tagged value. tag must be a string and rep can\n   be any transit encodeable value.\"\n  [tag rep]\n  (ty/taggedValue tag rep))\n\n(defn tagged-value?\n  \"Returns true if x is a transit tagged value, false otherwise.\"\n  [x]\n  (ty/isTaggedValue x))\n\n(defn integer\n  \"Construct a transit integer value. Returns JavaScript number if\n  in the 53bit integer range, a goog.math.Long instance if above. s\n  may be a string or a JavaScript number.\"\n  [s]\n  (ty/intValue s))\n\n(defn integer?\n  \"Returns true if x is an integer value between the 53bit and 64bit\n  range, false otherwise.\"\n  [x]\n  (ty/isInteger x))\n\n(defn bigint\n  \"Construct a big integer from a string.\"\n  [s]\n  (ty/bigInteger s))\n\n(defn bigint?\n  \"Returns true if x is a transit big integer value, false otherwise.\"\n  [x]\n  (ty/isBigInteger x))\n\n(defn bigdec\n  \"Construct a big decimal from a string.\"\n  [s]\n  (ty/bigDecimalValue s))\n\n(defn bigdec?\n  \"Returns true if x is a transit big decimal value, false otherwise.\"\n  [x]\n  (ty/isBigDecimal x))\n\n(defn uri\n  \"Construct a URI from a string.\"\n  [s]\n  (ty/uri s))\n\n(defn uri?\n  \"Returns true if x is a transit URI value, false otherwise.\"\n  [x]\n  (ty/isURI x))\n\n(defn uuid\n  \"Construct a UUID from a string.\"\n  [s]\n  (ty/uuid s))\n\n(defn uuid?\n  \"Returns true if x is a transit UUID value, false otherwise.\"\n  [x]\n  (or (ty/isUUID x) (instance? UUID x)))\n\n(defn binary\n  \"Construct a transit binary value. s should be base64 encoded\n   string.\"\n  [s]\n  (ty/binary s))\n\n(defn binary?\n  \"Returns true if x is a transit binary value, false otherwise.\"\n  [x]\n  (ty/isBinary x))\n\n(defn quoted\n  \"Construct a quoted transit value. x should be a transit\n   encodeable value.\"\n  [x]\n  (ty/quoted x))\n\n(defn quoted?\n  \"Returns true if x is a transit quoted value, false otherwise.\"\n  [x]\n  (ty/isQuoted x))\n\n(defn link\n  \"Construct a transit link value. x should be an IMap instance\n   containing at a minimum the following keys: :href, :rel. It\n   may optionall include :name, :render, and :prompt. :href must\n   be a transit URI, all other values are strings, and :render must\n   be either :image or :link.\"\n  [x]\n  (ty/link x))\n\n(defn link?\n  \"Returns true if x a transit link value, false if otherwise.\"\n  [x]\n  (ty/isLink x))\n\n(defn write-meta\n  \"For :transform. Will write any metadata present on the value.\"\n  [x]\n  (if (implements? IMeta x)\n    (let [m (-meta ^not-native x)]\n      (if-not (nil? m)\n        (WithMeta. (-with-meta ^not-native x nil) m)\n        x))\n    x))"]}