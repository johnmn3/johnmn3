{"version":3,"file":"shadow.cljs.bootstrap.browser.js","sources":["shadow/cljs/bootstrap/browser.cljs"],"mappings":"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","names":["js/shadow","js/shadow.cljs","js/shadow.cljs.bootstrap","js/shadow.cljs.bootstrap.browser","js/shadow.cljs.bootstrap.browser.init-opts","shadow.cljs.bootstrap.browser/init-opts","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","var_args","args__4534__auto__","len__4531__auto__","i__4532__auto__","argseq__4535__auto__","cljs.core/IndexedSeq","shadow.cljs.bootstrap.browser/asset-path","seq38114","self__4519__auto__","cljs.core/seq","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/str","cljs.core/deref","shadow.cljs.bootstrap.browser/compile-state-ref?","x","cljs.core/Atom","cljs.core/map?","shadow.cljs.bootstrap.browser/transit-read","txt","r","cognitect.transit.reader.cljs$core$IFn$_invoke$arity$1","cognitect.transit/read","shadow.cljs.bootstrap.browser/transit-load","path","callback","G__38141","G__38142","goog.net.XhrIo/send","res","req","cljs.core/not","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","data","shadow.cljs.bootstrap.browser/script-eval","code","node","js/document.createElement","js/document.createTextNode","js/document.body.appendChild","js/document.body.removeChild","p__38160","map__38161","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","shadow.cljs.bootstrap.browser/execute-load!","compile-state-ref","type","text","uri","ns","provides","load-info","temp__5457__auto__","load-fn","G__38163","cljs.core/Keyword","js/Error","cljs.js/load-analysis-cache!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","shadow.cljs.bootstrap.env/loaded-ref","clojure.set/union","cljs.js/*loaded*","js","shadow.cljs.bootstrap.browser/queue-task!","task","js/goog.async.run","shadow.cljs.bootstrap.browser/load-namespaces","namespaces","cb","cljs.core/set?","cljs.core/every?","cljs.core/symbol?","cljs.core/fn?","deps-to-load-for-ns","shadow.cljs.bootstrap.env/find-deps","macro-deps","p1__38191#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","p1__38192#","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","cljs.core.into.cljs$core$IFn$_invoke$arity$2","deps-to-load-with-macros","clojure.set.union.cljs$core$IFn$_invoke$arity$2","compile-state","things-already-loaded","p1__38193#","clojure.set/superset?","js-files-to-load","p1__38194#","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","p__38199","map__38200","js-name","shadow.cljs.bootstrap.browser.asset_path.cljs$core$IFn$_invoke$arity$variadic","analyzer-data-to-load","p1__38195#","p1__38196#","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","p__38202","map__38203","ana-name","cljs.core/empty?","G__38205","uris","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$1","loader","goog/net.BulkLoader","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","js/goog.net.EventType.SUCCESS","e","texts","seq__38206","chunk__38207","count__38208","i__38209","cljs.core/chunked-seq?","c__4351__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","load","p1__38197#","p2__38198#","cljs.core.map.cljs$core$IFn$_invoke$arity$3","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","G__38212","p__38287","map__38288","shadow.cljs.bootstrap.browser/load","name","macros","rc","cljs.core/Symbol","or__3949__auto__","shadow.cljs.bootstrap.env/get-ns-info","shadow.cljs.bootstrap.browser/fix-provide-conflict!","js/cljs","p__38324","map__38326","shadow.cljs.bootstrap.browser/init","load-on-init","opts","init-cb","cljs.core/reset!","shadow.cljs.bootstrap.env/index-ref","map__38330","exclude","idx","shadow.cljs.bootstrap.env/build-index","p1__38323#"],"sourcesContent":["(ns shadow.cljs.bootstrap.browser\n  (:require [clojure.set :as set]\n            [cljs.js :as cljs]\n            [cognitect.transit :as transit]\n            [shadow.js] ;; ensures that bootstrap namespaces can use js deps\n            [shadow.cljs.bootstrap.env :as env]\n            [goog.async.run]\n            [goog.net.XhrIo :as xhr])\n  (:import [goog.net BulkLoader]))\n\n\n(defonce init-opts (atom {:path \"/bootstrap\"\n                          :load-on-init []}))\n\n(defn asset-path [& args]\n  (apply str (:path @init-opts) args))\n\n(defn compile-state-ref? [x]\n  (and (instance? cljs.core/Atom x) (map? @x)))\n\n(defn transit-read [txt]\n  (let [r (transit/reader :json)]\n    (transit/read r txt)))\n\n(defn transit-load [path callback]\n  (xhr/send\n    path\n    (fn [res]\n      (this-as req\n        (if-not (.isSuccess req)\n          (throw (ex-info (str \"failed to download boostrap file:\" path \" status:\" (.getStatus req)) {:path path}))\n          (let [data (-> (.getResponseText req)\n                         (transit-read))]\n            (callback data)\n            ))))))\n\n(defn script-eval\n  \"js/eval doesn't get optimized properly, this hack seems to do the trick\"\n  [code]\n  (let [node (js/document.createElement \"script\")]\n    (.appendChild node (js/document.createTextNode code))\n    (js/document.body.appendChild node)\n    (js/document.body.removeChild node)))\n\n(defn execute-load! [compile-state-ref {:keys [type text uri ns provides] :as load-info}]\n  #_ (js/console.log \"load\" type ns load-info)\n  ;; quick hack for worker experiment, needs proper design\n  (when-let [load-fn (:load @init-opts)]\n    (load-fn load-info))\n  (case type\n    :analyzer\n    (let [data (transit-read text)]\n      (cljs/load-analysis-cache! compile-state-ref ns data))\n    :js\n    (do (swap! env/loaded-ref set/union provides)\n        (swap! cljs/*loaded* set/union provides)\n        (let [js (str text \"\\n//# sourceURL=\" uri \"\\n\")]\n          (script-eval js)))))\n\n(defn queue-task! [task]\n  ;; FIXME: this is a very naive queue that does all pending tasks at once\n  ;; should use something like window.requestIdleCallback that does as much work as\n  ;; possible in the time it was given and then yield control back to the browser\n  (js/goog.async.run task))\n\n(defn load-namespaces\n  \"loads a set of namespaces, must be called after init\"\n  [compile-state-ref namespaces cb]\n  {:pre [(compile-state-ref? compile-state-ref)\n         (set? namespaces)\n         (every? symbol? namespaces)\n         (fn? cb)]}\n  (let [deps-to-load-for-ns\n        (env/find-deps namespaces)\n\n        macro-deps\n        (->> deps-to-load-for-ns\n             (filter #(= :cljs (:type %)))\n             (map :macro-requires)\n             (reduce set/union)\n             (map #(symbol (str % \"$macros\")))\n             (into #{}))\n\n        ;; second pass due to circular dependencies in macros\n        deps-to-load-with-macros\n        (env/find-deps (set/union namespaces macro-deps))\n\n        compile-state\n        @compile-state-ref\n\n        things-already-loaded\n        (->> deps-to-load-with-macros\n             (filter #(set/superset? @env/loaded-ref (:provides %)))\n             (map :provides)\n             (reduce set/union))\n\n        js-files-to-load\n        (->> deps-to-load-with-macros\n             (remove #(set/superset? @env/loaded-ref (:provides %)))\n             (map (fn [{:keys [ns provides js-name]}]\n                    {:type :js\n                     :ns ns\n                     :provides provides\n                     :uri (asset-path js-name)})))\n\n        analyzer-data-to-load\n        (->> deps-to-load-with-macros\n             (filter #(= :cljs (:type %)))\n             ;; :dump-core still populates the cljs.core analyzer data with an empty map\n             (filter #(nil? (get-in compile-state [:cljs.analyzer/namespaces (:ns %) :name])))\n             (map (fn [{:keys [ns ana-name]}]\n                    {:type :analyzer\n                     :ns ns\n                     :uri (asset-path ana-name)})))\n\n        load-info\n        (-> []\n            (into js-files-to-load)\n            (into analyzer-data-to-load))]\n\n    #_ (js/console.log \"going to load\" load-info)\n\n    ;; this is transfered to cljs/*loaded* here to delay it as much as possible\n    ;; the JS may already be loaded but the analyzer data may be missing\n    ;; this way cljs.js is forced to ask first\n    (swap! cljs/*loaded* set/union things-already-loaded)\n\n    ;; may not need to load anything sometimes?\n    (if (empty? load-info)\n      (cb {:lang :js :source \"\"})\n\n      (let [uris\n            (into [] (map :uri) load-info)\n\n            loader\n            (BulkLoader. (into-array uris))]\n\n        (.listen loader js/goog.net.EventType.SUCCESS\n          (fn [e]\n            (let [texts (.getResponseTexts loader)]\n              (doseq [load (map #(assoc %1 :text %2) load-info texts)]\n                (queue-task! #(execute-load! compile-state-ref load)))\n\n              #_ (queue-task! #(js/console.log \"compile-state after load\" @compile-state-ref))\n\n              ;; callback with dummy so cljs.js doesn't attempt to load deps all over again\n              (queue-task! #(cb {:lang :js :source \"\"}))\n              )))\n\n        (.load loader)))\n    ))\n\n(defn load\n  \":load fn for cljs.js, must be passed the compile-state as first arg\n   eg. :load (partial boot/load compile-state-ref)\"\n  [compile-state-ref {:keys [name path macros] :as rc} cb]\n  {:pre [(compile-state-ref? compile-state-ref)\n         (symbol? name)\n         (fn? cb)]}\n  (let [ns (if macros\n             (symbol (str name \"$macros\"))\n             name)]\n    (or (get-in @compile-state-ref [:cljs.analyzer/namespaces ns])\n        (env/get-ns-info ns))\n    (load-namespaces compile-state-ref #{ns} cb)))\n\n(defn fix-provide-conflict! []\n  ;; since cljs.js unconditionally does a goog.require(\"cljs.core$macros\")\n  ;; the compile pretended to provide this but didn't\n  ;; need to remove that before we load it, otherwise it would goog.provide conflict\n  ;; FIXME: should test if actually empty, might delete something accidentally?\n  (js-delete js/cljs \"core$macros\"))\n\n(defn init\n  \"initializes the bootstrapped compiler by loading the dependency index\n   and loading cljs.core + macros (and namespaces specified in :load-on-init)\"\n  [compile-state-ref {:keys [load-on-init] :as opts} init-cb]\n  {:pre [(compile-state-ref? compile-state-ref)\n         (map? opts)\n         (fn? init-cb)\n         (string? (:path opts))]}\n  ;; FIXME: add goog-define to path\n\n  (reset! init-opts opts)\n\n  (if @env/index-ref\n    (init-cb)\n    (do (fix-provide-conflict!)\n        (transit-load (asset-path \"/index.transit.json\")\n          (fn [data]\n            ;; pretend that all excluded macro namespaces are loaded\n            ;; so CLJS doesn't request them\n            ;; the macro are never available so any code trying to use them will fail\n            (let [{:keys [exclude] :as idx} (env/build-index data)]\n              (swap! cljs/*loaded* set/union (into #{} (map #(symbol (str % \"$macros\"))) exclude)))\n\n            (load-namespaces\n              compile-state-ref\n              (into '#{cljs.core cljs.core$macros} load-on-init)\n              init-cb))))))\n"]}