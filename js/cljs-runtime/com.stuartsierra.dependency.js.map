{"version":3,"file":"com.stuartsierra.dependency.js","sources":["com/stuartsierra/dependency.cljs"],"mappings":"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","names":["x__4243__auto__","m__4244__auto__","com/stuartsierra.dependency.immediate-dependencies","goog/typeOf","cljs.core/missing-protocol","com/stuartsierra.dependency.immediate-dependents","com/stuartsierra.dependency.transitive-dependencies","com/stuartsierra.dependency.transitive-dependents","com/stuartsierra.dependency.nodes","com.stuartsierra.dependency/DependencyGraph","com.stuartsierra.dependency/immediate-dependencies","graph","node","com.stuartsierra.dependency/immediate-dependents","com.stuartsierra.dependency/transitive-dependencies","com.stuartsierra.dependency/transitive-dependents","com.stuartsierra.dependency/nodes","com/stuartsierra.dependency.depend","com/stuartsierra.dependency.remove-edge","com/stuartsierra.dependency.remove-all","com/stuartsierra.dependency.remove-node","com.stuartsierra.dependency/DependencyGraphUpdate","com.stuartsierra.dependency/depend","dep","com.stuartsierra.dependency/remove-edge","com.stuartsierra.dependency/remove-all","com.stuartsierra.dependency/remove-node","com.stuartsierra.dependency/remove-from-map","amap","x","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__33593","vec__33594","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","m","k","vs","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.disj.cljs$core$IFn$_invoke$arity$2","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","com.stuartsierra.dependency/transitive","s","clojure.set.union.cljs$core$IFn$_invoke$arity$2","cljs.core.get.cljs$core$IFn$_invoke$arity$2","com.stuartsierra.dependency/set-conj","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2","cljs.core/conj","this__4203__auto__","k__4204__auto__","this__4205__auto__","k33623","else__4206__auto__","G__33642","cljs.core/Keyword","dependencies","dependents","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__4217__auto__","writer__4218__auto__","opts__4219__auto__","pr-pair__4220__auto__","keyval__4221__auto__","cljs.core/pr-sequential-writer","cljs.core/pr-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__33622","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4201__auto__","__meta","this__4198__auto__","__hash","this__4207__auto__","cljs.core/count","this__4199__auto__","h__4061__auto__","fexpr__33644","coll__4200__auto__","cljs.core/hash-unordered-coll","this33624","other33625","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","this__4212__auto__","k__4213__auto__","cljs.core/contains?","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__4210__auto__","k__4211__auto__","pred__33647","cljs.core/keyword-identical?","expr__33648","G__33650","G__33651","G__33652","G__33653","this__4215__auto__","cljs.core/seq","cljs/core.MapEntry","cljs.core/PROTOCOL_SENTINEL","this__4202__auto__","this__4208__auto__","entry__4209__auto__","cljs.core/vector?","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","com.stuartsierra.dependency/MapDependencyGraph","this__4240__auto__","cljs.core/List","writer__4241__auto__","cljs.core/-write","G__33633","extmap__4236__auto__","G__33659","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/record?","com.stuartsierra.dependency/->MapDependencyGraph","com.stuartsierra.dependency/map->MapDependencyGraph","cljs.core/set","cljs.core/keys","or__3949__auto__","com.stuartsierra.dependency/depends?","js/Error","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","cljs.core/disj","com.stuartsierra.dependency/graph","y","com.stuartsierra.dependency/dependent?","com.stuartsierra.dependency/topo-sort","sorted","g","todo","p1__33738#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/empty?","vec__33742","seq__33743","first__33744","cljs.core/first","cljs.core/next","vec__33745","more","deps","add","g'","d","cljs.core/rest","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core/cons","com.stuartsierra.dependency/topo-comparator","pos","cljs.core/zipmap","cljs.core.range.cljs$core$IFn$_invoke$arity$0","a","b","cljs.core/compare","js/Number"],"sourcesContent":[";; Copyright (c) Stuart Sierra, 2013. All rights reserved. The use and\n;; distribution terms for this software are covered by the Eclipse\n;; Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;; which can be found in the file epl-v10.html at the root of this\n;; distribution. By using this software in any fashion, you are\n;; agreeing to be bound by the terms of this license. You must not\n;; remove this notice, or any other, from this software.\n\n(ns ^{:author \"Stuart Sierra\"\n      :doc \"Directed acyclic graph for representing dependency relationships.\"}\n  com.stuartsierra.dependency\n  (:require [clojure.set :as set]))\n\n(defprotocol DependencyGraph\n  (immediate-dependencies [graph node]\n    \"Returns the set of immediate dependencies of node.\")\n  (immediate-dependents [graph node]\n    \"Returns the set of immediate dependents of node.\")\n  (transitive-dependencies [graph node]\n    \"Returns the set of all things which node depends on, directly or\n    transitively.\")\n  (transitive-dependents [graph node]\n    \"Returns the set of all things which depend upon node, directly or\n    transitively.\")\n  (nodes [graph]\n    \"Returns the set of all nodes in graph.\"))\n\n(defprotocol DependencyGraphUpdate\n  (depend [graph node dep]\n    \"Returns a new graph with a dependency from node to dep (\\\"node depends\n    on dep\\\"). Forbids circular dependencies.\")\n  (remove-edge [graph node dep]\n    \"Returns a new graph with the dependency from node to dep removed.\")\n  (remove-all [graph node]\n    \"Returns a new dependency graph with all references to node removed.\")\n  (remove-node [graph node]\n    \"Removes the node from the dependency graph without removing it as a\n    dependency of other nodes. That is, removes all outgoing edges from\n    node.\"))\n\n(defn- remove-from-map [amap x]\n  (reduce (fn [m [k vs]]\n\t    (assoc m k (disj vs x)))\n\t  {} (dissoc amap x)))\n\n(defn- transitive\n  \"Recursively expands the set of dependency relationships starting\n  at (get m x)\"\n  [m x]\n  (reduce (fn [s k]\n\t    (set/union s (transitive m k)))\n\t  (get m x) (get m x)))\n\n(declare depends?)\n\n(def ^:private set-conj (fnil conj #{}))\n\n;; Do not construct directly, use 'graph' function\n(defrecord MapDependencyGraph [dependencies dependents]\n  DependencyGraph\n  (immediate-dependencies [graph node]\n    (get dependencies node #{}))\n  (immediate-dependents [graph node]\n    (get dependents node #{}))\n  (transitive-dependencies [graph node]\n    (transitive dependencies node))\n  (transitive-dependents [graph node]\n    (transitive dependents node))\n  (nodes [graph]\n    (set/union (set (keys dependencies))\n               (set (keys dependents))))\n  DependencyGraphUpdate\n  (depend [graph node dep]\n    (when (or (= node dep) (depends? graph dep node))\n      (throw (                \n                     js/Error.\n              (str \"Circular dependency between \"\n                   (pr-str node) \" and \" (pr-str dep)))))\n    (MapDependencyGraph.\n     (update-in dependencies [node] set-conj dep)\n     (update-in dependents [dep] set-conj node)))\n  (remove-edge [graph node dep]\n    (MapDependencyGraph.\n     (update-in dependencies [node] disj dep)\n     (update-in dependents [dep] disj node)))\n  (remove-all [graph node]\n    (MapDependencyGraph.\n     (remove-from-map dependencies node)\n     (remove-from-map dependents node)))\n  (remove-node [graph node]\n    (MapDependencyGraph.\n     (dissoc dependencies node)\n     dependents)))\n\n(defn graph\n  \"Returns a new, empty, dependency graph. A graph contains nodes,\n  which may be any type which supports Clojure's equality semantics.\n  Edges are represented as pairs of nodes. An edge between two nodes X\n  and Y indicates that X depends on Y or, conversely, that Y is a\n  dependent of X. A dependency graph may not have cycles.\"\n  []\n  (MapDependencyGraph. {} {}))\n\n(defn depends?\n  \"True if x is directly or transitively dependent on y.\"\n  [graph x y]\n  (contains? (transitive-dependencies graph x) y))\n\n(defn dependent?\n  \"True if y is a direct or transitive dependent of x.\"\n  [graph x y]\n  (contains? (transitive-dependents graph x) y))\n\n(defn topo-sort\n  \"Returns a topologically-sorted list of nodes in graph.\"\n  [graph]\n  (loop [sorted ()\n         g graph\n         todo (set (filter #(empty? (immediate-dependents graph %))\n                           (nodes graph)))]\n    (if (empty? todo)\n      sorted\n      (let [[node & more] (seq todo)\n            deps (immediate-dependencies g node)\n            [add g'] (loop [deps deps\n                            g g\n                            add #{}]\n                       (if (seq deps)\n                         (let [d (first deps)\n                               g' (remove-edge g node d)]\n                           (if (empty? (immediate-dependents g' d))\n                             (recur (rest deps) g' (conj add d))\n                             (recur (rest deps) g' add)))\n                         [add g]))]\n        (recur (cons node sorted)\n               (remove-node g' node)\n               (set/union (set more) (set add)))))))\n\n(defn topo-comparator\n  \"Returns a comparator fn which produces a topological sort based on\n  the dependencies in graph. Nodes not present in the graph will sort\n  after nodes in the graph.\"\n  [graph]\n  (let [pos (zipmap (topo-sort graph) (range))]\n    (fn [a b]\n      (compare (get pos a                     \n                                 (.-MAX_VALUE js/Number))\n               (get pos b                     \n                                 (.-MAX_VALUE js/Number))))))\n\n;;;;;;;;;;;; This file autogenerated from src/com/stuartsierra/dependency.cljx\n"]}