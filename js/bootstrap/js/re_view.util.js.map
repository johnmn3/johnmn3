{"version":3,"file":"re_view.util.js","sources":["re_view/util.cljc"],"mappings":"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","names":["cljs.core.conj.cljs$core$IFn$_invoke$arity$2","out","match?","cljs.core/first","args","re-view.util/ensure-keys","forms","G__16270","cljs.core/rest","fns","children","cljs.core/empty?","preds","el","cljs.core/tree-seq","cljs.core/seq?","cljs.core/seq","re-view.util/parse-opt-args","seen","var_args","args__4534__auto__","len__4531__auto__","i__4532__auto__","argseq__4535__auto__","cljs.core/IndexedSeq","re-view.util/any-pred","seq16226","self__4519__auto__","G__16269","fexpr__16268","re-view.util/update-attrs","seq16182","G__16183","cljs.core/next","G__16184","self__4518__auto__","f","p1__16206#","p2__16205#","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","re_view.util.update_attrs.cljs$core$IFn$_invoke$arity$variadic","cljs.core/update","k","re-view.util/is-react-element?","x","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/map","re-view.util/flatten-seqs","re-view.util/camelCase","re-view.util/map-with-keys","seq16213","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/conj","this","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","attrs?","cljs.core/contains?","p1__16262#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","s","cljs.core/vector?","cljs.core/map?","cljs.core/second","or__3949__auto__","fexpr__16239","match","clojure.string/replace","p__16172","vec__16173","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","clojure.string/upper-case","cljs.core/name","_","cljs.core.subvec.cljs$core$IFn$_invoke$arity$2","and__3938__auto__","js/module$node_modules$react$index.isValidElement","cljs.core/memoize"],"sourcesContent":["(ns re-view.util\n  (:refer-clojure :exclude [uuid])\n  (:require [clojure.string :as string]\n            #?@(:cljs [[\"react\" :as react]\n                       [re-db.d :as d]])))\n\n(def camelCase\n  \"Return camelCased string, eg. hello-there to helloThere. Does not modify existing case.\"\n  (memoize\n    (fn [s]\n      (string/replace (name s) #\"-(.)\" (fn [[_ match]] (string/upper-case match))))))\n\n\n(defn update-attrs [el f & args]\n  (if-not (vector? el)\n    el\n    (let [attrs? (map? (second el))]\n      (into [(el 0) (apply f (if attrs? (el 1) {}) args)]\n            (subvec el (if attrs? 2 1))))))\n\n(defn ensure-keys [forms]\n  (let [seen #{}]\n    (map-indexed #(update-attrs %2 update :key (fn [k]\n                                                       (if (or (nil? k) (contains? seen k))\n                                                         %1\n                                                         (do (swap! seen conj k)\n                                                             k)))) forms)))\n\n(defn map-with-keys [& args]\n  (ensure-keys (apply clojure.core/map args)))\n\n(defn any-pred\n  \"Evaluate fns sequentially, stopping if any return true.\"\n  [& fns]\n  (fn [this]\n    (loop [fns fns]\n      (if (empty? fns)\n        false\n        (or ((first fns) this)\n            (recur (rest fns)))))))\n\n#?(:cljs (defn is-react-element? [x]\n           (and x (react/isValidElement x))))\n\n(defn flatten-seqs\n  \"Flatten collection, only unwrap sequences\"\n  [children]\n  (filter #(not (seq? %))\n          (rest (tree-seq seq? seq children))))\n\n(defn parse-opt-args [preds args]\n  (loop [preds preds\n         args args\n         out []]\n    (if (empty? preds)\n      (conj out args)\n      (let [match? ((first preds) (first args))]\n        (recur (rest preds)\n               (cond-> args match? (rest))\n               (conj out (if match? (first args) nil)))))))"]}