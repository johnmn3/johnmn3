{"version":3,"file":"re_view.hiccup.hiccup.js","sources":["re_view/hiccup/hiccup.cljs"],"mappings":"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","names":["k-classes","G__15303","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","re-view.hiccup.hiccup/*wrap-props*","x","style-js","cljs.core/keyword-identical?","k","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","c","re-view.hiccup.hiccup/props->js","re-view.hiccup.hiccup/camelCase","cljs.core/name","v","form","style","re-view.hiccup.hiccup/camelCase?","prop-js","re-view.hiccup.hiccup/map->js","re-view.hiccup.hiccup/parse-key","map__15313","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","class","class-name","classes","props","G__15314","re-view.hiccup.hiccup/parse-key-memoized","cljs.core/memoize","G__15254","k-str","tag","k-id","cljs.core/seq?","first-child","cljs.core/PersistentArrayMap","cljs.core/PersistentHashMap","cljs.core.subvec.cljs$core$IFn$_invoke$arity$3","len","re-view.hiccup.hiccup/reduce-flatten-seqs","f","s","attr-name","re-view.hiccup.hiccup/concat-classes","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","re-view.hiccup.hiccup/key->react-attr","cljs.core/count","re-view.hiccup.hiccup/parse-args","init","coll","G__15329","or__3949__auto__","G__15322","re-view.hiccup.hiccup/*create-element*","js/module$node_modules$react$index.createElement","seq__15261","cljs.core/seq","chunk__15262","count__15263","i__15264","vec__15265","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","temp__5457__auto__","cljs.core/chunked-seq?","c__4351__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","vec__15272","cljs.core/first","cljs.core/next","clojure.string.join.cljs$core$IFn$_invoke$arity$2","clojure.string/replace","p1__15185#","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","p1__15184#","cljs.core.update.cljs$core$IFn$_invoke$arity$3","seq__15330","chunk__15331","count__15332","i__15333","vec__15335","vec__15339","cljs.core/boolean","G__15328","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not","cljs.core/re-find","p__15221","vec__15227","clojure.string/upper-case","_"],"sourcesContent":["(ns re-view.hiccup.hiccup\n  (:require [clojure.string :as string]\n            [\"react\" :as react]))\n\n(defn parse-key\n  \"Parses a hiccup key like :div#id.class1.class2 to return the tag name, id, and classes.\n   If tag-name is ommitted, defaults to 'div'. Class names are padded with spaces.\"\n  [x]\n  (-> (re-find #\":([^#.]*)(?:#([^.]+))?(.*)?\" (str x))\n      (update 1 #(if (= \"\" %) \"div\" (string/replace % \"/\" \":\")))\n      (update 3 #(when %\n                   (string/replace (subs % 1) \".\" \" \")))))\n\n;; parse-key is an ideal target for memoization, because keyword forms are\n;; frequently reused (eg. in lists) and almost never generated dynamically.\n(def parse-key-memoized (memoize parse-key))\n\n(defn reduce-flatten-seqs\n  \"Recursively apply f to nested vectors, unwrapping seqs. Similar to recursive `mapcat` but returns a vector.\"\n  [f init coll]\n  (reduce (fn my-f [c x]\n            (if (seq? x)\n              (reduce-flatten-seqs f c x)\n              (conj c (f x)))) init coll))\n\n(defn parse-args\n  \"Return props and children for a hiccup form. If the second element is not a map, supplies an empty map as props.\"\n  [form]\n  (let [len (count form)]\n    (cond (= len 1) [{} []]\n          (let [first-child (form 1)]\n            (or (nil? first-child)\n                (instance? PersistentArrayMap first-child)\n                (instance? PersistentHashMap first-child))) [(form 1) (if (> len 2) (subvec form 2 len) [])]\n          :else [{} (subvec form 1 len)])))\n\n(defn ^string camelCase [s]\n  (string/replace s #\"-([a-z])\" (fn [[_ s]] (string/upper-case s))))\n\n(defn ^boolean camelCase?\n  \"CamelCase by default, only exceptions are data- and aria- attributes.\"\n  [attr-name]\n  (not (re-find #\"^(?:data\\-|aria\\-)\" attr-name)))\n\n(defn key->react-attr\n  \"CamelCase react keys, except for aria- and data- attributes\"\n  [k]\n  (if (keyword-identical? k :for)\n    \"htmlFor\"\n    (let [k-str (name k)]\n      (cond-> k-str\n              (camelCase? k-str) (camelCase)))))\n\n(defn map->js\n  \"Return javascript object with camelCase keys. Not recursive.\"\n  [style]\n  (let [style-js (js-obj)]\n    (doseq [[k v] style]\n      (aset style-js (camelCase (name k)) v))\n    style-js))\n\n(defn concat-classes\n  \"Build className from keyword classes, :class and :classes.\"\n  [^js/String k-classes ^js/String class classes]\n  (->> (cond-> []\n               k-classes (conj k-classes)\n               class (conj class)\n               classes (into classes))\n       (string/join \" \")))\n\n(def ^:dynamic *wrap-props* nil)\n\n(defn props->js\n  \"Returns a React-conformant javascript object. An alternative to clj->js,\n  allowing for key renaming without an extra loop through every prop map.\"\n  [tag k-id k-classes props]\n  (when (or props k-id k-classes)\n    (let [{:keys [class class-name classes] :as props} (cond-> props\n                                                               (boolean *wrap-props*)\n                                                               (*wrap-props* tag))\n          prop-js (cond-> (js-obj)\n                          k-id (doto (aset \"id\" k-id))\n                          (or k-classes class class-name classes) (doto (aset \"className\" (concat-classes k-classes (or class class-name) classes))))]\n      (doseq [[k v] props]\n        (cond\n          ;; convert :style and :dangerouslySetInnerHTML to js objects\n          (or (keyword-identical? k :style)\n              (keyword-identical? k :dangerouslySetInnerHTML))\n          (aset prop-js (name k) (map->js v))\n          ;; ignore className-related keys\n          (or (keyword-identical? k :classes)\n              (keyword-identical? k :class)) nil\n          ;; passthrough all other values\n          :else (aset prop-js (key->react-attr k) v)))\n      prop-js)))\n\n\n(def ^:dynamic *create-element* react/createElement)"]}