{"version":3,"file":"cells.cell$macros.js","sources":["cells/cell$macros.cljc"],"mappings":"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","names":["cells.cell$macros/lib-bindings","namespace-segment","cljs.core/*ns*","cells.cell$macros/cell-name","key","expr","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","bindings","sym","cljs.core/first","body","cljs.core/rest","cell-name","ret__4565__auto__","var_args","G__18515","cells.cell$macros/cell","js/Error","&form","&env","cljs.core.sequence.cljs$core$IFn$_invoke$arity$1","cljs.core/seq","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","cljs.core/List","cljs.core/vec","cljs.core.concat.cljs$core$IFn$_invoke$arity$1","the-name","args__4534__auto__","len__4531__auto__","i__4532__auto__","argseq__4535__auto__","cljs.core/IndexedSeq","cells.cell$macros/cell-fn","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","seq18554","G__18555","cljs.core/next","G__18556","self__4518__auto__","cljs.core.keyword.cljs$core$IFn$_invoke$arity$2","uuid","docstring","cells.cell$macros/defcell","seq18486","G__18487","G__18488","G__18489","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","cljs.core/name","vec__18490","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cells.util/unique-id"],"sourcesContent":["(ns cells.cell\n  (:require [cells.util :as util]))\n\n(def lib-bindings\n  (reduce (fn [bindings sym]\n            (into bindings [(symbol (name sym)) sym]))\n          []\n          '[cells.lib/interval\n            cells.lib/timeout\n            cells.lib/fetch]))\n\n(defmacro defcell\n  \"Defines a named cell.\"\n  [the-name & body]\n  (let [[docstring body] (if (string? (first body))\n                           [(first body) (rest body)]\n                           [nil body])\n        cell-name (keyword (str *ns*) (str the-name))]\n    `(def ~the-name\n       ~@(when docstring (list docstring))\n       (let ~lib-bindings\n         (~'cells.cell/cell* ~cell-name (fn [~'self] ~@body))))))\n\n(defn- cell-name\n  \"Construct a cell-name, incorporating the runtime-value of `key` if provided.\"\n  [key]\n  (let [uuid (str \"_\" (util/unique-id))\n        namespace-segment (str *ns*)]\n    (if key `(keyword ~namespace-segment (str ~uuid \"._\" (hash ~key)))\n            (keyword namespace-segment uuid))))\n\n(defmacro cell\n  \"Returns an anonymous cell. Only one cell will be returned per lexical instance of `cell`,\n  unless a unique `key` is provided. Helper functions in `lib-bindings` (eg. interval) are\n  hoisted into scope, as is `self`, which refers to the current cell.\"\n  ([expr]\n   `(~'cells.cell/cell nil ~expr))\n  ([key expr]\n   `(let ~lib-bindings\n      (~'cells.cell/cell* ~(cell-name key) (fn [~'self] ~expr)))))\n\n(defmacro cell-fn\n  \"Returns an anonymous function which will evaluate with the current cell in the stack.\n  Similar to Clojure's `bound-fn`, but only cares about the currently bound cell.\"\n  [& body]\n  `(let [the-cell# (first ~'cells.cell/*cell-stack*)\n         context# ~'cells.cell/*eval-context*]\n     (fn [& args#]\n       (binding [~'cells.cell/*cell-stack* (cons the-cell# ~'cells.cell/*cell-stack*)]\n         (try (apply (fn ~@body) args#)\n              (catch ~'js/Error error#\n                (~'cells.eval-context/handle-error context# error#)))))))"]}