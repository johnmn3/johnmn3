{"version":3,"file":"shadow.cljs.bootstrap.env.js","sources":["shadow/cljs/bootstrap/env.cljs"],"mappings":";;;AAGA,GAAA,QAAAA,mCAAAC,wCAAAC,kDAAAC,sDAAAC;AAAA;AAAA,AAAA,AAASC,uCAAW,6CAAA,7CAACC;;AAKrB,uCAAA,vCAAMC,sFAAYC;AAAlB,AACE,IAAMC,SAAO,6CAAA,7CAACC,+EAAS,AAACC,4CAAIC,kBAAQJ;AAApC,AACE,OAACK,mDAAMR,qCAAWS,kBAAUL;;AAEhC,GAAA,QAAAT,mCAAAC,wCAAAC,kDAAAC,sDAAAY;AAAA;AAAA,AAAA,AAASC,sCAAU,6CAAA,7CAACV;;AAEpB,wCAAA,gDAAAW,xFAAMM;AAAN,AAAA,IAAAL,aAAAD;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAC,gCAAA,AAAAD,+BAAA,KAAA,OAAA,QAAA,AAAAE,8CAAAC,mBAAAH,YAAAA;WAAAA,PAAgDQ;cAAhD,AAAAJ,4CAAAJ,eAAA,rEAA2BM;cAA3B,AAAAF,4CAAAJ,eAAA,rEAAmCO;AAAnC,AACE,IAAME,MACA,AAACC,+CACC;sBAAAC,JAAKF;AAAL,AAAA,IAAAG,aAAAD;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAX,gCAAA,AAAAW,+BAAA,KAAA,OAAA,QAAA,AAAAV,8CAAAC,mBAAAS,YAAAA;SAAAA,LAAkCE;kBAAlC,AAAAV,4CAAAQ,eAAA,zEAAiBC;AAAjB,AACE,8BAAA,mFAAA,1GAACE,mBAASN,kJAAcI,oBAAaC;;CAFzC,2CAAA,mFAAA,RAGoBR,oEACRC,gBACVD;IAEFG,UACA,AAACC,+CACC;0BAAAM,RAAKP;AAAL,AAAA,IAAAQ,aAAAD;cAAA,AAAAE,4CAAAD,WAAA,IAAA,rEAAUE;kBAAV,AAAAD,4CAAAD,WAAA,IAAA,zEAAkBJ;AAAlB,AACE,kCAAA,mFAAA,9GAACE,mBAASN,qJAAcU,gBAASN;;CACnCJ,IACA,iBAAAW,qBAAA;qEAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAC,cAAAH;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAE,mBAAAF;AAAA,AAAA,IAAAG,aAAA,AAAAC,gBAAAF;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAzB,gCAAA,AAAAyB,+BAAA,KAAA,OAAA,QAAA,AAAAxB,8CAAAC,mBAAAuB,YAAAA;kBAAA,AAAAtB,4CAAAsB,eAAA,zEAAcb;eAAd,AAAAT,4CAAAsB,eAAA,tEAA0BsB;AAA1B,AAAA,IAAApB,uBAAA;mFAAAC;AAAA,AAAA,YAAAP,kBAAA,KAAA;;AAAA,AAAA,IAAAO,eAAAA;;AAAA,AAAA,IAAAN,yBAAA,AAAAC,cAAAK;AAAA,AAAA,GAAAN;AAAA,AAAA,IAAAM,eAAAN;AAAA,AAAA,GAAA,AAAAO,6BAAAD;AAAA,IAAAE,kBA20EyC,AAAAgD,sBAAAlD;IA30EzCG,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,cAAA,AAAAK,6CAAAN,gBAAAK,vEACMjB;AADN,AAAA,AAAA,AAAAmB,uBAAAJ,SAAA,mFAEGf,QAAQN;;AAFX,eAAA,CAAAuB,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,kEAAA,AAAAC,qBAAAb;;AAAA,OAAAU,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,cAAA,AAAAP,gBAAAE,1BACMV;AADN,AAAA,OAAAwB,eAAA,+GAAA,AAAAF,kEAAA,AAAAG,eAAAf,7GAEGV,QAAQN;;;AAFX;;;;;CAAA,KAAA;;;IAAAgC,mBAAA,AAAArB,cAAA,AAAAI,qBACcoB;AADd,AAAA,GAAAH;AAAA,OAAAC,+CAAAD,iBAAA,AAAAE,oDAAA,AAAAH,eAAAvB;;AAAA,eAAA,AAAAuB,eAAAvB;;;;;AAAA;;;;;CAAA,KAAA;;;AAAA,AAAA,OAAAD,mBAAqCd;;AAb7C,AAiBE,AAAC2C,sBAAOnD,oCAAUW;;AAIlBA;;AAEJ,wCAAA,xCAAMyC,wFAAaC;AAAnB,AACE,UAAA,AAAAC,NAAM3C,sBAAKX;IACLuD,KAAG,mDAAA,mFAAA,tIAACC,+CAAO7C,iJAAc0C;AAD/B,AAEE,IAAAI,mBAAI,mDAAA,mFAAA,tIAACD,+CAAO7C,kJAAc4C;AAA1B,AAAA,oBAAAE;AAAAA;;AACI,MAAO,kIAAA,2CAAA,7KAACC,gDAAQ,CAAA,sDAAA,JAAWL,0HAA0BA;;;AAG7D,sCAAA,tCAAMO,oFAAWC;AAAjB,AAAA,GACS,AAACC,qBAAKD;AADf;AAAA,AAAA,MAAA,KAAAF,MAAA;;;AAAA,GAES,AAACI,uBAAOC,wBAAQH;AAFzB;AAAA,AAAA,MAAA,KAAAF,MAAA;;;6LAMO,AAAC/C,+CACC,WAAAsD,SAAAC,zJAYF,AAAA,lBACA,AAACF,rFACD,oDAAA,7CAACe;AAdC,AAAA,IAAAZ,aAAAF;IAAAE,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAjE,gCAAA,AAAAiE,+BAAA,KAAA,OAAA,QAAA,AAAAhE,8CAAAC,mBAAA+D,YAAAA;QAAAA,JAA6BI;WAA7B,AAAAlE,4CAAA8D,eAAA,lEAAaE;YAAb,AAAAhE,4CAAA8D,eAAA,nEAAkBG;IAAlBF,aAAAF;IAAAE,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAlE,gCAAA,AAAAkE,+BAAA,KAAA,OAAA,QAAA,AAAAjE,8CAAAC,mBAAAgE,YAAAA;UAAAA,NAAuFM;kBAAvF,AAAArE,4CAAA+D,eAAA,zEAAwCtD;kBAAxC,AAAAT,4CAAA+D,eAAA,zEAAoDI;eAApD,AAAAnE,4CAAA+D,eAAA,tEAAgEnB;eAAhE,AAAA5C,4CAAA+D,eAAA,tEAAyEK;AAAzE,AAEE,GAEE,AAACE,cAAI,AAAClD,cAAI,AAACmD,uDAAiBP,KAAKpB;AACjCsB;;AAHF,AAAA,kDAAA,oHAAA,/DAMS,AAACM,gDAAUR,KAAKI,kEACf,AAACK,6CAAKR,MAAMI;;;4MAX1B,AAACV,kBAAQ,AAAA,yGAAA,AAAAX,gBAAmBtD,pVAC5B,2CAAA,6DAAA,wDAAA,hEAWS6D","names":["js/shadow","js/shadow.cljs","js/shadow.cljs.bootstrap","js/shadow.cljs.bootstrap.env","js/shadow.cljs.bootstrap.env.loaded-ref","shadow.cljs.bootstrap.env/loaded-ref","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","shadow.cljs.bootstrap.env/set-loaded","namespaces","loaded","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$1","cljs.core/symbol","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","clojure.set/union","js/shadow.cljs.bootstrap.env.index-ref","shadow.cljs.bootstrap.env/index-ref","p__32146","map__32147","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","shadow.cljs.bootstrap.env/build-index","sources","exclude","data","idx","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__32153","map__32155","resource-id","rc","cljs.core/assoc-in","p__32161","vec__32162","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","provide","iter__4324__auto__","s__32168","cljs.core/LazySeq","temp__5457__auto__","cljs.core/seq","xs__6012__auto__","map__32173","cljs.core/first","iterys__4320__auto__","s__32170","cljs.core/chunked-seq?","c__4322__auto__","size__4323__auto__","cljs.core/count","b__32172","cljs.core/chunk-buffer","i__32171","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__32169","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__4321__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","iter__32167","provides","cljs.core/reset!","shadow.cljs.bootstrap.env/get-ns-info","ns","cljs.core/deref","id","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","or__3949__auto__","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","js/Error","shadow.cljs.bootstrap.env/find-deps","entries","cljs.core/set?","cljs.core/every?","cljs.core/symbol?","cljs.core/reverse","p__32210","p__32211","map__32212","map__32213","deps","order","x","output-name","requires","src","cljs.core/not","clojure.set.intersection.cljs$core$IFn$_invoke$arity$2","clojure.set.union.cljs$core$IFn$_invoke$arity$2","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-first"],"sourcesContent":["(ns shadow.cljs.bootstrap.env\n  (:require [clojure.set :as set]))\n\n(defonce loaded-ref (atom #{}))\n\n;; calls to this will be injected by shadow-cljs\n;; it will receive an array of strings matching the goog.provide\n;; names that where provided by the \"app\"\n(defn set-loaded [namespaces]\n  (let [loaded (into #{} (map symbol) namespaces)]\n    (swap! loaded-ref set/union loaded)))\n\n(defonce index-ref (atom nil))\n\n(defn build-index [{:keys [sources exclude] :as data}]\n  (let [idx\n        (reduce\n          (fn [idx {:keys [resource-id] :as rc}]\n            (assoc-in idx [:sources resource-id] rc))\n          {:sources-ordered sources\n           :exclude exclude}\n          sources)\n\n        idx\n        (reduce\n          (fn [idx [provide resource-id]]\n            (assoc-in idx [:sym->id provide] resource-id))\n          idx\n          (for [{:keys [resource-id provides]} sources\n                provide provides]\n            [provide resource-id]))]\n\n    (reset! index-ref idx)\n\n    #_ (js/console.log \"build-index\" idx)\n\n    idx))\n\n(defn get-ns-info [ns]\n  (let [idx @index-ref\n        id (get-in idx [:sym->id ns])]\n    (or (get-in idx [:sources id])\n        (throw (ex-info (str \"ns \" ns \" not available\") {:ns ns}))\n        )))\n\n(defn find-deps [entries]\n  {:pre [(set? entries)\n         (every? symbol? entries)]}\n  ;; abusing that :sources-ordered is in correct dependency order\n  ;; just walk in reverse and pick up everything along the way\n  (->> (reverse (:sources-ordered @index-ref))\n       (reduce\n         (fn [{:keys [deps order] :as x} {:keys [resource-id output-name provides requires] :as src}]\n\n           (cond\n             ;; don't load files that don't provide anything we want\n             (not (seq (set/intersection deps provides)))\n             x\n\n             :else\n             {:deps (set/union deps requires)\n              :order (conj order src)}))\n         {:deps entries\n          :order []})\n       (:order)\n       (reverse)\n       (into [])))\n"]}