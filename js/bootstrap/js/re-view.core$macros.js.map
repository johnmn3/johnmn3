{"version":3,"file":"re-view.core$macros.js","sources":["re_view/core$macros.cljc"],"mappings":"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","names":["re-view.core$macros/js-obj-with-set!","m","temp__5457__auto__","cljs.core/seq","cljs.core.sequence.cljs$core$IFn$_invoke$arity$1","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","cljs.core/List","cljs.core/vec","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core.concat.cljs$core$IFn$_invoke$arity$1","sym","cljs.core.gensym.cljs$core$IFn$_invoke$arity$0","exprs","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p__11012","vec__11013","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","k","v","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","G__11016","re-view.util/camelCase","cljs.core/name","re-view.core$macros/group-methods","methods","cljs.core/reduce-kv","cljs.core/assoc-in","G__11027","cljs.core/Keyword","G__11028","cljs.core/namespace","cljs.core.update.cljs$core$IFn$_invoke$arity$3","re-view.core$macros/parse-view-args","args","re-view.util/parse-opt-args","cljs.core/symbol?","cljs.core/string?","cljs.core/map?","G__11033","cljs.core/first","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","re-view.core$macros/display-name","ns","given-name","cljs.core/last","clojure.string.split.cljs$core$IFn$_invoke$arity$2","cljs.core/ns-name","p__11049","vec__11052","seq__11053","first__11054","cljs.core/next","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/array-map","re-view.core$macros/wrap-body","name","body","js/Error","cljs.core/vector?","cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1","ret__4565__auto__","var_args","args__4534__auto__","len__4531__auto__","i__4532__auto__","argseq__4535__auto__","cljs.core/IndexedSeq","re-view.core$macros/defview","&form","&env","seq11095","G__11096","G__11097","self__4518__auto__","vec__11104","view-name","docstring","_","cljs.core/Symbol","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core/*ns*","G__11127","re-view.core$macros/view","seq11225","G__11226","G__11227","vec__11235","re-view.core$macros/defn","seq11296","G__11297","G__11298","vec__11309","cljs.core.concat.cljs$core$IFn$_invoke$arity$0","re-view.core$macros/extend-view","seq11381","G__11382","G__11383","G__11384","view"],"sourcesContent":["(ns ^:figwheel-always re-view.core\n  (:refer-clojure :exclude [defn])\n  (:require [clojure.string :as string]\n            [re-view.util :as util :refer [camelCase]]))\n\n(clojure.core/defn- js-obj-with-set!\n  \"Convert a Clojure map to javascript object using `set!`, to play well with Closure Compiler.\n  Keys are converted to camelCase. Shallow.\"\n  [m]\n  (when-let [m (seq m)]\n    (let [sym (gensym)\n          exprs (map (fn [[k v]]\n                       `(~'set! (~(symbol (str \".-\" (camelCase (name k)))) ~sym) ~v)) m)]\n      `(let [~sym (~'js-obj)]\n         ~@exprs\n         ~sym))))\n\n#_(clojure.core/defn- js-obj-camelCase\n    \"Return a javascript object for m with keys as camelCase strings (keys will not be recognized by Closure compiler).\"\n    [m]\n    (when-let [m (seq m)]\n      `(~'js-obj ~@(mapcat (fn [[k v]] (list (camelCase (name k)) v)) m))))\n\n(clojure.core/defn group-methods\n  \"Groups methods by role in a React component.\"\n  [methods]\n  (-> (reduce-kv (fn [m k v]\n                   (assoc-in m [(case k (:key :display-name :docstring) :react-keys\n                                        (case (namespace k)\n                                          \"spec\" :class-keys\n                                          \"view\" :lifecycle-keys\n                                          :instance-keys)) k] v)) {} methods)\n      ;; instance keys are accessed via dot notation.\n      ;; must use set! for the keys, otherwise they will\n      ;; be modified in advanced compilation.\n      (update :instance-keys js-obj-with-set!)\n\n      ;; this won't last - currently building :view/default-props\n      ;; in the macro so there's no way to reuse specs.\n      ))\n\n(clojure.core/defn parse-view-args [args]\n  (let [args (util/parse-opt-args [symbol? string? map?] args)]\n    (cond-> args\n            (nil? (first args)) (assoc 0 (gensym)))))\n\n(clojure.core/defn display-name\n  \"Generate a meaningful name to identify React components while debugging\"\n  [ns given-name]\n  (str (last (string/split (name (ns-name ns)) #\"\\.\")) \"/\" given-name))\n\n(clojure.core/defn wrap-body\n  \"Wrap body in anonymous function form.\"\n  [name [args & body]]\n  (assert (vector? args))\n  `(~'fn ~name ~args\n     (do ~@(drop-last body)\n         (~'re-view.hiccup.core/element ~(last body) {:wrap-props ~'re-view.core/wrap-props}))))\n\n(defmacro defview\n  \"Define a view function.\n\n   Expects optional docstring and methods map, followed by\n    the argslist and body for the render function, which should\n    return a Hiccup vector or React element.\"\n  [& args]\n  (let [[view-name docstring methods body] (parse-view-args args)\n        _ (assert (symbol? view-name))\n        methods (-> methods\n                    (merge {:docstring    docstring\n                            :display-name (display-name *ns* view-name)\n                            :view/render  (wrap-body view-name body)})\n                    (group-methods))]\n    `(let [the-class# (~'re-view.core/class* ~methods)]\n       (def ~(symbol (str view-name \"Class\")) the-class#)\n       (def ~view-name ~@(some-> docstring (list)) (~'re-view.core/factory the-class#)))))\n\n(defmacro view\n  \"Returns anonymous view, given the same args as `defview`.\"\n  [& args]\n  (let [[view-name docstring methods body] (parse-view-args args)\n        methods (-> methods\n                    (merge {:docstring    docstring\n                            :display-name (display-name *ns* view-name)\n                            :view/render  (wrap-body view-name body)})\n                    (group-methods))]\n    `(~'re-view.core/view* ~methods)))\n\n(defmacro defn\n  \"Defines a stateless view function\"\n  [& args]\n  (let [[view-name docstring methods body] (parse-view-args args)]\n    `(clojure.core/defn ~view-name ~@(if docstring [docstring] [])\n       [& args#]\n       (apply ~(wrap-body view-name body) (if (map? (first args#)) args# (cons {} args#))))))\n\n(defmacro extend-view [view & args]\n  `(let [prototype# (:prototype (~'goog.object/get ~view \"re$view$base\"))]\n     (clojure.core/specify! prototype# ~@args)))\n\n(comment\n  (assert (= (parse-view-args '(name \"a\" {:b 1} [c] 1 2))\n             '[name \"a\" {:b 1} ([c] 1 2)]))\n\n  (assert (= (parse-view-args '(name {} [] 1 2))\n             '[name nil {} ([] 1 2)]))\n\n  (assert (= (parse-view-args '(name \"a\" [] 1 2))\n             '[name \"a\" nil ([] 1 2)]))\n\n  (assert (= (parse-view-args '(name [] 1 2))\n             '[name nil nil ([] 1 2)]))\n\n  (assert (= (parse-view-args '(name []))\n             '[name nil nil ([])])))\n"]}