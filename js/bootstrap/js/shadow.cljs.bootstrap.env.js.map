{"version":3,"file":"shadow.cljs.bootstrap.env.js","sources":["shadow/cljs/bootstrap/env.cljs"],"mappings":"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","names":["cljs.core/reverse","entries","exclude","clojure.set.union.cljs$core$IFn$_invoke$arity$2","deps","requires","idx","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/deref","shadow.cljs.bootstrap.env/index-ref","cljs.core/set?","sources","cljs.core/reset!","id","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","ns","cljs.core/not","cljs.core/seq","clojure.set.intersection.cljs$core$IFn$_invoke$arity$2","provides","cljs.core/chunk-first","s__16595","or__3949__auto__","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","order","src","provide","iter__4324__auto__","s__16593","cljs.core/LazySeq","temp__5457__auto__","xs__6012__auto__","map__16598","cljs.core/first","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","iterys__4320__auto__","cljs.core/chunked-seq?","c__4322__auto__","size__4323__auto__","cljs.core/count","b__16597","cljs.core/chunk-buffer","i__16596","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__16594","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__4321__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","iter__16592","resource-id","p__16584","vec__16585","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","p__16579","map__16580","rc","js/shadow","js/shadow.cljs","js/shadow.cljs.bootstrap","js/shadow.cljs.bootstrap.env","js/shadow.cljs.bootstrap.env.loaded-ref","shadow.cljs.bootstrap.env/loaded-ref","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","js/shadow.cljs.bootstrap.env.index-ref","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/every?","cljs.core/symbol?","x","loaded","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$1","cljs.core/symbol","namespaces","p__16574","map__16575","shadow.cljs.bootstrap.env/build-index","data","js/Error","shadow.cljs.bootstrap.env/find-deps","cljs.core/assoc-in","shadow.cljs.bootstrap.env/get-ns-info","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","clojure.set/union","output-name","p__16672","p__16673","map__16675","map__16677","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","shadow.cljs.bootstrap.env/set-loaded"],"sourcesContent":["(ns shadow.cljs.bootstrap.env\n  (:require [clojure.set :as set]))\n\n(defonce loaded-ref (atom #{}))\n\n;; calls to this will be injected by shadow-cljs\n;; it will receive an array of strings matching the goog.provide\n;; names that where provided by the \"app\"\n(defn set-loaded [namespaces]\n  (let [loaded (into #{} (map symbol) namespaces)]\n    (swap! loaded-ref set/union loaded)))\n\n(defonce index-ref (atom nil))\n\n(defn build-index [{:keys [sources exclude] :as data}]\n  (let [idx\n        (reduce\n          (fn [idx {:keys [resource-id] :as rc}]\n            (assoc-in idx [:sources resource-id] rc))\n          {:sources-ordered sources\n           :exclude exclude}\n          sources)\n\n        idx\n        (reduce\n          (fn [idx [provide resource-id]]\n            (assoc-in idx [:sym->id provide] resource-id))\n          idx\n          (for [{:keys [resource-id provides]} sources\n                provide provides]\n            [provide resource-id]))]\n\n    (reset! index-ref idx)\n\n    #_ (js/console.log \"build-index\" idx)\n\n    idx))\n\n(defn get-ns-info [ns]\n  (let [idx @index-ref\n        id (get-in idx [:sym->id ns])]\n    (or (get-in idx [:sources id])\n        (throw (ex-info (str \"ns \" ns \" not available\") {:ns ns}))\n        )))\n\n(defn find-deps [entries]\n  {:pre [(set? entries)\n         (every? symbol? entries)]}\n  ;; abusing that :sources-ordered is in correct dependency order\n  ;; just walk in reverse and pick up everything along the way\n  (->> (reverse (:sources-ordered @index-ref))\n       (reduce\n         (fn [{:keys [deps order] :as x} {:keys [resource-id output-name provides requires] :as src}]\n\n           (cond\n             ;; don't load files that don't provide anything we want\n             (not (seq (set/intersection deps provides)))\n             x\n\n             :else\n             {:deps (set/union deps requires)\n              :order (conj order src)}))\n         {:deps entries\n          :order []})\n       (:order)\n       (reverse)\n       (into [])))\n"]}