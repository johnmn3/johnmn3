{"version":3,"file":"shadow_eval.core.js","sources":["shadow_eval/core.cljs"],"mappings":"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","names":["cljs.core/count","cljs.core/re-seq","source","map__12138","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","error","value","result","cljs.core/ex-data","cljs.core/not","G__12220","G__12221","re-db.d/get","cells.cell/Cell","G__12247","re-db.d/transact!","cljs.core/name","this","map__12132","cljs.core/deref","p1__12127#","state","cljs.core.partial.cljs$core$IFn$_invoke$arity$4","cljs.core/swap!","cljs.core/assoc","re_view.hiccup.core.element.cljs$core$IFn$_invoke$arity$1","p1__12166#","shadow-eval.core/eval-str","content","goog.object/set","cells.cell/IRenderHiccup","G__12266","cells.cell/render-hiccup","G__12267","G__12268","cb","map__12179","post","posts","re-db.patterns/invalidate!","re-db.d/*db*","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","lark.value_viewer.core.format_value.cljs$core$IFn$_invoke$arity$1","cljs.core/Var","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","cljs.core/ex-cause","_","cljs.core.map.cljs$core$IFn$_invoke$arity$2","shadow-eval.core/show-example","shadow-eval.core/source-examples","cljs.js.eval_str.cljs$core$IFn$_invoke$arity$5","shadow-eval.core/admin","fexpr__12262","map__12183","shadow-eval.core/c-state","js/shadow-eval","js/shadow-eval.core","js/shadow-eval.core._","shadow-eval.core/_","shadow.cljs.bootstrap.browser/init","cljs.js/js-eval","cljs.core/ex-message","shadow-eval.core/incept","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","the-class__7323__auto__","re-view.core/class*","p__12128","map__12129","re_view.hiccup.core.element.cljs$core$IFn$_invoke$arity$2","re-view.core/wrap-props","shadow-eval.core/show-exampleClass","re-view.core/factory","G__12248","G__12249","shadow-eval.core/render","G__12236","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","shadow.cljs.bootstrap.browser/load","re-view.core/render-to-dom","shadow-eval.core/examples","p__12175","map__12176","shadow-eval.core/inceptClass","shadow-eval.core/circ","shadow-eval.core/ex2","js/shadow-eval.core.c-state","cljs.js.empty_state.cljs$core$IFn$_invoke$arity$0","shadow-eval.core/examplesClass"],"sourcesContent":["(ns shadow-eval.core\n  (:require\n\n    ;; evaluate\n    [cljs.js :as cljs]\n    [shadow.cljs.bootstrap.browser :as boot]\n\n    [clojure.set :refer [difference]]\n\n    ;; view\n    [re-view.core :as v :refer [defview]]\n    [re-view.hiccup.core :refer [element]]\n\n\n    ;; things to eval and display\n    [lark.value-viewer.core :as views]\n    [re-db.d :as d]\n    [re-db.patterns :as patterns]\n    [cells.cell :as cellc]\n    [cells.lib :as cell\n     :refer [interval timeout fetch geo-location with-view]\n     :refer-macros [wait]]\n\n    [cljs.reader :refer [read-string]]\n    [clojure.string :as string])\n  (:require-macros [cells.cell :refer [defcell cell]]))\n\n\n;; Source text to eval\n\n(def source-examples [\"(for [n (range 10)] n)\"\n                      \"(defcell x 10)\"\n                      \"(cell (interval 100 inc))\"\n                      \"(require '[cljs.js :as cljs])\\n\\n(fn? cljs/eval-str)\"])\n\n;; Set up eval environment\n\n(defonce c-state (cljs/empty-state))\n\n(defn eval-str [source cb]\n  (cljs/eval-str\n    c-state\n    source\n    \"[test]\"\n    {:eval cljs/js-eval\n     :load (partial boot/load c-state)\n     :ns   (symbol \"shadow-eval.user\")}\n    cb))\n\n;; Views\n\n(defview show-example\n  \"Shows a single example, with an editable textarea and value-view.\"\n  {:key                (fn [_ source] source)\n   :view/initial-state (fn [_ source]\n                         {:source source})\n   :view/did-mount     (fn [this source]\n                         (eval-str source (partial swap! (:view/state this) assoc :result)))}\n  [{:keys [view/state]}]\n  (let [{:keys [source result]} @state]\n    [:.ma3.flex\n     [:.bg-near-white.pa3.flex-none\n      {:style {:width 450}}\n      [:textarea.bn.pre.w-100.f6.lh-copy.bg-near-white.outline-0.monospace.overflow-auto\n       {:value     (:source @state)\n        :style     {:height (str (+ 1.75 (* 1.3125 (count (re-seq #\"\\n|\\r\\n\" source)))) \"rem\")}\n        :on-change #(let [source (.. % -target -value)]\n                      (swap! state assoc :source source)\n                      (eval-str source (partial swap! state assoc :result)))}]]\n\n     (let [{:keys [error value]} result]\n       [:.pre-wrap\n        (if error (element [:.pa3.bg-washed-red\n                            [:.b (ex-message error)]\n                            [:div (str (ex-data error))]\n                            (pr-str (ex-cause error))])\n\n                  [:.pa3 (views/format-value value)])])]))\n\n(defview incept\n  \"Shows a single example, with an editable textarea and value-view.\"\n  {:key                (fn [_ content posts post cb] content)\n   :view/initial-state (fn [_ content posts post cb]\n                         {:source content :post post :posts posts :cb cb})\n   :view/did-mount     (fn [this content posts post cb]\n                         (eval-str content\n                           (partial swap! (:view/state this) assoc :result)))}\n  [{:keys [view/state]}]\n  (let [{:keys [source result post posts cb]} @state]\n    [:div\n     (let [{:keys [error value]} result]\n       [:div\n        (if error (element [:.pa3.bg-washed-red\n                            [:.b (ex-message error)]\n                            [:div (str (ex-data error))]\n                            (pr-str (ex-cause error))])\n                  value)\n        [:textarea.bn.pre.w-100.f6.lh-copy.bg-near-white.outline-0.monospace.overflow-auto\n          {:value     (:source @state)\n           :style     (if-not source\n                        {}\n                        {:height (str (+ 1.75 (* 1.3125 (count (re-seq #\"\\n|\\r\\n\" source)))) \"rem\")})\n           :on-change #(let [source (.. % -target -value)]\n                         (swap! state assoc :source source)\n                         (eval-str source (partial swap! state assoc :result))\n                         (when cb (cb post source)))}]])]))\n\n\n(def admin\n  \"(def sync-repo-button\n     [:button {:on-click sync-repo} \\\"Pull\\\"])\n\n  (def push-button\n     [:button {:on-click do-commit} \\\"Push\\\"])\n\n  (def username-input\n     [:input#username {:name \\\"username\\\" :type \\\"text\\\"}])\n\n  (def password-input\n     [:input#password {:name \\\"password\\\" :type \\\"password\\\"}])\n\n  (def client-id-input\n    [:input#clientid  {:name \\\"clientid\\\" :type \\\"password\\\"}])\n\n  (def client-secret-input\n    [:input#clientsecret  {:name \\\"clientsecret\\\" :type \\\"password\\\"}])\n\n  (def text1 \\\"Like git pages, but for people - a Pull, Eval, Push, Loop (PEPL) is a REPL on a git stick.\n\n  With PEPLs you can generate static blogs or sites by following these four basic steps:\n\n  1. Pull in your templates from Github\n  2. Live edit your site within your browser\n  3. Push the new HTML back to Github\n  4. Repeat!\n\n  \\\")\n\n  (defcell text-atom {:text text1 :refresh true})\n\n  (defview show-lines [this]\n    [:.pa3.flex-none\n      {:style {:border-color \\\"black\\\",\n               :align-text \\\"top\\\",\n               :padding 5,\n               :float \\\"left\\\",\n               :width \\\"100%\\\",\n               :height \\\"auto\\\",\n               :border-radius 13}}\n      [:h1 \\\"The PEPL\\\"]\n      [:.pa3 (apply concat\n               (for [x (clojure.string/split-lines (:text @text-atom))]\n                 [x [:br]]))\n      [:hr]\n      [:.pa3 \\\"Enter your credentials below and then click \\\\\\\"Pull\\\\\\\".\\\"]\n      [:.pa3 \\\"Github Username:\\\" [:br] username-input]\n      [:.pa3 \\\"Github Password:\\\" [:br] password-input]\n      [:.pa3 \\\"Github Oauth Client-ID:\\\" [:br] client-id-input]\n      [:.pa3 \\\"Github Oauth Client-Secret:\\\" [:br] client-secret-input]\n      [:.pa3 sync-repo-button]\n  [:.pa3 \\\"Once they've loaded, you can edit your posts below:\\\"]\n  (render-current-posts)\n  [:.pa3 push-button \\\" Click here to send your updates back to Github\\\"]\n  [:hr]\n  [:.pa3 \\\"This interface is being constructed by the ClojureScript code below. Edit it to change the functionality of this PEPL.\\\"]\n  ]])\n\n  (show-lines)\")\n\n(def ex2\n  \"(def frob 'niner)\n[:.pa3 1 [:br] 2 [:br] 3 [:br] 4 \\\"frob\\\"]\")\n\n(def circ\n  [:div.circle\n   {:on-click #()}\n   [:.pa3.text \"Blog\"]\n   [:.pa3.text \"Bio\"]\n   [:.pa3.text \"Projects\"]\n   [:.pa3.text \"Gists\"]\n   [:.pa3.text \"About\"]\n   [:.pa3.text \"Admin\"]])\n\n(defview examples\n  \"Root view for the page\"\n  []\n  (if-not (d/get ::eval-state :ready?)\n    \"Loading...\"\n    [:.f3\n     (incept admin nil nil nil)\n     ; circ\n     [:hr]\n     [:.pa3 \"Below are some traditional maria.cloud based evaluation boxes you can use to test expressions in.\"]\n     (map show-example source-examples)]))\n\n(defonce _\n         (boot/init c-state\n                    {:path         \"/js/bootstrap\"\n                     :load-on-init '#{shadow-eval.user}}\n                    (fn []\n                      (d/transact! [[:db/add ::eval-state :ready? true]]))))\n\n(defn render []\n  (v/render-to-dom (examples) \"shadow-eval\"))\n\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Protocol extensions to enable rendering of cells and shapes\n\n(extend-type cells.cell/Cell\n  cells.cell/ICellStore\n  (put-value! [this value]\n    (d/transact! [[:db/add :cells (name this) value]]))\n  (get-value [this]\n    (d/get :cells (name this)))\n  (invalidate! [this]\n    (patterns/invalidate! d/*db* :ea_ [:cells (name this)]))\n  lark.value-viewer.core/IView\n  (view [this] (cells.cell/view this)))\n\n(extend-protocol lark.value-viewer.core/IView\n  Var\n  (view [this] (@this)))\n\n(extend-protocol cells.cell/IRenderHiccup\n  object\n  (render-hiccup [this] (re-view.hiccup.core/element this)))\n"]}