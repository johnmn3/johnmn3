{"version":3,"file":"cljs.spec.gen.alpha$macros.js","sources":["cljs/spec/gen/alpha$macros.cljc"],"mappings":"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","names":["syms","fqn","s","cljs.core.repeat.cljs$core$IFn$_invoke$arity$1","xs","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.sequence.cljs$core$IFn$_invoke$arity$1","cljs.core/seq","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","cljs.core/List","cljs.core/vec","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","cljs.core/name","cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","cnt","cljs.core/count","ret__4565__auto__","var_args","args__4534__auto__","len__4531__auto__","i__4532__auto__","argseq__4535__auto__","cljs.core/IndexedSeq","cljs.spec.gen.alpha$macros/delay","&form","&env","seq18831","G__18832","cljs.core/first","cljs.core/next","G__18833","self__4518__auto__","p__18788","vec__18789","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.spec.gen.alpha$macros/dynaload","quote","body","doc","n","checks","cljs.core.range.cljs$core$IFn$_invoke$arity$2","cljs.spec.gen.alpha$macros/lazy-prim","cljs.spec.gen.alpha$macros/lazy-prims","seq18893","G__18894","G__18895","cljs.core.concat.cljs$core$IFn$_invoke$arity$0","clojure.string.split.cljs$core$IFn$_invoke$arity$2","cljs.core/namespace","cljs.core.map.cljs$core$IFn$_invoke$arity$3","cljs.spec.gen.alpha$macros/lazy-combinator","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","clojure.string.join.cljs$core$IFn$_invoke$arity$2","cljs.core.take.cljs$core$IFn$_invoke$arity$2","cljs.spec.gen.alpha$macros/lazy-combinators","seq18869","G__18870","G__18871"],"sourcesContent":[";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.spec.gen.alpha\n  (:refer-clojure :exclude [delay])\n  (:require [cljs.core :as c]\n            [clojure.string :as string]))\n\n(defmacro dynaload [[quote s]]\n  (let [xs     (string/split (namespace s) #\"\\.\")\n        cnt    (count xs)\n        checks (map\n                 (fn [n xs]\n                   `(c/exists? ~(symbol (string/join \".\" (take n xs)))))\n                 (range 2 cnt)\n                 (repeat xs))]\n    `(cljs.spec.gen.alpha/LazyVar.\n       (fn []\n         (if (and ~@checks (c/exists? ~s))\n           ~(vary-meta s assoc :cljs.analyzer/no-resolve true)\n           (throw\n             (js/Error.\n               (str \"Var \" '~s \" does not exist, \"\n                    (namespace '~s) \" never required\")))))\n       nil)))\n\n(defmacro delay\n  \"given body that returns a generator, returns a\n  generator that delegates to that, but delays\n  creation until used.\"\n  [& body]\n  `(delay-impl (c/delay ~@body)))\n\n(defmacro ^:skip-wiki lazy-combinator\n  \"Implementation macro, do not call directly.\"\n  [s]\n  (let [fqn (symbol \"clojure.test.check.generators\" (name s))\n        doc (str \"Lazy loaded version of \" fqn)]\n    `(let [g# (dynaload '~fqn)]\n       (defn ~s\n         ~doc\n         [& ~'args]\n         (apply @g# ~'args)))))\n\n(defmacro ^:skip-wiki lazy-combinators\n  \"Implementation macro, do not call directly.\"\n  [& syms]\n  `(do\n     ~@(map\n         (fn [s] (list `lazy-combinator s))\n         syms)))\n\n(defmacro ^:skip-wiki lazy-prim\n  \"Implementation macro, do not call directly.\"\n  [s]\n  (let [fqn (symbol \"clojure.test.check.generators\" (name s))\n        doc (str \"Fn returning \" fqn)]\n    `(let [g# (dynaload '~fqn)]\n       (defn ~s\n         ~doc\n         [& ~'args]\n         @g#))))\n\n(defmacro ^:skip-wiki lazy-prims\n  \"Implementation macro, do not call directly.\"\n  [& syms]\n  `(do\n     ~@(map\n         (fn [s] (list `lazy-prim s))\n         syms)))"]}