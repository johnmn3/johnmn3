{"version":3,"file":"shadow.cljs.bootstrap.browser.js","sources":["shadow/cljs/bootstrap/browser.cljs"],"mappings":"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","names":["js/Error","shadow.cljs.bootstrap.browser/load-namespaces","cljs.core/every?","cljs.core/symbol?","namespaces","compile-state-ref","ns","cb","init-cb","shadow.cljs.bootstrap.browser/transit-load","shadow.cljs.bootstrap.browser.asset_path.cljs$core$IFn$_invoke$arity$variadic","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p__17024","map__17025","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","ana-name","cljs.core/empty?","load-info","shadow.cljs.bootstrap.browser/queue-task!","task","shadow.cljs.bootstrap.browser/transit-read","txt","cljs.core/deref","deps-to-load-for-ns","res","cljs.core/set?","path","callback","provides","goog/net.BulkLoader","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","uris","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.js/*loaded*","clojure.set/union","shadow.cljs.bootstrap.env/find-deps","clojure.set.union.cljs$core$IFn$_invoke$arity$2","macro-deps","node","js/document.createElement","loader","cljs.core/Symbol","name","p1__17013#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","deps-to-load-with-macros","load-on-init","opts","shadow.cljs.bootstrap.env/loaded-ref","p1__17015#","clojure.set/superset?","shadow.cljs.bootstrap.browser/execute-load!","load","js/goog.net.EventType.SUCCESS","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/str","shadow.cljs.bootstrap.browser/init-opts","args","load-fn","macros","p__17021","map__17022","js-name","r","cognitect.transit.reader.cljs$core$IFn$_invoke$arity$1","data","req","texts","map__17062","exclude","idx","shadow.cljs.bootstrap.env/build-index","js/document.createTextNode","code","G__17027","cljs.core.into.cljs$core$IFn$_invoke$arity$2","js-files-to-load","shadow.cljs.bootstrap.browser/compile-state-ref?","js","text","uri","cognitect.transit/read","things-already-loaded","p1__17018#","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","compile-state","cljs.core/map?","shadow.cljs.bootstrap.browser/script-eval","js/document.body.appendChild","shadow.cljs.bootstrap.browser/fix-provide-conflict!","analyzer-data-to-load","or__3949__auto__","cljs.core/not","p__17006","map__17007","type","rc","G__17004","G__17005","goog.net.XhrIo/send","G__17032","x","p__17054","map__17055","shadow.cljs.bootstrap.browser/load","p1__17017#","temp__5457__auto__","cljs.core/fn?","js/shadow","js/shadow.cljs","js/shadow.cljs.bootstrap","js/shadow.cljs.bootstrap.browser","js/shadow.cljs.bootstrap.browser.init-opts","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","e","var_args","args__4534__auto__","len__4531__auto__","i__4532__auto__","argseq__4535__auto__","cljs.core/IndexedSeq","shadow.cljs.bootstrap.browser/asset-path","seq17000","self__4519__auto__","cljs.core/seq","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$1","seq__17028","chunk__17029","count__17030","i__17031","cljs.core/chunked-seq?","c__4351__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","p1__17019#","p2__17020#","cljs.core.map.cljs$core$IFn$_invoke$arity$3","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","shadow.cljs.bootstrap.env/get-ns-info","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","p__17059","map__17060","shadow.cljs.bootstrap.browser/init","p1__17016#","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","js/cljs","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","p1__17058#","cljs.core/Atom","shadow.cljs.bootstrap.env/index-ref","cljs.js/load-analysis-cache!","js/document.body.removeChild","p1__17014#","cljs.core/reset!","js/goog.async.run","G__17009","cljs.core/Keyword"],"sourcesContent":["(ns shadow.cljs.bootstrap.browser\n  (:require [clojure.set :as set]\n            [cljs.js :as cljs]\n            [cognitect.transit :as transit]\n            [shadow.js] ;; ensures that bootstrap namespaces can use js deps\n            [shadow.cljs.bootstrap.env :as env]\n            [goog.async.run]\n            [goog.net.XhrIo :as xhr])\n  (:import [goog.net BulkLoader]))\n\n\n(defonce init-opts (atom {:path \"/bootstrap\"\n                          :load-on-init []}))\n\n(defn asset-path [& args]\n  (apply str (:path @init-opts) args))\n\n(defn compile-state-ref? [x]\n  (and (instance? cljs.core/Atom x) (map? @x)))\n\n(defn transit-read [txt]\n  (let [r (transit/reader :json)]\n    (transit/read r txt)))\n\n(defn transit-load [path callback]\n  (xhr/send\n    path\n    (fn [res]\n      (this-as req\n        (if-not (.isSuccess req)\n          (throw (ex-info (str \"failed to download boostrap file:\" path \" status:\" (.getStatus req)) {:path path}))\n          (let [data (-> (.getResponseText req)\n                         (transit-read))]\n            (callback data)\n            ))))))\n\n(defn script-eval\n  \"js/eval doesn't get optimized properly, this hack seems to do the trick\"\n  [code]\n  (let [node (js/document.createElement \"script\")]\n    (.appendChild node (js/document.createTextNode code))\n    (js/document.body.appendChild node)\n    (js/document.body.removeChild node)))\n\n(defn execute-load! [compile-state-ref {:keys [type text uri ns provides] :as load-info}]\n  #_ (js/console.log \"load\" type ns load-info)\n  ;; quick hack for worker experiment, needs proper design\n  (when-let [load-fn (:load @init-opts)]\n    (load-fn load-info))\n  (case type\n    :analyzer\n    (let [data (transit-read text)]\n      (cljs/load-analysis-cache! compile-state-ref ns data))\n    :js\n    (do (swap! env/loaded-ref set/union provides)\n        (swap! cljs/*loaded* set/union provides)\n        (let [js (str text \"\\n//# sourceURL=\" uri \"\\n\")]\n          (script-eval js)))))\n\n(defn queue-task! [task]\n  ;; FIXME: this is a very naive queue that does all pending tasks at once\n  ;; should use something like window.requestIdleCallback that does as much work as\n  ;; possible in the time it was given and then yield control back to the browser\n  (js/goog.async.run task))\n\n(defn load-namespaces\n  \"loads a set of namespaces, must be called after init\"\n  [compile-state-ref namespaces cb]\n  {:pre [(compile-state-ref? compile-state-ref)\n         (set? namespaces)\n         (every? symbol? namespaces)\n         (fn? cb)]}\n  (let [deps-to-load-for-ns\n        (env/find-deps namespaces)\n\n        macro-deps\n        (->> deps-to-load-for-ns\n             (filter #(= :cljs (:type %)))\n             (map :macro-requires)\n             (reduce set/union)\n             (map #(symbol (str % \"$macros\")))\n             (into #{}))\n\n        ;; second pass due to circular dependencies in macros\n        deps-to-load-with-macros\n        (env/find-deps (set/union namespaces macro-deps))\n\n        compile-state\n        @compile-state-ref\n\n        things-already-loaded\n        (->> deps-to-load-with-macros\n             (filter #(set/superset? @env/loaded-ref (:provides %)))\n             (map :provides)\n             (reduce set/union))\n\n        js-files-to-load\n        (->> deps-to-load-with-macros\n             (remove #(set/superset? @env/loaded-ref (:provides %)))\n             (map (fn [{:keys [ns provides js-name]}]\n                    {:type :js\n                     :ns ns\n                     :provides provides\n                     :uri (asset-path js-name)})))\n\n        analyzer-data-to-load\n        (->> deps-to-load-with-macros\n             (filter #(= :cljs (:type %)))\n             ;; :dump-core still populates the cljs.core analyzer data with an empty map\n             (filter #(nil? (get-in compile-state [:cljs.analyzer/namespaces (:ns %) :name])))\n             (map (fn [{:keys [ns ana-name]}]\n                    {:type :analyzer\n                     :ns ns\n                     :uri (asset-path ana-name)})))\n\n        load-info\n        (-> []\n            (into js-files-to-load)\n            (into analyzer-data-to-load))]\n\n    #_ (js/console.log \"going to load\" load-info)\n\n    ;; this is transfered to cljs/*loaded* here to delay it as much as possible\n    ;; the JS may already be loaded but the analyzer data may be missing\n    ;; this way cljs.js is forced to ask first\n    (swap! cljs/*loaded* set/union things-already-loaded)\n\n    ;; may not need to load anything sometimes?\n    (if (empty? load-info)\n      (cb {:lang :js :source \"\"})\n\n      (let [uris\n            (into [] (map :uri) load-info)\n\n            loader\n            (BulkLoader. (into-array uris))]\n\n        (.listen loader js/goog.net.EventType.SUCCESS\n          (fn [e]\n            (let [texts (.getResponseTexts loader)]\n              (doseq [load (map #(assoc %1 :text %2) load-info texts)]\n                (queue-task! #(execute-load! compile-state-ref load)))\n\n              #_ (queue-task! #(js/console.log \"compile-state after load\" @compile-state-ref))\n\n              ;; callback with dummy so cljs.js doesn't attempt to load deps all over again\n              (queue-task! #(cb {:lang :js :source \"\"}))\n              )))\n\n        (.load loader)))\n    ))\n\n(defn load\n  \":load fn for cljs.js, must be passed the compile-state as first arg\n   eg. :load (partial boot/load compile-state-ref)\"\n  [compile-state-ref {:keys [name path macros] :as rc} cb]\n  {:pre [(compile-state-ref? compile-state-ref)\n         (symbol? name)\n         (fn? cb)]}\n  (let [ns (if macros\n             (symbol (str name \"$macros\"))\n             name)]\n    (or (get-in @compile-state-ref [:cljs.analyzer/namespaces ns])\n        (env/get-ns-info ns))\n    (load-namespaces compile-state-ref #{ns} cb)))\n\n(defn fix-provide-conflict! []\n  ;; since cljs.js unconditionally does a goog.require(\"cljs.core$macros\")\n  ;; the compile pretended to provide this but didn't\n  ;; need to remove that before we load it, otherwise it would goog.provide conflict\n  ;; FIXME: should test if actually empty, might delete something accidentally?\n  (js-delete js/cljs \"core$macros\"))\n\n(defn init\n  \"initializes the bootstrapped compiler by loading the dependency index\n   and loading cljs.core + macros (and namespaces specified in :load-on-init)\"\n  [compile-state-ref {:keys [load-on-init] :as opts} init-cb]\n  {:pre [(compile-state-ref? compile-state-ref)\n         (map? opts)\n         (fn? init-cb)\n         (string? (:path opts))]}\n  ;; FIXME: add goog-define to path\n\n  (reset! init-opts opts)\n\n  (if @env/index-ref\n    (init-cb)\n    (do (fix-provide-conflict!)\n        (transit-load (asset-path \"/index.transit.json\")\n          (fn [data]\n            ;; pretend that all excluded macro namespaces are loaded\n            ;; so CLJS doesn't request them\n            ;; the macro are never available so any code trying to use them will fail\n            (let [{:keys [exclude] :as idx} (env/build-index data)]\n              (swap! cljs/*loaded* set/union (into #{} (map #(symbol (str % \"$macros\"))) exclude)))\n\n            (load-namespaces\n              compile-state-ref\n              (into '#{cljs.core cljs.core$macros} load-on-init)\n              init-cb))))))\n"]}