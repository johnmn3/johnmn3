["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_view/core$macros.cljc","~:line",1,"~:column",23,"~:end-line",1,"~:end-column",35,"~:figwheel-always",true],"~:use-macros",null,"~:excludes",["~#set",["~$defn"]],"~:name","~$re-view.core$macros","~:imports",null,"~:requires",["^ ","~$clojure.string","^A","~$string","^A","~$re-view.util","^C","~$util","^C","~$cljs.core","^E","~$goog","^F"],"~:seen",["^;",["~:require"]],"~:shadow/js-access-global",["^;",["Error"]],"~:uses",["^ ","~$camelCase","^C"],"~:defs",["^ ","~$js-obj-with-set!",["^ ","~:protocol-inline",null,"^2",["^ ","^3","re_view/core$macros.cljc","^4",6,"^5",21,"^6",6,"^7",37,"~:private",true,"~:arglists",["~#list",["~$quote",["^Q",[["~$m"]]]]],"~:doc","Convert a Clojure map to javascript object using `set!`, to play well with Closure Compiler.\n  Keys are converted to camelCase. Shallow."],"^O",true,"^=","~$re-view.core$macros/js-obj-with-set!","~:variadic",false,"^3","re_view/core$macros.cljc","^7",37,"~:method-params",["^Q",[["~$m"]]],"~:protocol-impl",null,"~:arglists-meta",["^Q",[null,null]],"^5",1,"^4",6,"^6",6,"~:max-fixed-arity",1,"~:fn-var",true,"^P",["^Q",["^R",["^Q",[["~$m"]]]]],"^S","Convert a Clojure map to javascript object using `set!`, to play well with Closure Compiler.\n  Keys are converted to camelCase. Shallow."],"~$group-methods",["^ ","^N",null,"^2",["^ ","^3","re_view/core$macros.cljc","^4",24,"^5",20,"^6",24,"^7",33,"^P",["^Q",["^R",["^Q",[["~$methods"]]]]],"^S","Groups methods by role in a React component."],"^=","~$re-view.core$macros/group-methods","^U",false,"^3","re_view/core$macros.cljc","^7",33,"^V",["^Q",[["^10"]]],"^W",null,"^X",["^Q",[null,null]],"^5",1,"^4",24,"^6",24,"^Y",1,"^Z",true,"^P",["^Q",["^R",["^Q",[["^10"]]]]],"^S","Groups methods by role in a React component."],"~$parse-view-args",["^ ","^N",null,"^2",["^ ","^3","re_view/core$macros.cljc","^4",42,"^5",20,"^6",42,"^7",35,"^P",["^Q",["^R",["^Q",[["~$args"]]]]]],"^=","~$re-view.core$macros/parse-view-args","^U",false,"^3","re_view/core$macros.cljc","^7",35,"^V",["^Q",[["^13"]]],"^W",null,"^X",["^Q",[null,null]],"^5",1,"^4",42,"^6",42,"^Y",1,"^Z",true,"^P",["^Q",["^R",["^Q",[["^13"]]]]]],"~$display-name",["^ ","^N",null,"^2",["^ ","^3","re_view/core$macros.cljc","^4",47,"^5",20,"^6",47,"^7",32,"^P",["^Q",["^R",["^Q",[["~$ns","~$given-name"]]]]],"^S","Generate a meaningful name to identify React components while debugging"],"^=","~$re-view.core$macros/display-name","^U",false,"^3","re_view/core$macros.cljc","^7",32,"^V",["^Q",[["^16","^17"]]],"^W",null,"^X",["^Q",[null,null]],"^5",1,"^4",47,"^6",47,"^Y",2,"^Z",true,"^P",["^Q",["^R",["^Q",[["^16","^17"]]]]],"^S","Generate a meaningful name to identify React components while debugging"],"~$wrap-body",["^ ","^N",null,"^2",["^ ","^3","re_view/core$macros.cljc","^4",52,"^5",20,"^6",52,"^7",29,"^P",["^Q",["^R",["^Q",[["~$name",["^13","~$&","~$body"]]]]]],"^S","Wrap body in anonymous function form."],"^=","~$re-view.core$macros/wrap-body","^U",false,"^3","re_view/core$macros.cljc","^7",29,"^V",["^Q",[["^1:","~$p__11049"]]],"^W",null,"^X",["^Q",[null,null]],"^5",1,"^4",52,"^6",52,"^Y",2,"^Z",true,"^P",["^Q",["^R",["^Q",[["^1:",["^13","~$&","^1;"]]]]]],"^S","Wrap body in anonymous function form."],"~$defview",["^ ","^N",null,"^2",["^ ","^3","re_view/core$macros.cljc","^4",60,"^5",11,"^6",60,"^7",18,"~:macro",true,"^P",["^Q",["^R",["^Q",[["~$&","^13"]]]]],"^S","Define a view function.\n\n   Expects optional docstring and methods map, followed by\n    the argslist and body for the render function, which should\n    return a Hiccup vector or React element.","~:top-fn",["^ ","^U",true,"^Y",2,"^V",[["^Q",["~$&form","~$&env","^13"]]],"^P",["^Q",[["^1A","^1B","~$&","^13"]]],"^X",["^Q",[null]]]],"^=","~$re-view.core$macros/defview","^U",true,"^3","re_view/core$macros.cljc","^7",18,"^1@",["^ ","^U",true,"^Y",2,"^V",[["^Q",["^1A","^1B","^13"]]],"^P",["^Q",[["^1A","^1B","~$&","^13"]]],"^X",["^Q",[null]]],"^V",[["^Q",["^1A","^1B","^13"]]],"^W",null,"^X",["^Q",[null]],"^5",1,"^4",60,"^1?",true,"^6",60,"^Y",2,"^Z",false,"^P",["^Q",[["^1A","^1B","~$&","^13"]]],"^S","Define a view function.\n\n   Expects optional docstring and methods map, followed by\n    the argslist and body for the render function, which should\n    return a Hiccup vector or React element."],"~$view",["^ ","^N",null,"^2",["^ ","^3","re_view/core$macros.cljc","^4",78,"^5",11,"^6",78,"^7",15,"^1?",true,"^P",["^Q",["^R",["^Q",[["~$&","^13"]]]]],"^S","Returns anonymous view, given the same args as `defview`.","^1@",["^ ","^U",true,"^Y",2,"^V",[["^Q",["^1A","^1B","^13"]]],"^P",["^Q",[["^1A","^1B","~$&","^13"]]],"^X",["^Q",[null]]]],"^=","~$re-view.core$macros/view","^U",true,"^3","re_view/core$macros.cljc","^7",15,"^1@",["^ ","^U",true,"^Y",2,"^V",[["^Q",["^1A","^1B","^13"]]],"^P",["^Q",[["^1A","^1B","~$&","^13"]]],"^X",["^Q",[null]]],"^V",[["^Q",["^1A","^1B","^13"]]],"^W",null,"^X",["^Q",[null]],"^5",1,"^4",78,"^1?",true,"^6",78,"^Y",2,"^Z",false,"^P",["^Q",[["^1A","^1B","~$&","^13"]]],"^S","Returns anonymous view, given the same args as `defview`."],"^<",["^ ","^N",null,"^2",["^ ","^3","re_view/core$macros.cljc","^4",89,"^5",11,"^6",89,"^7",15,"^1?",true,"^P",["^Q",["^R",["^Q",[["~$&","^13"]]]]],"^S","Defines a stateless view function","^1@",["^ ","^U",true,"^Y",2,"^V",[["^Q",["^1A","^1B","^13"]]],"^P",["^Q",[["^1A","^1B","~$&","^13"]]],"^X",["^Q",[null]]]],"^=","~$re-view.core$macros/defn","^U",true,"^3","re_view/core$macros.cljc","^7",15,"^1@",["^ ","^U",true,"^Y",2,"^V",[["^Q",["^1A","^1B","^13"]]],"^P",["^Q",[["^1A","^1B","~$&","^13"]]],"^X",["^Q",[null]]],"^V",[["^Q",["^1A","^1B","^13"]]],"^W",null,"^X",["^Q",[null]],"^5",1,"^4",89,"^1?",true,"^6",89,"^Y",2,"^Z",false,"^P",["^Q",[["^1A","^1B","~$&","^13"]]],"^S","Defines a stateless view function"],"~$extend-view",["^ ","^N",null,"^2",["^ ","^3","re_view/core$macros.cljc","^4",97,"^5",11,"^6",97,"^7",22,"^1?",true,"^P",["^Q",["^R",["^Q",[["^1D","~$&","^13"]]]]],"^1@",["^ ","^U",true,"^Y",3,"^V",[["^Q",["^1A","^1B","^1D","^13"]]],"^P",["^Q",[["^1A","^1B","^1D","~$&","^13"]]],"^X",["^Q",[null]]]],"^=","~$re-view.core$macros/extend-view","^U",true,"^3","re_view/core$macros.cljc","^7",22,"^1@",["^ ","^U",true,"^Y",3,"^V",[["^Q",["^1A","^1B","^1D","^13"]]],"^P",["^Q",[["^1A","^1B","^1D","~$&","^13"]]],"^X",["^Q",[null]]],"^V",[["^Q",["^1A","^1B","^1D","^13"]]],"^W",null,"^X",["^Q",[null]],"^5",1,"^4",97,"^1?",true,"^6",97,"^Y",3,"^Z",false,"^P",["^Q",[["^1A","^1B","^1D","~$&","^13"]]]]],"~:require-macros",["^ ","^E","^E"],"~:cljs.analyzer/constants",["^ ","^G",["^;",["~$&","~:lifecycle-keys","~$clojure.core/let","~$the-class__11092__auto__","~$re-view.core/wrap-props","~:class-keys","~$prototype__11380__auto__","~$clojure.core/first","~:view/render","~$re-view.core/factory","~$fn","~:wrap-props","~$do","~$clojure.core/specify!","~$if","~$re-view.hiccup.core/element","~$re-view.core/view*","~:instance-keys","~$clojure.core/cons","~$js-obj","~$clojure.core/map?","~:prototype","~$re-view.core/class*","~$clojure.core/defn","~$clojure.core/apply","~:react-keys","~:display-name","~$args__11294__auto__","~$set!","~:docstring","~$def","~$goog.object/get"]],"~:order",["^2:","^1L","^21","^27","^1O","^1K","^1[","^1T","^1V","^1Y","^1U","^1N","^2;","^28","^1R","^1M","^24","^2<","^1S","^1Z","^25","~$&","^29","^26","^1X","^22","^1Q","^20","^1P","^23","^2=","^1W"]],"~:flags",["^ ","^H",["^;",[]]],"~:js-deps",["^ "],"~:deps",["^F","^E","^A","^C"]]