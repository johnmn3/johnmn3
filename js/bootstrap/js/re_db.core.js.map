{"version":3,"file":"re_db.core.js","sources":["re_db/core.cljs"],"mappings":";;;;;AAYA,AAACoN;AAED,gCAAA,hCAAenL;AACf,gCAAA,hCAAe4F;AAEf,AAAKnC,sBAAS,4DAAA,5DAACwH,6CAAKC;AACpB,AAAKtJ,sBAAS,4DAAA,5DAACqJ,6CAAKlB;AAEpB,AAAA;;;;;;;oBAAA,4BAAAtL,hDAAMkD;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,gDAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA/C,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,AAAA,kDAAA,lDAAM+C;AAAN,AAMM,uDAAA,hDAACyL;;;AANP,AAAA,kDAAA,lDAAMzL,6DAOF5C;AAPJ,AAQG,oDAAA,2CAAA,oDAAA,mCAAA,mDAAA,mCAAA,rQAAC0L,+TAEc1L;;;AAVlB,AAAA,4CAAA,5CAAM4C;;AAAN,AAYA;;;gCAAA,hCAAMuE,wEAEHnG,GAAGhB;AAFN,AAGE,qFAAA,9EAACmI,0DAAMnH,GAAGoH,2EAAemF,kEAAMvN;;AAEjC,wBAAA,xBAAMC,wDAAYX,QAAQ8C;AACxB,OAAAP,4CAAA,AAAAA,oDAAA,RAASvC,mEAAiB8C,lKAD5B;;AAGA,AAAA;;;0BAAA,kCAAA1C,5DAAM6I;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,sDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA1I,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,AAAA,wDAAA,xDAAM0I,mEAEFvI;AAFJ,AAGG,wCAAA,jCAACqE,0BAAWrE;;;AAHf,AAAA,wDAAA,xDAAMuI,mEAIFjJ,QAAQ8C;AAJZ,AAKG,OAAC2C,sDAAO,AAAC9E,sBAAWX,QAAQ8C;;;AAL/B,AAAA,kDAAA,lDAAMmG;;AAAN,AAOA,AAAA;;;yBAAA,iCAAA7I,1DAAM4N;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,qDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,qDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAzN,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,AAAA,uDAAA,vDAAMyN,kEAEFtN;AACD,0CAAA,nCAACyE,kHAAwC,mDAAA,nDAAC5C,4CAAK7B,rKAHlD;;;kEAIIV,QAAQ8C,1EAJZ,AAAA,uDAAA,vDAAMkL;AAAN,AAKG,OAAChM,qDAAM,AAACrB,sBAAWX,QAAQ8C;;;AAL9B,AAAA,iDAAA,jDAAMkL;;AAON,AAAA,AAPA;;;2BAOA,mCAAA5N,9DAAM0G;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,uDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,uDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAvG,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,AAAA,yDAAA,zDAAMuG,oEAEFpG;AAFJ,AAGG,0CAAA,nCAACyE,2GAAoC,mDAAA,nDAAC5C,4CAAK7B;;;oEAC1CV,QAAQ8C,5EAJZ,AAAA,yDAAA,zDAAMgE;AAKH,OAAC1D,uDAAQ,AAACzC,sBAAWX,QAAQ8C,5FALhC;;;AAAA,AAAA,mDAAA,nDAAMgE;;wDAQHpG,xDARH,AAOA,wBAAA,xBAAM2E;AAAN,AAEE,0CAAA,nCAACF,oGAAgC,mDAAA,nDAAC5C,4CAAK7B;;AAEzC,AAAA;;;;;wBAAA,gCAAAN,xDAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,oDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,oDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,AAAA,sDAAA,tDAAMD,iEAIFN,QAAQE,KAAKO;AAJjB,AAKG,sDAAA,kDAAA,xGAACD,2LAAwBN,KAAKO;;AAC9B,OAAC0I,gBAAM,AAAA5G,4CAAA,AAAAA,4CAAA,AAAAA,oDAAA,RAASvC,4DAAcE,MAAKO;;;AANtC,AAAA,sDAAA,tDAAMH,iEAOFN,QAAQC;AAPZ,AAQG,GAAI,AAAW0G,wBAAQ1G;AACrB,IAAAW,aAAiBX;WAAjB,AAAAY,4CAAAD,WAAA,IAAA,lEAAOV;UAAP,AAAAW,4CAAAD,WAAA,IAAA,jEAAYH;AAAZ,AACE,GAAA,AAAAgH,cAAQ,AAACC,uDAAQ1H,QAAQE;AACvB,MAAO,KAAAK,MAAW,CAAA,6EAAA,NAAgCL,mEAAsBO;;AACxE,OAACoF,oDAAW7F,QAAQE,KAAKO;;;AAC7BR;;;;AAbL,AAAA,gDAAA,hDAAMK;;AAAN,AAeA;;;kEAEGN,QAAQC,7CAFX,7BAAM0P;AAGJ,IAAM1P,SAAG,AAAC8G,oDAAW/G,QAAQC,zEAH/B;AAGE,AACE,GAAU,WAAA,VAAgBA;AAA1B;AAAA,AAA8B,sDAAA,tDAACO,wGAAuBP;;;AACtD,OAAO,AAAC8E,0BAAW,oDAAA,pDAACxC,4CAAKvC,6DAAcC;;AAE3C,AAAA;AAEA,AAFA;;;gDAIGD,QAAQC,pCAFX,pBAAMiD;AAGJ,IAAAqD,qBAAc,AAACQ,oDAAW/G,QAAQC,rFAHpC;AAGE,AAAA,oBAAAsG;AAAA,AAAA,aAAAA,TAAWtG;AAAX,AACE,sDAAA,tDAACO,wGAAuBP;;AACxB,IAAAqG,WAAQ,AAAA/D,4CAAA,AAAAA,oDAAA,RAASvC,6DAAcC;AAA/B,AAAA,GAAA,CAAAqG,YAAA;AAAA;;AACQ,qDAAAA,SAAA,vDAACpC,4GAAajE;;;AAHxB;;;AAKF,AAAA;;;iBAAA,yBAAAG,1CAAMiO;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,6CAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,6CAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA9N,MAAA,CAAA,8DAAA,AAAA;;;;;0DAEIP,QAAQC,GAAGC,rEAFf,AAAA,+CAAA,/CAAMmO;AAGH,IAAA9H,qBAAc,AAACQ,oDAAW/G,QAAQC,rFAHrC;AAGG,AAAA,oBAAAsG;AAAA,AAAA,aAAAA,TAAWtG;AACT,sDAAA,mDAAA,zGAACO,4LAAwBP,OAAGC,nMAD9B;;AAEE,OAAAqC,4CAAA,AAAAA,4CAAA,AAAAA,oDAAA,RAASvC,6DAAcC,QAAGC;;AAF5B;;;;0DAGCF,QAAQC,GAAGC,KAAK4F,1EANpB,AAAA,+CAAA,/CAAMuI;AAOH,IAAA9H,qBAAc,AAACQ,oDAAW/G,QAAQC,rFAPrC;AAOG,AAAA,oBAAAsG;AAAA,AAAA,aAAAA,TAAWtG;AAAX,AACE,sDAAA,mDAAA,zGAACO,4LAAwBP,OAAGC;;AAC5B,OAAAwE,4CAAA,AAAAnC,4CAAA,AAAAA,oDAAA,RAASvC,6DAAcC,QAAGC,KAAM4F;;AAFlC;;;;AAPH,AAAA,yCAAA,zCAAMuI;;AAWN,AAAA,AAXA;;;oBAWA,4BAAAjO,hDAAMkJ;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,gDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,gDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA/I,MAAA,CAAA,8DAAA,AAAA;;;;;6DAEIP,QAAQC,GAAGgC,xEAFf,AAAA,kDAAA,lDAAMqH;AAAN,AAGG,IAAA/C,qBAAc,AAACQ,oDAAW/G,QAAQC;AAAlC,AAAA,oBAAAsG;AAAA,AAAA,aAAAA,TAAWtG;AAAX,AACE,sDAAA,mDAAA,zGAACO,4LAAwBP,OAAG,AAACkJ,gBAAMlH;;sDAC/B,AAAAM,4CAAA,AAAAA,oDAAA,RAASvC,6DAAcC,3MACvB,OAAAyP,4MAASzN;;AAHf;;;;AAHH,AAAA,kDAAA,lDAAMqH,6DAOFtJ,QAAQC,GAAGgC,GAAG6D;AACf,IAAAS,qBAAc,AAACQ,oDAAW/G,QAAQC,rFARrC;AAQG,AAAA,oBAAAsG;AAAA,AAAA,aAAAA,TAAWtG;AAAX,AACE,sDAAA,mDAAA,zGAACO,4LAAwBP,OAAG,AAACkJ,gBAAMlH;;AAE/B,OAAAkE,4MAASlE,GAAG6D,hKADZ,AAAAvD,4CAAA,AAAAA,oDAAA,RAASvC,6DAAcC;;AAF7B;;;;AARH,AAAA,4CAAA,5CAAMqJ;;AAaN,AAbA;;;yBAaA,zBAAMxJ,0DAEHE,QAAQC,GAAGgC;AAFd,AAGE,IAAAsE,qBAAc,AAACQ,oDAAW/G,QAAQC;AAAlC,AAAA,oBAAAsG;AAAA,AAAA,aAAAA,TAAWtG;AACT,sDAAA,tDAACwM,yGAAuB,6CAAA,7CAACzI,zGAD3B;kBAC0B0I;AAAA,AAAO,AAAA,iGAAAA,PAAKzM;;KAApC,JAA2CgC;;AAGvC,OAACQ,8RAAaR,xQADd,2MAAA,3MAACiC,gQAAajE,lNADd,AAAAsC,4CAAA,AAAAA,oDAAA,RAASvC,6DAAcC;;AAF7B;;;AAMF;;;mBAAA,mCAAAiC,tDAAMM,8CAEHxC;AAFH,AAAA,IAAAmC,aAAAD;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAC,gCAAA,AAAAD,+BAAA,KAAA,OAAA,QAAA,AAAAE,8CAAAC,mBAAAH,YAAAA;aAAAA,TAE8ByC;SAF9B,AAAArC,4CAAAJ,eAAA,hEAEmBlC;AAFnB,2BAII,3BADF,OAAC4E;kBACM1D,EAAEjB,KAAK+D;mNACiDA,5MAA1DC,gGAAiB,hDAAT,FAAF/C,sEAAuBjB,3HAA9B,kLAA6C,3EAA1BiE,0FAAgCjE,1IAAzCkE,2HAAoCC,jDAAV,CAAA,lIADtC;;QAGA,AAAA9B,4CAAA,AAAAA,oDAAA,RAASvC,4DAAcC,3JADvB2E;;AAGJ,+BAAA,/BAAOuD,sEAAmBnI,QAAQC,GAAGC,KAAKO;AAA1C,AACE,GAAU,AAAC4F,uBAAO,AAAA9D,4CAAA,AAAAA,4CAAA,AAAAA,oDAAA,RAASvC,4DAAcE,MAAKO;AAA9C;;AACE,MAAO,KAAAF,MAAW,CAAA,qEAAA,yFAAA,0DAAA,zJAAwBL,0FAA6CO,2DAAcR,tOADvG;;;AAGF,uBAAA,vBAAOgD,sDAAWjD,QAAQC,GAAG6C,EAAEC,EAAErC;AAC/B,IAAM+F,QAAM,mDAAA,nDAAClE,4CAAK7B,xDADpB;AACE,AACE,GAAM,yCAAA,zCAACyE,mCAAmBsB;AACxB,AAAC0B,6BAAkBnI,QAAQC,GAAG6C,EAAEC,1CADlC;;AAAA;;AAEA,IAAAuC,WAAQtF;0QACkDC,hCAAd6C,EAAEC,nMAAnB,kDAAAuC,SAAA,mFAAA,9IAACxD,lBAAf,UAAA,ZAAL,GAAW2E,8NAA8BrB,lPADjDE,eAAA,2PAAAA;oBAESD,AAAD,sBAAM3E,1CAFd,AAAA;OAEuBoB,iNAAqBsD,ZAALrC,gCAAc9C,9BAAZ6C,9MAAnB,yDAAAwC,aAAA,mFAAA;;AAFtBA;;;AAIJ,4BAAA,5BAAO0G,gEAAgBhM,QAAQC,GAAGC,KAAK8C,MAAMtC;AAA7C,AACE,OAACiC,+CAAO,WAAKtB,MAAM0B;4CACkBrC,PAAPR,9BAAnB+C,2BAAgBhD,lCAAjB,4BAAWoB,cAAc0B,1CAD3B;GACsC/C,QAAQgD;;AAExD,0BAAA,1BAAO6I,4DAAc7L,QAAQC,GAAGC,KAAKqF,QAAQ7E;AAC3C,IAAAgF,WAAQ1F,fADV;yUAE8DC,rOAAnC6B,sMAAqByD,LAALrF,qBAAcsF,rRAA9CC,+DAAe,kDAAAC,SAAA,mFAAA,7MAAhB,sDAAQhF,vFADhBgF,eAAA,0TAAAA;AAAA,AAAA,oBAESL,sBAAK3E,tBAAN;gPAAkDT,hPAApC,yDAAAyF,aAAA,mFAAA,wEAA+BF,rBAAdD,rMAAhBzD,6MAAwB5B;;AAF/CwF;;;AAIF,+BAAA,/BAAO6G,sEAAmBvM,QAAQC,GAAGC,KAAKY,SAASJ;AAAnD,AACE,OAACiC,+CAAO,WAAK3C,YAAQ+C;AACX,OAAC8I,wBAAa7L,YAAQC,GAAGC,KAAK6C,EAAErC,rDADlC;WAGAI,RADAd;;AAGV,0BAAA,1BAAOgF,4DAAchF,QAAQC,GAAGC,KAAK8C,MAAMuC,QAAQ7E;AACjD,oBAAI,AAACsB,qDAAMtB,zEADb;AAEI,IAAAuK,WAAQjL;IAARiL,eAAA,kFAAAA,hEACQjI,OAAM,0BAAAiI,1BAACe,mCAAe/L,GAAGC,KAAK8C,MAAMtC;AAD5C,AAAA,oBAEQ6E;AAAQ,oCAAA0F,7BAACsB,0CAAkBtM,GAAGC,KAAKqF,QAAQ7E;;AAFnDuK;;;AAGA,IAAA7B,WAAQpJ;qCACAgD,OAAM,qBAAAoG,rBAACnG,8BAAUhD,GAAGC,KAAK8C,MAAMtC,pFADvC0I,eAAA,6EAAAA;oBAEQ7D,pBAFR,AAAA;AAEgB,+BAAA6D,xBAACyC,qCAAa5L,GAAGC,KAAK8C,MAAMtC;;AAF5C0I;;;;AAIJ,6BAAA,7BAAO1F,kEAAiB1D,QAAQC;AAAhC,AACE,IAAAyG,WAAQ1G;AAAR,AAAA,gDAC2B,AAAAuC,4CAAA,AAAAA,oDAAA,RAASvC,pHAA5B,iBAAA6P,gKAA0C5P;kKAA/BA,9JAAX6P,eAAA,+CAAA,2CAAA,gEAAA;AAAA,AAAA,QAAAA,6CAAAA,2CAAAD,YAAAC,uBAAAD;;OAAiDpE,PAAD,sDAAA/E,SAAA,qEAAoBzG,jBAAPuL;;AADrE9E;;;AAKF,+BAAA,uCAAAmD,tEAAOE,kFAAiD7J,KAAK8J,RAAR/J,cAAcS,7FAFnE,AAAA;AAEA,AAAA,IAAAoJ,aAAAD;cAAA,AAAAhJ,4CAAAiJ,WAAA,IAAA,rEAA2B9J;aAA3B,AAAAa,4CAAAiJ,WAAA,IAAA,pEAAmCnK;YAAnCmK,RAA8CzI;AAC5C,IAAMJ,WAAS,AAAAsB,4CAAA,AAAAA,4CAAA,AAAAA,oDAAA,RAASvC,6DAAcC,IAAGC,pNAD3C;AACE,wGACmEe,7DAAvB2O,3CAA1C,kCAAgC3O,hBAAP+I,DAAN,UAAA,ZAAJ,4BAA0B,vCAAnClJ,8FAAqDkJ;IACrDuB,cAAM,AAACvD,6CAAElH,SAASG;AACtB,GAAI,AAACoF,uBAAOvF,1BAFd;AAGIO;;+XAEe,0DAAA,mFAAA,7IAACS,kDAAU9B,+IAAcC,GAAGC,aAAM6B,uBAAejB,6CAG/D,iBAAA8F,WAAQjH,niBAJJ,EAAI4L,aAAM,0DAAA,mFAAA,7IAACzJ,kDAAU9B,+IAAcC,WAAIuL,iBAAOtL,pQAE9C,qgBAAA,rgBAAC8E,6fAAa/E,GAAGC,UAASY,SAASJ,xoBAJ1C,0FAKO,AAACgD,sjBAAgBzD;GAEb,AAAO0B,HADf,AAAA;AACyB,0DAAAiF,SAAA,2FAAA,vJAAC/E,+IAAO5B,GAAGC,UAASY;;AAD7C8F;;;;;AAGT,AAAA,0BAAA,kCAAAxG,5DAAO0N;AAAP,AAAA,IAAAmB,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAnB,sDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAvN,MAAA,CAAA,8DAAA,AAAA;;;;;mEACIc,SAASnB,HAAHD,zEADV,AAAA,wDAAA,xDAAO6N;OACanC,qWAAoD1L,zSAAjCA,6SAAoCC,jKAAnB,2EAAA,uBAAA,pPAAvBmB,cAAc,AAAAkB,4CAAA,AAAAA,4CAAA,AAAAA,oJAAA,vTAA5B,gNAAsClB,sCAAAA,2CAAAA,3NAAfnB,tEAD1C;;;4EAE+BD,GAAGC,KAAK8J,pFAFvC,AAAA,wDAAA,WAAAkF,nEAAOpB;AAAP,AAAA,IAAAqB,aAAAD;IAEKlP,UAFL,AAAAa,4CAAAsO,WAAA,IAAA;IAEaxP,SAFb,AAAAkB,4CAAAsO,WAAA,IAAA;IAEwB9N,QAFxB8N;AAGG,IAAMzO,SAAO,AAACC,sBAAWX,QAAQE,3CAHpC;AAGG,AACE,oBAAI,AAAC8B,qDAAMtB;AACT,OAACqJ,6BAAkB1I,MAAMpB,GAAGC,KAAK8J,MAAMtJ;;AACvC,4OAAiET,7DAAdD,iEAAiBE,5OAA9De,WAAS,EAAA,GAAc+I,iBAAOA,lBAAb,UAAA,cAAmB,AAAAzH,4CAAA,AAAAA,4CAAA,AAAAA,oDAAA;AACxC,GAAA,EAAQ,aAAA,ZAAMtB,NADhB;+aAKK,iBAAAwC,WAAQ9D,jXADJ,AAAC+D,iVAAgBzD,3aAHxB,6IACO,0DAAA,mFAAA,7IAAC6B,kDAAU9B,+IAAcC,WAAIuL,iBAAOtL,SACnBA,mBAAkB,jRAAlC8E,AAAD,mQAAA,RAAc/E,sBAAsBU,8BAAmBT,vCAA7Be,+BAAqBjB;AAEnD,AAAA,GACQ,AAAO2B;AAAU,0DAAA8B,SAAA,2FAAA,vJAAC5B,+IAAO5B,GAAGC,UAASe;;AAD7CwC;;;;AAEDpC;;;;;AAbX,AAAA,kDAAA,lDAAOyM;;AAAP,AAeA,4BAAA,5BAAO5E,gEAAgB7H,MAAMpB;AAC3B,OAAC0C,+CAAO,qBAAAC,VAAKvB,jEADf;AACU,AAAA,IAAAwB,aAAAD;QAAA,AAAA/B,4CAAAgC,WAAA,IAAA,/DAAYC;QAAZ,AAAAjC,4CAAAgC,WAAA,IAAA,/DAAcE;AAAd,AACE,OAAC4I,sDAAatK,UAAMpB,GAAG6C,EAAEC;SAE3B,AAACG,kBAAO,2EAAA,uBAAA,jGAAC7B,sCAAAA,2CAAAA,sBAASpB,hIADlBoB;;mDAIoBpB,GAAGC,KAAKO,3DADtC,iBAAA,yBAAAyN,1CAAOnO;AAAP,AAAA,IAAAoO,aAAAD;IACIlO,UADJ,AAAAa,4CAAAsN,WAAA,IAAA;IACYxO,SADZ,AAAAkB,4CAAAsN,WAAA,IAAA;IACuB9M,QADvB8M;GAES,EAAK,wCAAA,xCAAChJ,mCAAmBjF,xCAFlC,AAAA;AAAA;AAAA,AAAA,MAAA,KAAAK,MAAA;;;AAGE,IAAMG,SAAO,AAACC,sBAAWX,QAAQE;IAC3Be,WAAS,AAAAsB,4CAAA,AAAAA,4CAAA,AAAAA,oDAAA,RAASvC,6DAAcC,IAAGC;AADzC,AAEE,oBAAI,AAAC8B,qDAAMtB;AACT,IAAMK,YAAU,AAACC,qDAAeP,IAAIQ;AAClC,GAAI,AAACoF,uBAAOtF,1BADd;AAEIM;;kHACK,0DAAA,mFAAA,7IAACS,kDAAU9B,+IAAcC,GAAGC,aAAMqD,oBAASxC,7PAC3C,0RAAA,1RAACiE,wQAAa/E,GAAGC,KAAKa,eAAcL,zXAH3C,iYAIG,iBAAA+H,WAAQ9I;AAAR,AAAA,GACQ,AAAOgC;AAAU,0DAAA8G,SAAA,qGAAA,jKAAC5G,+IAAO5B,GAAGC,KAAKa;;AADzC0H;;;;;AAEL,GAAI,AAACT,6CAAE/G,SAASR;AACdY;;sUAGC,iBAAAO,WAAQjC,xQADJ,AAACqF,+MAAa/E,GAAGC,KAAKO,IAAIQ,SAASP,9TAH1C,kHAEO,2BAAA,mFAAA,9GAACsG,mBAAShH,+IAAcC,GAAGC,aAAMO;GAG7B,AAAOkB,HADf,AAAA;AACyB,0DAAAC,SAAA,5DAACC,+IAAO5B,GAAGC,KAAKO,IAAIQ;;AAD7CW;;;;;;AAGT,6BAAA,7BAAMV,kEAAiBlB,QAAQC,GAAGkB,EAAEC;AAApC,2BAEI,WAAKpB,YAAQE,KAAKO,vDADpB,OAACoE;AACC,AACE,IAAMnE,SAAO,AAACC,sBAAWX,YAAQE;IAC3Be,WAAS,AAACsB,4CAAKnB,OAAOlB;AAC1B,oBAAM,AAAC8B,qDAAMtB,zEAFf;mDAIsB,AAACM,qDAAeP,IAAIQ,5GADlC,OAAC+D,wBAAahF,YAAQC,GAAGC,wEAEX,AAACc,qDAAeC,SAASR,KACzBC;;AAJpB,GAKM,AAAC6N,gDAAK9N,IAAIQ;AACV,OAAC+D,wBAAahF,YAAQC,GAAGC,KAAKO,IAAIQ,SAASP;;AANjD,AAOYV;;;;GAChBA,QAAQmB;;AAEZ,4BAAA,5BAAM+K,gEAAgBvM,OAAOM,GAAGkB,EAAEC,OAAOpB;AACvC,OAAC6E,PADH,2BAEI,WAAKlF,WAAOO,KAAKO;AAAjB,AACE,IAAMQ,WAAS,AAACsB,4CAAKnB,OAAOlB;AAC1B,IAAAoO,WAAQ3O,fADV;mDAEgBc,hDAAL8N,oDAAStN,pDAAV,HADR,AAAA;qdAKsChB,GAAGC,KAAKO,IAAIQ,rPAHZhB,GAAGC,KACH,AAACc,qDAAeP,IAAIQ,UACpB,AAACD,qDAAeC,SAASR,nOAHTP,RAARF,rDAAN2H,rFAAZ,0DAAA2G,SAAO,sFAAA,yOAAA,7SAAI,9EAAVzM;;AAD7ByM;;GAMJ3O,OAAOwB;;AAEX,yBAAA,zBAAOuH,0DAAavH;AAApB,AACE,OAAC0D,oBAAU,WAAK1D,MAAEwH,EAAE5F;AACP,IAAAqE,WAAQjG,fADV;AACE,AAAA,GACQ,MAAA,LAAM4B;AAAG,sDAAAqE,/CAAC0H,wDAAOnG;;AADzBvB;;GAC8BjG,EAAEA;;AAE/C,qBAAA,6BAAA6E,lDAAOE,2DACa/E;AADpB,AAAA,IAAA8E,aAAAD;cAAA,AAAAnF,4CAAAoF,WAAA,IAAA,rEACIjG;aADJ,AAAAa,4CAAAoF,WAAA,IAAA,pEACYtG;AACV,IAAMM,KAAG,8CAAA,9CAACsC,4CAAKpB,rDAFjB;IAGQA,QAAE,iDAAA,jDAAC2N,+CAAO3N;IACVC,SAAO,AAAAmB,4CAAA,AAAAA,oDAAA,RAASvC,6DAAcC;qeAIjC,iBAAAP,WAAQC,5YAFJ,AAACuB,2VAAgBjB,GAAGkB,MAAEC,zdAJ7B,AAAA,0FAKO,AAACsC,uYAAgBzD,7IAFwB,lCAAjBA,gJAA+BkB,9GAAbkO,jLAAhCrP,wRAAsCoB,3SAAhD,2BAAA,mFAAA,+DAA6BsH,7KAA5B1B,6KAA2B;AAGhC,AAAA,GACQ,AAAOrF;AAAU,iCAAAjC,1BAACwM,mCAAejM,GAAGkB,MAAEC,OAAOpB;;AADrDN;;;;AAGL,AAAA,yBAAA,iCAAAU,1DAAOkK;AAAP,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,4DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,AAAA,AAAAE,8DAAA,WAAAC,mBAA2DS,FAAJnH,LAAL3D,HAAHD;AAA/C,AAAA,IAAAuK,aAAAD;cAAA,AAAA1J,4CAAA2J,WAAA,IAAA,rEAAqBxK;aAArB,AAAAa,4CAAA2J,WAAA,IAAA,pEAA6B7K;YAA7B6K,RAAwCnJ;AAAxC,AACE,IAAMJ,WAAS,AAAAsB,4CAAA,AAAAA,4CAAA,AAAAA,oDAAA,RAASvC,6DAAcC,IAAGC;IACnCC,UAAQ,AAACmM,8CAAMzI,EAAE5C,SAAS+J;AAC9B,oBAAI,AAACrD,qDAAM3H,QAAQE,jFAFrB;AAGI,IAAMa,YAAU,AAACC,qDAAeb,QAAQc;IAClCH,WAAS,AAACE,qDAAeC,SAASd;AADxC,AAEE,IAAAqI,WAAQnH;IAARmH,eAAA,mFAAAA,nBACsCvI,QAAQc,pEAAjC,AAACsF,oCAAmB,eAAAmC,5BAAZzH,zBAAb,sCAA0BhB,2BAAOG;AADzC,AAAA,KAEa,AAACmG,uBAAOvF,zBAAb;sCAAgCZ,tCAAR,sBAAAsI,fAACzI,4BAAIE,QAAQa;;AAF7C0H;;;AAGF,sBAAA,fAACzI,kGAAKC,QAAQL,eAAQM,GAAGC,KAAKC;;;;AATpC,AAAA,AAAAmK,iDAAA;;AAAA;AAAA,AAAA,AAAAA,2CAAA,WAAAG;AAAA,AAAA,IAAAC,WAAA,AAAAvB,gBAAAsB;IAAAA,eAAA,AAAAE,eAAAF;IAAAG,WAAA,AAAAzB,gBAAAsB;IAAAA,eAAA,AAAAE,eAAAF;IAAAI,WAAA,AAAA1B,gBAAAsB;IAAAA,eAAA,AAAAE,eAAAF;IAAAK,WAAA,AAAA3B,gBAAAsB;IAAAA,eAAA,AAAAE,eAAAF;AAAA,AAAA,IAAAM,qBAAA;AAAA,AAAA,OAAAA,wDAAAL,SAAAE,SAAAC,SAAAC,SAAAL;;;AAAA,AAWA,2BAAA,mCAAA+D,9DAAO7B,uEAAgC1M,GAAGC,KAAKgH,KAAK/G;AAApD,AAAA,IAAAsO,aAAAD;cAAA,AAAA3N,4CAAA4N,WAAA,IAAA,rEAAuBzO;aAAvB,AAAAa,4CAAA4N,WAAA,IAAA,pEAA+B9O;8JACPA,iGAA8BQ,lFAAtBF,QAAQ+G,9KAArCC,PAAD,mEAAA,6GAAiC/G,1BAAnBF,oGAAiCkH,1PADjD;;AAGA;;;wDAEGxG,hCAFH,xBAAO2K;AAAP,AAGE,OAACxG,oBAAU,WAAKF,EAAEzE,KAAK+E;AAAZ,AACE,IAAAC,WAAQP;oBACA,AAAC3C,qDAAMiD,zEADf,AAAA;AACyB,oDAAAC,7CAACJ,sDAAK5E;;AAD/BgF;;qCAC2CxE,lCAFxD;;AAKF,AAAA;;;sBAAA,8BAAAN,pDAAMwF;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,kDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,kDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAArF,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,AAAA,oDAAA,pDAAMqF,+DAEFlE,GAAGmC;AAFP,AAGG,IAAA+E,WAAMlH;AACJ,0DAAAkH,0BAAA,pFAACC,mEAAMC,uFAAqBtD,iEAAK3B,3NADnC;;AAAA+E;;;AAHH,AAAA,oDAAA,pDAAMhD,+DAKFlE,GAAGkC,SAASC;AALhB,AAMG,OAAC2I,wBAAkB9K,GAAGkC,SAASC;;;AANlC,AAAA,8CAAA,9CAAM+B;;AAAN,AAQA,AAAA;;;;;;;;;;oBAAA,4BAAAxF,hDAAMqJ;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,gDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,gDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAlJ,MAAA,CAAA,8DAAA,AAAA;;;;;6DASImB,GAAGmC,hEATP,AAAA,kDAAA,lDAAM4F;AAAN,AAUG,8EAAA,9EAACZ,0DAAMnH,GAAGoH,uFAAqB1D,sEAASvB;;AAV3C;AAWI,OAACuC,kDAAS1E,GAAGmC,5DAXjB;;;;AAAA,AAAA,kDAAA,lDAAM4F,6DAYF/H,GAAGkC,SAASC;AAZhB,AAaG,AAACmL,sBAAgBtN,GAAGkC,SAASC;;AAbhC;AAcI,OAACF,kDAASjC,GAAGkC,SAASC,rEAd1B;;;;AAAA,AAAA,4CAAA,5CAAM4F;;AAAN,AAgBA;;;;;8BAAA,sCAAAkF,pEAAOE;AAAP,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAxM,gCAAA,AAAAwM,+BAAA,KAAA,OAAA,QAAA,AAAAvM,8CAAAC,mBAAAsM,YAAAA;IAIgCtG,YAJhCsG;IAIWpL,WAJX,AAAAjB,4CAAAqM,eAAA;IAIoBjP,SAJpB,AAAA4C,4CAAAqM,eAAA;AAKE,IAAArI,2BAA6B,qDAAA,rDAAChE,4CAAKiB,3EALrC;AAKE,AAAA,oBAAA+C;AAAA,AAAA,8BAAAA,1BAAWC;AAAX,gGACoE6E,PAAR1L,OAAO,hGAAjE,IAAA8N,mBAAA,AAAAT,cAAiB,AAACa,yKAAoErK,7IAA9CgD,qDAAqC,AAAA;IAA7EkH,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,qBAAA,AAAAD,wDAAAE,zEAAQvF;AACN,CAACA,+CAAAA,0DAAAA,bAASC,sCAAAA,nIADZ,AAAA;;AAAA;AAAA,eAAAmF;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAArH,+BAAA,AAAAyG,cAAAS;AAAA,AAAA,GAAAlH;AAAA,AAAA,IAAAkH,uBAAAlH;AAAA,AAAA,GAAA,AAAA6G,6BAAAK;AAAA,IAAAJ,wBAAA,AAAAC,sBAAAG;AAAA,AAAA,eAAA,AAAAF,qBAAAE;eAAAJ;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,qBAAA,AAAAlE,gBAAAsE,jCAAQpF;AACN,CAACA,+CAAAA,0DAAAA,bAASC,sCAAAA,nIADZ,AAAA;;AAAA;AAAA,eAAA,AAAAqC,eAAA8C;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AADF;;AAGA,IAAAV,aAAA,AAAAC,cAAiB,qDAAA,rDAACzK,4CAAKiB;IAAvByJ,eAAA;IAAAC,eAAA;IAAAC,WAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,WAAAD;AAAA,eAAA,AAAAD,kDAAAE,7DAAQ9E;AAAR,AAAA,AACE,CAACA,yCAAAA,oDAAAA,bAASC,gCAAAA;;AADZ;AAAA,eAAAyE;eAAAE;eAAAC;eAAA,CAAAC,WAAA;;;;;;;AAAA,IAAA5G,qBAAA,AAAAyG,cAAAD;AAAA,AAAA,GAAAxG;AAAA,AAAA,IAAAwG,iBAAAxG;AAAA,AAAA,GAAA,AAAA6G,6BAAAL;AAAA,IAAAM,kBAAA,AAAAC,sBAAAP;AAAA,AAAA,eAAA,AAAAQ,qBAAAR;eAAAM;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,eAAA,AAAAlE,gBAAA4D,3BAAQ1E;AAAR,AAAA,AACE,CAACA,yCAAAA,oDAAAA,bAASC,gCAAAA;;AADZ;AAAA,eAAA,AAAAqC,eAAAoC;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;;AAGF,uBAAA,vBAAOjB,sDAAWzK,MAAM8B;AAAxB,AACE,OAACd,8CAAM,iBAAA+M,WAAM,qEAAA,oBAAA,xFAACjM,mCAAAA,wCAAAA;IAAPiM,eAAA,EAAA,CAAAA,oBAAAxP,oBAAA,AAAAwP,aAAA;AAAA,AAAA,QAAAA;KAAA;AACUrP;;;KADV;AAEcmG;;;KAFd;AAGkBoE;;;KAHlB;AAIoBqC;;;KAJpB;AAKqBzD;;;KALrB;AAMmB4E;;;;AANnB;;AAOG,MAAO,AAACvN,MAAS,CAAA,4DAAqB,qEAAA,oBAAA,xFAAC4C,mCAAAA,wCAAAA,rJAP1C;;;;;KAQA,iDAAA,jDAACe,8CAAMf,OAAK9B;;AAErB,yBAAA,zBAAOI,0DAAaqC,UAAUwD;AAC5B,iBAAA,WAAA4D,xBAAME,JADR;AACE,AAAkB,qEAAAF,9DAACnE,oDAAWjD;;IAA9BqH,aACwB,AAACxI,+CAAO;kBAAKtB,MAAM8B;AACT,GAAI,AAACwD,wBAAQxD,3BADf;AAEI,OAAC2I,qBAAUzK,MAAM,kDAAA,lDAAC0K,+CAAO5I,OAAKiI;;AAC9B,kCAAA,mFAAA,9GAACU,qBAAUzK,sJAAmB,kDAAA,lDAAC0K,+CAAO5I,wDAAUiI;;;oFACnDtH,UAAU,qBAAA,rBAACC,+DACZuD,5JALR;eADxB,AAAAzG,4CAAAsK,WAAA,IAAA,tEACO3H;aADP,AAAA3C,4CAAAsK,WAAA,IAAA,pEACgBxL;wLAOF6D,vEADAM,yIAEA,AAACuD,2BAAY1H,rRAT3B,AAAA,kDAAA,yEAAA,sEAAA;;AAWF,wCAAA,xCAAe4J;AAEf,AAAA,4BAAA,oCAAAnJ,hEAAMmE;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,wDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,wDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAhE,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,AAAA,0DAAA,1DAAMgE,qEACF7C,GAAGH;AADP,AACY,sEAAA,/DAAC4F,wDAAUzF,GAAGH;;;AAD1B,AAAA,0DAAA,kBAAAiD,5EAAMD,qEAEF7C,GAAGH;AAFP,AAAA,IAAAkD,aAAAD;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAArC,gCAAA,AAAAqC,+BAAA,KAAA,OAAA,QAAA,AAAApC,8CAAAC,mBAAAmC,YAAAA;aAAA,AAAAC,4CAAAD,eAAA,0DAAA,9HAEmBmF;iBAFnB,AAAArH,4CAAAkC,eAAA,xEAGmB8D;AAHnB,AAKG,IAAAmB,0BAAU/H;AAAV,AAAA,AAAUA,gCAAS,iBAAAgI,mBAAIC;AAAJ,AAAA,oBAAAD;AAAAA;;AAAWpB;;;;2PAK0B,AAACjH,qBAAKC,QAAM,uBAAA,AAAAC,vBAACC,uCAAaC,IAAGH,nUALrF,IAAA,iDAEoD,EAAK,AAAC+J,qBAAK/J,UAAK,8BAAA,9BAACwD,0BAAWxD,iEAAcA,MAC1C,EAAI,AAACoF,wBAAQpF,7MAF/D,IAAAgF,qBAA4C,iBAAA,KAAA,kIAAA,mJAAA,zSAAM,QAAA,PAAMhF,2LAGF,AAAC0K,sBAAM1K,uFAEL,kBAAO,MAAA,NAAChB;;AALhE,AAAA,oBAAAgG;AAAA,AAAA,IAAAqF,aAAArF;IAAAqF,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAxJ,gCAAA,AAAAwJ,+BAAA,KAAA,OAAA,QAAA,AAAAvJ,8CAAAC,mBAAAsJ,YAAAA;SAAAA,LAAwCzI;eAAxC,AAAAZ,4CAAAqJ,eAAA,tEAAmBpI;aAAnB,AAAAjB,4CAAAqJ,eAAA,pEAA4BjM;AAA5B,AAME,AAAC0M,sBAAO3K,GAAG8B;;AACX,GAAU,kCAAA,jCAAM+D;AAAhB;mGAEuB,8CAAA,AAAA/F,+CAAA,7FAAC0C,0JAAgBV,zMACjB,mNAAA,nNAACiI,4QAAeC,eAAK/L,/UAF1C,AAAC0M,sBAAO9E,2IAAcA,jKADxB;;;AAKA,oBAAM,iBAAAmH,oBAAK9E;AAAL,AAAA,oBAAA8E;AAAY,SAAKnF;;AAAjBmF;;;AAAN,AACE,AAACG,4BAAiB1L;;AADpB;;AAEAzB;;AAdF;;UADF,AAAA,gCAAAgI,hCAAU/H;;;AALb,AAAA,oDAAA,pDAAM4C;;AAAN,AAsBA,wBAAA,xBAAMwD,wDACH/H,QAAQ4H;AAgBJ,OAACvF,8CAAMK,yBAdP,AAACsB,6CAAK,WAAKnE,tIAHlB;AAGa,+CAEcgF,iCAAiB5E,GAAG2E,pCAArB,+BAAgBD,XAAL,nEADtB,OAAC2K,cAAI,EAAM,AAACC,oBAAI1P;qBACuCA,kCAAAA,0CAAAA,7EAAX,mEAAa+E,sBAAAA,7GAAjB,AAAlB;oDAAiDD,EAAE1E,/CAAP6E,PAAD;;AAAYH;;iJAElE,cAAA/E,bAAUC,7GAFiE0C,4CAAKvC,5CAAN,oDAAA,tFAA1E,4IADN,oCAIM;AAAI,sDAAA,tDAACQ,yGAAuBX;;sCACR8E,EAAE1E,jCAAjB4E,oBAAU,gBAAUD,3CAArB;GAA4CG,HAAf,6BAA0BH,OAAO/E,pCAAnD,GAAsB;oDAAsC8E,pDAAN,sDAAQ1E,/CAAP6E;;AAAWH;;iFAAc3E,5CAALuC,AAAD,oDAAA,tFAArF;;CAGJ,iBAAAiF,aAAiB3H,9BARvB;WAQM,AAAAgB,4CAAA2G,WAAA,IAAA,lEAAOtH;UAAP,AAAAW,4CAAA2G,WAAA,IAAA,jEAAY/G;AAAZ,AACE,sDAAA,kDAAA,xGAACD,2LAAwBN,KAAKO;;AAC9B,oBAAI,AAAC2H,sDAAOpI,QAAQE;AAClB,OAAAqC,4CAAA,AAAAA,4CAAA,AAAAA,oDAAA,RAASvC,4DAAcE,MAAKO;;AAC5B,IAAAwH,WAAYjI;IAAZkI,WAAA,mFAAA;kBAAAJ;wDAA6B,4CAAAA,5CAACvF,JAAL9B,7CAAFuH,PAAvB,AAAsB,qHAAe9H;;;QAApC6H,sDAAAA,yEAAAA,vIAAD,AAAA,kHAAAE,SAAAC,4CAAAD,SAAAC;;;;GAdvBN;;oDAkBJ5H,QAAQ4H,5DADX,sBAAA,tBAAMmB;AAAN,OAEGyG,PAAD,mDAAA,WAAAC;AAAA,OAAOvM,kBAAOlD,zBAAR,iCAAAyP;GAAmB,sBAAYzP,tBAAX+H,8BAAmBH;;AAE/C;;;uBAAA,vBAAM7B;AAAN,AAGE,oDAAK,AAACoG","names":["G__15831","datoms","cljs.core/Keyword","q","re-db.core/select-keys","re-db.core/add","db-snap","id","attr","new-val","var_args","G__15706","re-db.core/resolve-id","js/Error","re_db.patterns.log_read.cljs$core$IFn$_invoke$arity$2","val","schema","re-db.core/get-schema","vec__15707","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","removals","additions","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","prev-val","re-db.core/add-map-indexes","m","prev-m","state","cljs.core/seq?","txs","cljs.core/deref","re-db.core/transaction","db","re-db.core/*notify*","G__15805","cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","clojure.set/difference","re_db.core.many_QMARK_.cljs$core$IFn$_invoke$arity$1","ks","p__15725","map__15726","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","re-db.core/touch","cljs.core/select-keys","clojure.set/intersection","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__15782","vec__15783","a","v","added","re-db.core/add-index","re-db.core/entity","tx","re_db.core.unique_QMARK_.cljs$core$IFn$_invoke$arity$1","G__15679","re-db.core/create","re-db.core/into-set","db-after","G__15771","re-db.core/clear-empty-ent","re_db.core.unlisten.cljs$core$IFn$_invoke$arity$3","patterns","f","db-before","cljs.core/transient","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","ids","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/namespace","cljs.core.keyword.cljs$core$IFn$_invoke$arity$2","cljs.core/name","G__16034","re-db.core/transact!","p__16039","map__16044","cljs.core.get.cljs$core$IFn$_invoke$arity$3","s","entity","cljs.core/reduce-kv","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core/contains?","re-db.core/update-index","k-schema","G__15895","cljs.core/keyword-identical?","re-db.core/conj-set","re-db.core/ref?","G__15728","removed","cljs.core/disj","re_db.core.index_QMARK_.cljs$core$IFn$_invoke$arity$1","G__15735","G__15913","re-db.core/unlisten","re_db.core.resolve_id.cljs$core$IFn$_invoke$arity$3","not-found","re-db.core/unique-id","p__15827","vec__15828","re-db.core/add-map","cljs.core.get_in.cljs$core$IFn$_invoke$arity$3","re_db.core.unlisten.cljs$core$IFn$_invoke$arity$2","cljs.core/empty?","G__15711","temp__5457__auto__","pattern-value-map","index","G__15739","cljs.core/vector?","G__15755","G__15700","re-db.core/unique?","re_db.core.resolve_id.cljs$core$IFn$_invoke$arity$2","cljs.core/assoc-in","re_db.core.update_attr.cljs$core$IFn$_invoke$arity$variadic","path","re_db.core.transact_BANG_.cljs$core$IFn$_invoke$arity$3","G__15822","cljs.core/persistent!","new-txs","re-db.core/*db-log*","vec__16068","cljs.core/not","re_db.core.unique_QMARK_.cljs$core$IFn$_invoke$arity$2","re_db.core.many_QMARK_.cljs$core$IFn$_invoke$arity$2","qs","re-db.core/merge-schema!","p1__16062#","re-db.core/entity-ids","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","G__16071","G__16072","re-db.core/assert-uniqueness","re_db.core.index_QMARK_.cljs$core$IFn$_invoke$arity$2","listener","tx-report","log-datoms","G__15846","G__15804","re-db.core/remove-nils","k","G__15924","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/update","re-db.core/entities","G__15690","re-db.core/index?","re-db.core/retract-entity","cljs.core/first","G__15737","G__15716","re-db.core/get-in","re-db.core/*prevent-notify*","G__15935","re-db.core/listen","*notify*16050","or__3949__auto__","notify","p__15748","vec__15752","re-db.core/retract-attr-many","value","args__4534__auto__","len__4531__auto__","i__4532__auto__","argseq__4535__auto__","cljs.core/IndexedSeq","re-db.core/update-attr","p__15840","vec__15842","seq15833","G__15834","cljs.core/next","G__15835","G__15836","G__15837","self__4518__auto__","args","G__15736","p1__16017#","vec__16019","resolve-id","re-db.core/many-attrs","cljs.core/map?","kill?","cljs.core/dissoc","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/into","re_db.core.retract_attr.cljs$core$IFn$_invoke$arity$4","map__16052","re-db.core/remove-index","re-db.core/commit-tx","cljs.core.update.cljs$core$IFn$_invoke$arity$3","re-db.core/add-index-many","cljs.core/list?","re-db.core/add-map-datoms","cljs-uuid-utils.core/make-random-uuid","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/reset!","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","re-db.core/remove-index-many","re-db.patterns/unlisten","re_db.patterns.log_read.cljs$core$IFn$_invoke$arity$3","p1__15722#","re-db.core/assoc-in-attr","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2","cljs.core/conj","cljs.core/enable-console-print!","seq__15971","cljs.core/seq","chunk__15972","count__15973","i__15974","cljs.core/chunked-seq?","c__4351__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","seq__15962","chunk__15963","count__15964","i__15965","re-db.patterns/datom-values","re-db.core/retract-attr","G__15693","re-db.core/many?","cljs.core/merge","p__15794","vec__15796","G__15713","re-db.core/get","G__15816","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","p__15870","vec__15871","and__3938__auto__","p__15951","map__15952","re-db.core/notify-listeners","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","re_db.core.create.cljs$core$IFn$_invoke$arity$1","re-db.patterns/listen","G__15757","p__15762","vec__15763","G__16014","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core/set","cljs.core/fn?","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p1__16080#","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","re-db.core/contains?","clojure.set.intersection.cljs$core$IFn$_invoke$arity$2","G__15741","fexpr__15740"],"sourcesContent":["(ns re-db.core\n  (:refer-clojure\n    :exclude [get get-in select-keys set! peek contains? namespace]\n    :rename {get         get*\n             contains?   contains?*\n             select-keys select-keys*\n             namespace   namespace*})\n  (:require [cljs-uuid-utils.core :as uuid-utils]\n            [clojure.set :as set]\n            [re-db.patterns :as patterns])\n  (:require-macros [re-db.core :refer [get-in*]]))\n\n(enable-console-print!)\n\n(def ^:dynamic *notify* true)                               ;; if false, datoms are not tracked & listeners are not notified. faster.\n(def ^:dynamic *db-log* nil)                                ;; maintains log of transactions while bound\n\n(def conj-set (fnil conj #{}))\n(def into-set (fnil into #{}))\n\n(defn create\n  \"Create a new db, with optional schema, which should be a mapping of attribute keys to\n  the following options:\n\n    :db/index       [true, :db.index/unique]\n    :db/cardinality [:db.cardinality/many]\"\n  ([] (create {}))\n  ([schema]\n   (atom {:eav    {}\n          :ave    {}\n          :schema schema})))\n\n(defn merge-schema!\n  \"Merge additional schema options into a db. Indexes are not created for existing data.\"\n  [db schema]\n  (swap! db update :schema merge schema))\n\n(defn get-schema [db-snap a]\n  (get-in* db-snap [:schema a]))\n\n(defn index?\n  \"Returns true if attribute is indexed.\"\n  ([schema]\n   (contains?* schema :db/index))\n  ([db-snap a]\n   (index? (get-schema db-snap a))))\n\n(defn many?\n  \"Returns true for attributes with cardinality `many`, which store a set of values for each attribute.\"\n  ([schema]\n   (keyword-identical? :db.cardinality/many (get* schema :db/cardinality)))\n  ([db-snap a]\n   (many? (get-schema db-snap a))))\n\n(defn unique?\n  \"Returns true for attributes where :db/index is :db.index/unique.\"\n  ([schema]\n   (keyword-identical? :db.index/unique (get* schema :db/index)))\n  ([db-snap a]\n   (unique? (get-schema db-snap a))))\n\n(defn ref?\n  [schema]\n  (keyword-identical? :db.type/ref (get* schema :db/type)))\n\n(defn resolve-id\n  \"Returns id, resolving lookup refs (vectors of the form `[attribute value]`) to ids.\n  Lookup refs are only supported for indexed attributes.\n  The 3-arity version is for known lookup refs, and does not check for uniqueness.\"\n  ([db-snap attr val]\n   (patterns/log-read :_av [attr val])\n   (first (get-in* db-snap [:ave attr val])))\n  ([db-snap id]\n   (if ^:boolean (vector? id)\n     (let [[attr val] id]\n       (if-not (unique? db-snap attr)\n         (throw (js/Error. (str \"Not a unique attribute: \" attr \", with value: \" val)))\n         (resolve-id db-snap attr val)))\n     id)))\n\n(defn contains?\n  \"Returns true if entity with given id exists in db.\"\n  [db-snap id]\n  (let [id (resolve-id db-snap id)]\n    (when-not ^:boolean (nil? id) (patterns/log-read :e__ id))\n    (true? (contains?* (get* db-snap :eav) id))))\n\n(declare get entity)\n\n(defn entity\n  \"Returns entity for resolved id.\"\n  [db-snap id]\n  (when-let [id (resolve-id db-snap id)]\n    (patterns/log-read :e__ id)\n    (some-> (get-in* db-snap [:eav id])\n            (assoc :db/id id))))\n\n(defn get\n  \"Get attribute in entity with given id.\"\n  ([db-snap id attr]\n   (when-let [id (resolve-id db-snap id)]\n     (patterns/log-read :ea_ [id attr])\n     (get-in* db-snap [:eav id attr])))\n  ([db-snap id attr not-found]\n   (when-let [id (resolve-id db-snap id)]\n     (patterns/log-read :ea_ [id attr])\n     (get-in* db-snap [:eav id attr] not-found))))\n\n(defn get-in\n  \"Get-in the entity with given id.\"\n  ([db-snap id ks]\n   (when-let [id (resolve-id db-snap id)]\n     (patterns/log-read :ea_ [id (first ks)])\n     (-> (get-in* db-snap [:eav id])\n         (get-in* ks))))\n  ([db-snap id ks not-found]\n   (when-let [id (resolve-id db-snap id)]\n     (patterns/log-read :ea_ [id (first ks)])\n     (-> (get-in* db-snap [:eav id])\n         (get-in* ks not-found)))))\n\n(defn select-keys\n  \"Select keys from entity of id\"\n  [db-snap id ks]\n  (when-let [id (resolve-id db-snap id)]\n    (patterns/log-read :ea_ (mapv #(do [id %]) ks) true)\n    (-> (get-in* db-snap [:eav id])\n        (assoc :db/id id)\n        (select-keys* ks))))\n\n(defn touch\n  \"Add refs to entity\"\n  [db-snap {:keys [db/id] :as entity}]\n  (reduce-kv\n    (fn [m attr ids]\n      (assoc m (keyword (namespace* attr) (str \"_\" (name attr))) ids))\n    entity\n    (get-in* db-snap [:vae id])))\n\n(defn- assert-uniqueness [db-snap id attr val]\n  (when-not (empty? (get-in* db-snap [:ave attr val]))\n    (throw (js/Error. (str \"Unique index on \" attr \"; attempted to write duplicate value \" val \" on id \" id \".\")))))\n\n(defn- add-index [db-snap id a v schema]\n  (let [index (get* schema :db/index)]\n    (when (keyword-identical? index :db.index/unique)\n      (assert-uniqueness db-snap id a v))\n    (cond-> db-snap\n            (not (nil? index)) (update-in [:ave a v] conj-set id)\n            (ref? schema) (update-in [:vae v a] conj-set id))))\n\n(defn- add-index-many [db-snap id attr added schema]\n  (reduce (fn [state v]\n            (add-index state id attr v schema)) db-snap added))\n\n(defn- remove-index [db-snap id attr removed schema]\n  (cond-> db-snap\n          (index? schema) (update-in [:ave attr removed] disj id)\n          (ref? schema) (update-in [:vae removed attr] disj id)))\n\n(defn- remove-index-many [db-snap id attr removals schema]\n  (reduce (fn [db-snap v]\n            (remove-index db-snap id attr v schema))\n          db-snap\n          removals))\n\n(defn- update-index [db-snap id attr added removed schema]\n  (if (many? schema)\n    (cond-> db-snap\n            added (add-index-many id attr added schema)\n            removed (remove-index-many id attr removed schema))\n    (cond-> db-snap\n            added (add-index id attr added schema)\n            removed (remove-index id attr added schema))))\n\n(defn- clear-empty-ent [db-snap id]\n  (cond-> db-snap\n          (#{{:db/id id} {}} (get-in* db-snap [:eav id])) (update :eav dissoc id)))\n\n(declare retract-attr)\n\n(defn- retract-attr-many [[db-snap datoms :as state] id attr value schema]\n  (let [prev-val (get-in* db-snap [:eav id attr])]\n    (let [removals (if (nil? value) prev-val (set/intersection value prev-val))\n          kill? (= removals prev-val)]\n      (if (empty? removals)\n        state\n        [(-> (if kill? (update-in db-snap [:eav id] dissoc attr)\n                       (update-in db-snap [:eav id attr] set/difference removals))\n             (update-index id attr nil removals schema)\n             (clear-empty-ent id))\n         (cond-> datoms\n                 (true? *notify*) (conj! [id attr nil removals]))]))))\n\n(defn- retract-attr\n  ([state id attr] (retract-attr state id attr (get-in* (state 0) [:eav id attr])))\n  ([[db-snap datoms :as state] id attr value]\n   (let [schema (get-schema db-snap attr)]\n     (if (many? schema)\n       (retract-attr-many state id attr value schema)\n       (let [prev-val (if-not (nil? value) value (get-in* db-snap [:eav id attr]))]\n         (if-not (nil? prev-val)\n           [(-> (update-in db-snap [:eav id] dissoc attr)\n                (update-index id attr nil prev-val (get-schema db-snap attr))\n                (clear-empty-ent id))\n            (cond-> datoms\n                    (true? *notify*) (conj! [id attr nil prev-val]))]\n           state))))))\n\n(defn- retract-entity [state id]\n  (reduce (fn [state [a v]]\n            (retract-attr state id a v))\n          state\n          (entity (state 0) id)))\n\n(defn- add\n  [[db-snap datoms :as state] id attr val]\n  {:pre [(not (keyword-identical? attr :db/id))]}\n  (let [schema (get-schema db-snap attr)\n        prev-val (get-in* db-snap [:eav id attr])]\n    (if (many? schema)\n      (let [additions (set/difference val prev-val)]\n        (if (empty? additions)\n          state\n          [(-> (update-in db-snap [:eav id attr] into-set additions)\n               (update-index id attr additions nil schema))\n           (cond-> datoms\n                   (true? *notify*) (conj! [id attr additions nil]))]))\n      (if (= prev-val val)\n        state\n        [(-> (assoc-in db-snap [:eav id attr] val)\n             (update-index id attr val prev-val schema))\n         (cond-> datoms\n                 (true? *notify*) (conj! [id attr val prev-val]))]))))\n\n(defn add-map-indexes [db-snap id m prev-m]\n  (reduce-kv\n    (fn [db-snap attr val]\n      (let [schema (get-schema db-snap attr)\n            prev-val (get* prev-m attr)]\n        (cond (many? schema)\n              (update-index db-snap id attr\n                            (set/difference val prev-val)\n                            (set/difference prev-val val)\n                            schema)\n              (not= val prev-val)\n              (update-index db-snap id attr val prev-val schema)\n              :else db-snap)))\n    db-snap m))\n\n(defn add-map-datoms [datoms id m prev-m db-snap]\n  (reduce-kv\n    (fn [datoms attr val]\n      (let [prev-val (get* prev-m attr)]\n        (cond-> datoms\n                (not= val prev-val) (conj! (if (many? db-snap attr)\n                                             [id attr\n                                              (set/difference val prev-val)\n                                              (set/difference prev-val val)]\n                                             [id attr val prev-val])))))\n    datoms m))\n\n(defn- remove-nils [m]\n  (reduce-kv (fn [m k v]\n               (cond-> m\n                       (nil? v) (dissoc k))) m m))\n\n(defn- add-map\n  [[db-snap datoms] m]\n  (let [id (get* m :db/id)\n        m (dissoc m :db/id)\n        prev-m (get-in* db-snap [:eav id])]\n    [(-> (assoc-in db-snap [:eav id] (remove-nils (merge prev-m m)))\n         (add-map-indexes id m prev-m)\n         (clear-empty-ent id))\n     (cond-> datoms\n             (true? *notify*) (add-map-datoms id m prev-m db-snap))]))\n\n(defn- update-attr [[db-snap datoms :as state] id attr f & args]\n  (let [prev-val (get-in* db-snap [:eav id attr])\n        new-val (apply f prev-val args)]\n    (if (many? db-snap attr)\n      (let [additions (set/difference new-val prev-val)\n            removals (set/difference prev-val new-val)]\n        (cond-> state\n                (not (empty? additions)) (add id attr additions)\n                (not (empty? removals)) (add id attr removals)))\n      (add [db-snap datoms] id attr new-val))))\n\n(defn- assoc-in-attr [[db-snap datoms] id attr path new-val]\n  (update-attr [db-snap datoms] id attr assoc-in path new-val))\n\n(defn- many-attrs\n  \"Returns set of attribute keys with db.cardinality/schema\"\n  [schema]\n  (reduce-kv (fn [s attr k-schema]\n               (cond-> s\n                       (many? k-schema) (conj attr))) #{} schema))\n\n\n(defn unlisten\n  \"Remove listener from patterns (if provided) or :tx-log.\"\n  ([db f]\n   (doto db\n     (swap! update :tx-listeners disj f)))\n  ([db patterns f]\n   (patterns/unlisten db patterns f)))\n\n(defn listen\n  \"Adds listener for transactions which contain datom(s) matching the provided pattern. If patterns not provided, matches all transactions.\n\n   Patterns should be a map containing any of the following keys, each containing a collection of patterns:\n\n    :e__      entity                              [id _ _]\n    :ea_      entity-attribute                    [id attr _]\n    :_av      attribute-value                     [_ attr val]\n    :_a_      attribute                           [_ attr _]\"\n  ([db f]\n   (swap! db update :tx-listeners conj-set f)\n   #(unlisten db f))\n  ([db patterns f]\n   (patterns/listen db patterns f)\n   #(unlisten db patterns f)))\n\n(defn- notify-listeners\n  \"Notify listeners for supported patterns matched by datoms in transaction.\n\n  Listeners are called with the complete :tx-report. A listener is called at most once per transaction.\"\n  [{:keys [db-after datoms] :as tx-report}]\n  (when-let [pattern-value-map (get* db-after :listeners)]\n    (doseq [listener (patterns/datom-values pattern-value-map datoms (many-attrs (:schema db-after)))]\n      (listener tx-report)))\n  (doseq [listener (get* db-after :tx-listeners)]\n    (listener tx-report)))\n\n(defn- commit-tx [state tx]\n  (apply (case (tx 0)\n           :db/add add\n           :db/add-map add-map\n           :db/update-attr update-attr\n           :db/assoc-in-attr assoc-in-attr\n           :db/retract-entity retract-entity\n           :db/retract-attr retract-attr\n           #(throw (js/Error (str \"No re-db op: \" (tx 0)))))\n         (assoc tx 0 state)))\n\n(defn- transaction [db-before new-txs]\n  (let [resolve-id #(resolve-id db-before %)\n        [db-after datoms] (reduce (fn [state tx]\n                                    (if (vector? tx)\n                                      (commit-tx state (update tx 1 resolve-id))\n                                      (commit-tx state [:db/add-map (update tx :db/id resolve-id)])))\n                                  [db-before (transient [])]\n                                  new-txs)]\n    {:db-before db-before\n     :db-after  db-after\n     :datoms    (persistent! datoms)}))\n\n(def ^:dynamic *prevent-notify* false)\n\n(defn transact!\n  ([db txs] (transact! db txs {}))\n  ([db txs {:keys [notify\n                   log-datoms]\n            :or   {notify true}}]\n   (binding [*notify* (or notify log-datoms)]\n     (when-let [{:keys [db-after datoms] :as tx} (cond (nil? txs) nil\n                                                       (and (map? txs) (contains?* txs :datoms)) txs\n                                                       (or (vector? txs)\n                                                           (list? txs)\n                                                           (seq? txs)) (transaction @db txs)\n                                                       :else (throw (js/Error \"Transact! was not passed a valid transaction\")))]\n       (reset! db db-after)\n       (when-not (nil? *db-log*)\n         (reset! *db-log* (-> @*db-log*\n                              (assoc :db-after db-after)\n                              (update :datoms into datoms))))\n\n       (when (and notify (not *prevent-notify*))\n         (notify-listeners tx))\n       db))))\n\n(defn entity-ids\n  [db-snap qs]\n  (->> qs\n       (mapv (fn [q]\n               (set (cond (fn? q)\n                          (reduce-kv (fn [s id entity] (if ^:boolean (q entity) (conj s id) s)) #{} (get* db-snap :eav))\n\n                          (keyword? q)\n                          (do (patterns/log-read :_a_ q)\n                              (reduce-kv (fn [s id entity] (if ^:boolean (contains?* entity q) (conj s id) s)) #{} (get* db-snap :eav)))\n\n                          :else\n                          (let [[attr val] q]\n                            (patterns/log-read :_av [attr val])\n                            (if (index? db-snap attr)\n                              (get-in* db-snap [:ave attr val])\n                              (entity-ids db-snap [#(= val (get* % attr))])))))))\n       (apply set/intersection)))\n\n(defn entities\n  [db-snap qs]\n  (map #(entity db-snap %) (entity-ids db-snap qs)))\n\n(defn unique-id\n  \"Returns a unique id (string).\"\n  []\n  (str (uuid-utils/make-random-uuid)))\n\n"]}