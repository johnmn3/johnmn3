["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","cljs/tools/reader/impl/inspect.cljs","~:line",9,"~:column",5,"~:end-line",9,"~:end-column",35],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$cljs.tools.reader.impl.inspect","~:imports",null,"~:requires",["^ ","~$cljs.core","^?","~$goog","^@"],"~:seen",["^:",[]],"~:shadow/js-access-global",["^:",["Error"]],"~:uses",null,"~:defs",["^ ","~$inspect*",["^ ","^;","~$cljs.tools.reader.impl.inspect/inspect*","^3","cljs/tools/reader/impl/inspect.cljs","^4",37,"^5",1,"^6",37,"^7",19,"^2",["^ ","^3","cljs/tools/reader/impl/inspect.cljs","^4",37,"^5",11,"^6",37,"^7",19],"~:tag","~$cljs.core/MultiFn"],"~$inspect*-col",["^ ","~:protocol-inline",null,"^2",["^ ","^3","cljs/tools/reader/impl/inspect.cljs","^4",13,"^5",8,"^6",13,"^7",20,"~:private",true,"~:arglists",["~#list",["~$quote",["^M",[["~$truncate","~$col","~$start","~$end"]]]]]],"^K",true,"^;","~$cljs.tools.reader.impl.inspect/inspect*-col","~:variadic",false,"^3","cljs/tools/reader/impl/inspect.cljs","^7",20,"~:method-params",["^M",[["^O","^P","^Q","^R"]]],"~:protocol-impl",null,"~:arglists-meta",["^M",[null,null]],"^5",1,"^4",13,"^6",13,"~:max-fixed-arity",4,"~:fn-var",true,"^L",["^M",["^N",["^M",[["^O","^P","^Q","^R"]]]]]],"~$dispatch-inspect",["^ ","^J",null,"^2",["^ ","^3","cljs/tools/reader/impl/inspect.cljs","^4",21,"^5",8,"^6",21,"^7",24,"^K",true,"^L",["^M",["^N",["^M",[["~$_","~$x"]]]]]],"^K",true,"^;","~$cljs.tools.reader.impl.inspect/dispatch-inspect","^T",false,"^3","cljs/tools/reader/impl/inspect.cljs","^7",24,"^U",["^M",[["~$_","~$x"]]],"^V",null,"^W",["^M",[null,null]],"^5",1,"^4",21,"^6",21,"^X",2,"^Y",true,"^L",["^M",["^N",["^M",[["~$_","~$x"]]]]]],"~$inspect",["^ ","^J",null,"^2",["^ ","^3","cljs/tools/reader/impl/inspect.cljs","^4",83,"^5",7,"^6",83,"^7",14,"^L",["^M",["^N",["^M",[["~$x"],["^O","~$x"]]]]],"~:doc","Return a string description of the value supplied.\n   May be the a string version of the value itself (e.g. \"true\")\n   or it may be a description (e.g. \"an instance of Foo\").\n   If truncate is true then return a very terse version of\n   the inspection.","~:top-fn",["^ ","^T",false,"^X",2,"^U",["^M",[["~$x"],["^O","~$x"]]],"^L",["^M",[["~$x"],["^O","~$x"]]],"^W",["^M",[null,null]]]],"^;","~$cljs.tools.reader.impl.inspect/inspect","^T",false,"^3","cljs/tools/reader/impl/inspect.cljs","^7",14,"^12",["^ ","^T",false,"^X",2,"^U",["^M",[["~$x"],["^O","~$x"]]],"^L",["^M",[["~$x"],["^O","~$x"]]],"^W",["^M",[null,null]]],"^U",["^M",[["~$x"],["^O","~$x"]]],"^V",null,"^W",["^M",[null,null]],"^5",1,"^4",83,"^6",83,"^X",2,"^Y",true,"^L",["^M",[["~$x"],["^O","~$x"]]],"^11","Return a string description of the value supplied.\n   May be the a string version of the value itself (e.g. \"true\")\n   or it may be a description (e.g. \"an instance of Foo\").\n   If truncate is true then return a very terse version of\n   the inspection."]],"~:require-macros",["^ ","^?","^?"],"~:cljs.analyzer/constants",["^ ","^A",["^:",["~:default","~:string","~:vector","~:strable","~:list","~:nil","~:set","~:hierarchy","~:map"]],"~:order",["^1;","^17","^19","^18","^1:","^1>","^1<","^16","^1="]],"~:flags",["^ "],"~:js-deps",["^ "],"~:deps",["^@","^?"]]