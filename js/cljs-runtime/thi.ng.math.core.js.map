{"version":3,"file":"thi.ng.math.core.js","sources":["thi/ng/math/core.cljc"],"mappings":"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","names":["thi.ng.math.core/PI","Math/PI","thi.ng.math.core/TWO_PI","thi.ng.math.core/HALF_PI","thi.ng.math.core/THIRD_PI","thi.ng.math.core/QUARTER_PI","thi.ng.math.core/SIXTH_PI","thi.ng.math.core/THREE_HALVES_PI","thi.ng.math.core/MAX","thi.ng.math.core/MIN","thi.ng.math.core/SQRT2","Math/sqrt","thi.ng.math.core/SQRT3","thi.ng.math.core/PHI","thi.ng.math.core/THIRD","thi.ng.math.core/LOG2","Math/log","thi.ng.math.core/INF+","js/Number","thi.ng.math.core/INF-","thi.ng.math.core/DEG","thi.ng.math.core/RAD","thi.ng.math.core/*eps*","thi.ng.math.core/*rnd*","Math/random","thi.ng.math.core/abs","Math/abs","thi.ng.math.core/abs-diff","x","y","G__34632","thi.ng.math.core/sign","var_args","G__34635","thi.ng.math.core/delta=","js/Error","x__4243__auto__","m__4244__auto__","thi/ng.math.core.delta=","goog/typeOf","cljs.core/missing-protocol","thi.ng.math.core/PDeltaEquals","a","b","eps","goog.object/set","G__34665","G__34666","G__34667","cljs.core/PROTOCOL_SENTINEL","G__34736","G__34737","G__34738","G__34668","G__34669","cljs.core/PersistentVector","and__3938__auto__","cljs.core/sequential?","cljs.core/count","thi.ng.math.core.delta_EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/first","cljs.core/next","thi.ng.math.core.delta_EQ_.cljs$core$IFn$_invoke$arity$3","cljs.core/List","cljs.core/LazySeq","cljs.core/IndexedSeq","_","thi.ng.math.core/ensure-even","cljs.core/even?","thi.ng.math.core/ensure-odd","G__34853","thi.ng.math.core/signum","delta","thi.ng.math.core/clamp","min","max","thi.ng.math.core/clamp-normalized","G__34875","thi.ng.math.core/map-interval","p__34877","p__34878","vec__34879","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__34882","in1","in2","out1","out2","G__34894","thi.ng.math.core/map-interval-clamped","p__34903","p__34904","vec__34905","vec__34908","p__34914","p__34915","p__34916","vec__34917","vec__34920","vec__34923","thi.ng.math.core.map_interval_clamped.cljs$core$IFn$_invoke$arity$5","thi.ng.math.core.map_interval.cljs$core$IFn$_invoke$arity$5","c1","c2","G__34946","thi.ng.math.core/in-range?","p__34947","vec__34948","thi.ng.math.core/wrap-range","cljs.core/rem","thi.ng.math.core/norm-range","n","p1__34959#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.range.cljs$core$IFn$_invoke$arity$1","thi.ng.math.core/mix","t","thi.ng.math.core/step","edge","thi.ng.math.core/smoothstep","e0","e1","thi.ng.math.core/mix-circular","G__34964","thi.ng.math.core/mix-circular-flipped","G__34968","thi.ng.math.core/mix-cosine","G__34969","Math/cos","thi.ng.math.core/mix-bezier","tsq","invt","itsq","thi.ng.math.core/mix-exp","e","Math/pow","thi.ng.math.core/mix-decimated","thi.ng.math.core/mix-lens","pos","strength","v","G__34989","G__34990","G__34991","fexpr__34988","G__34993","G__34994","G__34995","fexpr__34992","thi.ng.math.core/mix-bounce","k","t'","Math/sin","G__35001","thi.ng.math.core/floor","Math/floor","thi.ng.math.core/ceil","Math/ceil","thi.ng.math.core/roundto","prec","thi.ng.math.core/ceil-pow2","pow2","thi.ng.math.core/floor-pow2","G__35015","G__35016","thi.ng.math.core/bit-count","thi.ng.math.core/trunc","thi.ng.math.core/fract","thi.ng.math.core/fdim","thi.ng.math.core/radians","thi.ng.math.core/degrees","thi.ng.math.core/maxmag","ax","ay","thi.ng.math.core/minmag","thi.ng.math.core/ldexp","G__35070","G__35071","thi.ng.math.core/remquo","f","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","thi.ng.math.core/hypot","G__35076","thi.ng.math.core/rootn","G__35081","G__35082","thi.ng.math.core/rsqrt","r","thi.ng.math.core/impulse","h","G__35084","Math/exp","G__35087","thi.ng.math.core/sinc","freq","x'","G__35093","thi.ng.math.core/random","thi.ng.math.core/randnorm","thi.ng.math.core/percentile-index","num","G__35097","Math/round","thi.ng.math.core/percentile","sorted","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","thi.ng.math.core/quartile-index","thi.ng.math.core/quartile-range","thi.ng.math.core/quartile","vec__35101","cljs.core.drop.cljs$core$IFn$_invoke$arity$2","cljs.core.take.cljs$core$IFn$_invoke$arity$2","G__35113","thi.ng.math.core/normdist-weights","thi.ng.math.core.normdist_weights.cljs$core$IFn$_invoke$arity$2","scale","ws","cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2","s","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core/+","p1__35107#"],"sourcesContent":["(ns thi.ng.math.core\n  (:refer-clojure :exclude [bit-count])\n  #?(:clj\n     (:require [thi.ng.math.macros :as mm])\n     :cljs\n     (:require-macros [thi.ng.math.macros :as mm])))\n\n(def ^:const PI Math/PI)\n(def ^:const TWO_PI (* PI 2.0))\n(def ^:const HALF_PI (/ PI 2.0))\n(def ^:const THIRD_PI (/ PI 3.0))\n(def ^:const QUARTER_PI (/ PI 4.0))\n(def ^:const SIXTH_PI (/ PI 6.0))\n(def ^:const THREE_HALVES_PI (* PI 1.5))\n\n(def ^:const MAX 1.7976931348623157E308)\n(def ^:const MIN 4.9E-324)\n\n(def ^:const SQRT2 (Math/sqrt 2))\n(def ^:const SQRT3 (Math/sqrt 3))\n(def ^:const PHI (/ (inc (Math/sqrt 5.0)) 2))\n\n(def ^:const THIRD (/ 1.0 3.0))\n\n(def ^:const LOG2 (Math/log 2.0))\n\n(def ^:const INF+ #?(:clj Double/POSITIVE_INFINITY :cljs (.-POSITIVE_INFINITY js/Number)))\n(def ^:const INF- #?(:clj Double/NEGATIVE_INFINITY :cljs (.-NEGATIVE_INFINITY js/Number)))\n\n(def ^:const DEG (/ 180.0 PI))\n(def ^:const RAD (/ PI 180.0))\n(def ^:dynamic *eps* 1e-6)\n(def ^:dynamic *rnd* #?(:clj (java.util.Random.) :cljs Math/random))\n\n#?(:clj\n   (defn abs [x] (if (neg? x) (- x) x))\n   :cljs\n   (def abs Math/abs))\n\n(defn abs-diff\n  [x y] (abs (- x y)))\n\n(defn sign\n  [x] (if (zero? x) 0 (if (pos? x) 1 -1)))\n(defprotocol PDeltaEquals\n  (delta= [a b] [a b eps]))\n\n(extend-protocol PDeltaEquals\n  #?@(:clj\n       [Integer\n        (delta= ([a b] (if (number? b) (<= (abs (- a b)) *eps*))) ([a b eps] (if (number? b) (<= (abs (- a b)) eps))))\n        Long\n        (delta= ([a b] (if (number? b) (<= (abs (- a b)) *eps*))) ([a b eps] (if (number? b) (<= (abs (- a b)) eps))))\n        Float\n        (delta= ([a b] (if (number? b) (<= (abs (- a b)) *eps*))) ([a b eps] (if (number? b) (<= (abs (- a b)) eps))))\n        Double]\n       :cljs [number])\n  (delta= ([a b] (if (number? b) (<= (abs (- a b)) *eps*))) ([a b eps] (if (number? b) (<= (abs (- a b)) eps))))\n\n  #?(:clj clojure.lang.PersistentVector :cljs PersistentVector)\n  (delta=\n   ([a b]\n      (and (sequential? b)\n           (== (count a) (count b))\n           (loop [a a, b b]\n             (if a\n               (if (delta= (first a) (first b))\n                 (recur (next a) (next b))\n                 false)\n               true))))\n   ([a b eps]\n      (and (sequential? b)\n           (== (count a) (count b))\n           (loop [a a, b b]\n             (if a\n               (if (delta= (first a) (first b) eps)\n                 (recur (next a) (next b))\n                 false)\n               true)))))\n  #?(:clj clojure.lang.PersistentList :cljs List)\n  (delta=\n   ([a b]\n      (and (sequential? b)\n           (== (count a) (count b))\n           (loop [a a, b b]\n             (if a\n               (if (delta= (first a) (first b))\n                 (recur (next a) (next b))\n                 false)\n               true))))\n   ([a b eps]\n      (and (sequential? b)\n           (== (count a) (count b))\n           (loop [a a, b b]\n             (if a\n               (if (delta= (first a) (first b) eps)\n                 (recur (next a) (next b))\n                 false)\n               true)))))\n  #?(:clj clojure.lang.LazySeq :cljs LazySeq)\n  (delta=\n   ([a b]\n      (and (sequential? b)\n           (== (count a) (count b))\n           (loop [a a, b b]\n             (if a\n               (if (delta= (first a) (first b))\n                 (recur (next a) (next b))\n                 false)\n               true))))\n   ([a b eps]\n      (and (sequential? b)\n           (== (count a) (count b))\n           (loop [a a, b b]\n             (if a\n               (if (delta= (first a) (first b) eps)\n                 (recur (next a) (next b))\n                 false)\n               true)))))\n  #?(:clj clojure.lang.PersistentVector$ChunkedSeq :cljs IndexedSeq)\n  (delta=\n   ([a b]\n      (and (sequential? b)\n           (== (count a) (count b))\n           (loop [a a, b b]\n             (if a\n               (if (delta= (first a) (first b))\n                 (recur (next a) (next b))\n                 false)\n               true))))\n   ([a b eps]\n      (and (sequential? b)\n           (== (count a) (count b))\n           (loop [a a, b b]\n             (if a\n               (if (delta= (first a) (first b) eps)\n                 (recur (next a) (next b))\n                 false)\n               true)))))\n\n  nil\n  (delta= ([_ b] (nil? b)) ([_ b _] (nil? b))))\n(defn ensure-even\n  \"Returns x if even or `x+1` if `x` is odd.\"\n  [x] (if (even? x) x (inc x)))\n\n(defn ensure-odd\n  \"Returns x if odd or `x+1` if `x` is even.\"\n  [x] (if (even? x) (inc x) x))\n\n(defn signum\n  ([x] (if (neg? x) -1 (if (zero? x) 0 1)))\n  ([x delta]\n     (if (delta= 0.0 x delta) 0\n         (if (neg? x) -1 1))))\n(defn clamp\n  [x min max] (if (< x min) min (if (> x max) max x)))\n\n(defn clamp-normalized\n  [x] (if (< x -1.0) -1.0 (if (> x 1.0) 1.0 x)))\n\n(defn map-interval\n  \"Maps x from one interval into another. Intervals can be defined as vectors.\"\n  ([x [in1 in2] [out1 out2]]\n     (mm/madd (- out2 out1) (mm/subdiv x in1 in2 in1) out1))\n  ([x in1 in2 out1 out2]\n     (mm/madd (- out2 out1) (mm/subdiv x in1 in2 in1) out1)))\n\n(defn map-interval-clamped\n  ([x [in1 in2] [out1 out2]]\n     (map-interval-clamped x in1 in2 out1 out2))\n  ([x in1 in2 out1 out2]\n     (if (<= x in1)\n       out1\n       (if (>= x in2)\n         out2\n         (map-interval x in1 in2 out1 out2))))\n  ([x [in1 in2] [out1 out2] [c1 c2]]\n     (clamp (map-interval x in1 in2 out1 out2) c1 c2))\n  ([x in1 in2 out1 out2 c1 c2]\n     (clamp (map-interval x in1 in2 out1 out2) c1 c2)))\n\n(defn in-range?\n  \"Returns true if x >= min and x <= max.\"\n  ([[min max] x]\n     (if (>= x min) (<= x max)))\n  ([min max x]\n     (if (>= x min) (<= x max))))\n\n(defn wrap-range\n  ([x y] (let [x (rem x y)] (if (neg? x) (+ x y) x))))\n\n(defn norm-range\n  \"Returns lazy-seq of n values in the closed interval [0.0, 1.0] at\n  resolution 1/x.\"\n  [n] (map #(/ % (double n)) (range (inc n))))\n(defn mix\n  [a b t] (mm/submadd b a t a))\n\n(defn step\n  [edge x] (if (< x edge) 0.0 1.0))\n\n(defn smoothstep\n  [e0 e1 x]\n  (let [t (clamp (mm/subdiv x e0 e1 e0) 0.0 1.0)]\n    (* t (* t (mm/madd t -2.0 3.0)))))\n\n(defn mix-circular\n  [a b t]\n  (let [t (- 1.0 t)]\n    (mm/submadd b a (Math/sqrt (- 1.0 (* t t))) a)))\n\n(defn mix-circular-flipped\n  [a b t] (mm/submadd b a (- (- (Math/sqrt (- 1.0 (* t t))) 1.0)) a))\n\n(defn mix-cosine\n  [a b t] (mm/submadd a b (mm/madd (Math/cos (* t PI)) 0.5 0.5) b))\n\n(defn mix-bezier\n  [a b t c1 c2]\n  (let [tsq (* t t)\n        invt (- 1.0 t)\n        itsq (* invt invt)]\n    (mm/add\n     (mm/mul a t itsq)\n     (mm/mul (mm/submadd b a c1 a) 3.0 t itsq)\n     (mm/mul (mm/submadd b a c2 b) 3.0 tsq invt)\n     (mm/mul b t tsq))))\n\n(defn mix-exp\n  [a b t e] (mm/submadd b a (Math/pow t e) a))\n\n(defn mix-decimated\n  [a b t n] (mm/submadd b a (/ (int (* t n)) (double n)) a))\n\n(defn mix-lens\n  [a b t pos strength]\n  (let [v (mm/submadd b a t a)]\n    (+ (if (< t pos)\n         (mm/subm\n          ((if (pos? strength) mix-circular-flipped mix-circular)\n           a (mm/submadd b a pos a) (/ t pos)) v (abs strength))\n         (mm/subm\n          ((if (neg? strength) mix-circular-flipped mix-circular)\n           (mm/submadd b a pos a) b (mm/subdiv t pos 1.0 pos)) v (abs strength)))\n       v)))\n\n(defn mix-bounce\n  [a b t k]\n  (if-not (zero? t)\n    (let [t' (* t k)\n          t' (- 1.0 (* (/ (Math/sin t') t') (Math/cos (* t HALF_PI))))]\n      (mm/submadd b a t a))\n    a))\n(defn floor\n  [x]\n  #?(:clj\n     (long (Math/floor x))\n     :cljs\n     (Math/floor x)))\n\n(defn ceil\n  [x]\n  #?(:clj\n     (long (Math/ceil x))\n     :cljs\n     (Math/ceil x)))\n\n(defn roundto\n  [x prec] (* (floor (+ (/ x prec) 0.5)) prec))\n\n(defn ceil-pow2\n  [x]\n  (loop [pow2 1]\n    (if (>= pow2 x) pow2 (recur (bit-shift-left pow2 1)))))\n\n(defn floor-pow2\n  [x]\n  #?(:clj\n     (long (Math/pow 2 (long (/ (Math/log x) LOG2))))\n     :cljs\n     (Math/pow 2 (int (/ (Math/log x) LOG2)))))\n\n(defn bit-count\n  [x] (ceil (/ (Math/log x) LOG2)))\n\n(defn trunc\n  [x] (if (neg? x) (ceil x) (floor x)))\n\n(defn fract\n  [x] (- x (Math/floor x)))\n\n(defn fdim\n  [x y] (if (> x y) (- x y) 0))\n(defn radians [x] (* x RAD))\n\n(defn degrees [x] (* x DEG))\n(defn maxmag\n  [x y]\n  (let [ax (abs x) ay (abs y)]\n    (cond\n     (> ax ay) x\n     (> ay ax) y\n     :default x)))\n\n(defn minmag\n  [x y]\n  (let [ax (abs x) ay (abs y)]\n    (cond\n     (< ax ay) x\n     (< ay ax) y\n     :default x)))\n\n(defn ldexp\n  [x k] (* x (Math/pow 2 (int k))))\n\n(defn remquo\n  [x y]\n  (let [k (/ x y)\n        f (fract k)\n        k (cond\n           (= f 0.5) (if (even? (int k)) (int k) (ceil k))\n           (< f 0.5) (floor k)\n           :default (ceil k))]\n    (- x (* k y))))\n\n(defn hypot\n  [x y] (Math/sqrt (mm/madd x x y y)))\n\n(defn rootn\n  [x y] (Math/pow x (/ 1.0 y)))\n\n(defn rsqrt\n  [x] (let [r (Math/sqrt x)] (if (pos? r) (/ 1.0 r) 0)))\n\n(defn impulse\n  [k t]\n  (let [h (* k t)] (* h (Math/exp (- 1.0 h)))))\n\n(defn sinc\n  ([x] (if (zero? x) 0.0 (/ (Math/sin x) x)))\n  ([x freq] (if (zero? x) 0.0 (let [x' (* x freq)] (/ (Math/sin x') x')))))\n(defn random\n  #?@(:clj\n      [([] (.nextDouble ^java.util.Random *rnd*))\n       ([max] (* (.nextDouble ^java.util.Random *rnd*) max))\n       ([min max] (mm/submadd max min (.nextDouble ^java.util.Random *rnd*) min))]\n      :cljs\n      [([] (*rnd*))\n       ([max] (* (*rnd*) max))\n       ([min max] (mm/submadd max min (*rnd*) min))]))\n\n(defn randnorm\n  []\n  #?(:clj\n     (dec (* (.nextDouble ^java.util.Random *rnd*) 2.0))\n     :cljs\n     (dec (* (*rnd*) 2.0))))\n(defn percentile-index\n  [n num]\n  (dec\n   (if (< n 100)\n     (int (Math/round (mm/madd (/ n 100.0) num 0.5)))\n     num)))\n\n(defn percentile\n  [n sorted]\n  (->> sorted\n       (count)\n       (percentile-index n)\n       (nth sorted)))\n\n(defn quartile-index\n  [n num] (percentile-index (* n 25) num))\n\n(defn quartile-range\n  [n num]\n  (let [a (quartile-index (dec n) num)\n        b (quartile-index n num)]\n    [a (if (= n 4) (inc b) b)]))\n\n(defn quartile\n  \"Takes a quartile index (1..4) and sorted seq of samples, returns set of items in quartile.\"\n  [n sorted]\n  (let [[a b] (quartile-range n (count sorted))]\n    (->> sorted (drop a) (take (- b a)))))\n(defn normdist-weights\n  ([n] (normdist-weights n 1.0))\n  ([n scale]\n     (let [ws (repeatedly n random)\n           s (/ scale (reduce + ws))]\n       (map #(* s %) ws))))\n"]}