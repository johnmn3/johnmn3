{"version":3,"file":"re_view.core.js","sources":["re_view/core.cljs"],"mappings":"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","names":["key","or__3949__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$2","props","instance-keys","_","G__16893","G__16894","goog.object/extend","prototype","re-view.core/lifecycle-methods","lifecycle-keys","G__16882","G__16883","js/module$node_modules$react$index.createElement","constructor","component","$props","cljs.core/keyword-identical?","k","re-view.core/ensure-state!","this","children","cljs.core/cons","p__16748","map__16749","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","js/module$node_modules$react$index.Component","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","f","cljs.core/deref","goog.object/get","var_args","args__4534__auto__","len__4531__auto__","i__4532__auto__","argseq__4535__auto__","cljs.core/IndexedSeq","re-view.core/swap-silently!","seq16780","self__4519__auto__","cljs.core/seq","cljs.core/fn?","goog.object/set","G__16798","G__16799","G__16800","G__16803","G__16804","G__16805","args","*trigger-state-render*16784","re-view.core/*trigger-state-render*","G__16716","method-k","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","fns","cljs.core/vector?","cljs.core/contains?","goog/define","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","re-view.core/finish-lifecycle","methods","re-view.core/mounted?","cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic","re_view.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/merge","re-view.core/view*","base","base-overrides","re-view.core/wrap-methods","re-view.core/init-state!","re-view.core/pass-props","value","class-react-key","cljs.core/reduce-kv","obj","method","m","react-keys","re-view-base","G__16880","defaults","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","re-view.core/compseq","patterns","re$view","*pattern-log*16657","re-db.patterns/*pattern-log*","map__16658","*db-log*16659","re-db.core/*db-log*","*prevent-notify*16660","re-db.core/*prevent-notify*","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","value__15667__auto__","value__16429__auto__","tx-report__16430__auto__","patterns__16431__auto__","re-db.core/notify-listeners","state","G__16755","cljs.core/remove-watch","seq__16691","chunk__16692","count__16693","i__16694","temp__5457__auto__","cljs.core/chunked-seq?","c__4351__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","cljs.core.update.cljs$core$IFn$_invoke$arity$3","re-view.view-spec/normalize-props-map","G__16791","G__16792","G__16793","G__16876","re$view$base","will-receive","re-view.core/collect","user-props","cljs.core/-vreset!","cljs.core/-deref","map__16717","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","old-state","new-state","G__16914","G__16913","G__16915","G__16916","re-view.core/is-react-element?","re-view.util/is-react-element?","prop-spec","re-view.core/force-update!","re-view.render-loop/force-update!","prev-patterns","un-sub","display-name","re-view.view-spec/validate-props","G__16743","G__16742","G__16744","G__16745","re-view.core/kmap","G__16902","G__16903","G__16904","G__16908","G__16909","G__16910","re-view.util/camelCase","v","next-props","cljs.core/swap!","prev-props","seq__16895","chunk__16896","count__16897","i__16898","vec__16899","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__16905","re-view.core/reactive-render","cljs.core/volatile!","cljs.core/Keyword","re-view.core/wrap-props","re-view.core/schedule!","re-view.render-loop/schedule!","re-view.core/dom-node","G__16970","G__16971","js/module$node_modules$react_dom$index.render","G__16972","element","G__16740","fexpr__16739","cljs.core/namespace","vec__16986","seq__16987","first__16988","G__16989","class-keys","re-view.core/init-component","prev-state","map__16746","prev-children","initial-state","G__16807","not-found","G__16648","G__16719","cljs.core/map?","re-view.core/factory","js/Error","p__16752","map__16753","p__16890","map__16891","re-view.core/class*","re-view.view-spec/validate-children","children-spec","seq__16794","chunk__16795","count__16796","i__16797","goog.object/getKeys","js/module$node_modules$react_dom$index.findDOMNode","map__16869","map__16870","map__16871","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","watchable-state","should-update","js/document","re-view.core/force-update","re-view.core/prototype","class","G__16982","re-view.core/partial","cljs.core/dissoc","G__16720","G__16983","G__16990","G__16991","G__16992","tag","re-view.core/render-to-dom","*trigger-state-render*16721","G__16809","G__16810","G__16811","and__3938__auto__","temp__5455__auto__","re-view.core/INSTRUMENT!","b","a","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core/merge-with","re-view.render-loop/force-update","map__16656","G__16668","G__16669","re-db.d/listen","*trigger-state-render*16722","cljs.core/add-watch","re-view.view-spec/resolve-spec-vector","re-view.core/flush!","re-view.render-loop/flush!","G__16738","fexpr__16737","fexpr__16650","re-view.render-loop/apply-sync!","cljs.core.get_in.cljs$core$IFn$_invoke$arity$3","cljs.core/last","seq16687","cljs.core/vreset!","vec__16877","G__16665","G__16666","G__16667","cljs.core/empty?","G__16808","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns re-view.core\n  (:refer-clojure :exclude [partial])\n  (:require-macros [re-view.core])\n  (:require [re-db.d :as d]\n            [re-db.patterns :as patterns :include-macros true]\n            [re-view.render-loop :as render-loop]\n            [re-view.hiccup.core :as hiccup]\n            [goog.object :as gobj]\n            [re-view.util :as v-util]\n            [re-view.view-spec :as vspec]\n            [\"react-dom\" :as react-dom]\n            [\"react\" :as react]))\n\n(def schedule! render-loop/schedule!)\n(def force-update render-loop/force-update)\n(def force-update! render-loop/force-update!)\n(def flush! render-loop/flush!)\n\n(def ^:dynamic *trigger-state-render* true)\n\n(goog-define INSTRUMENT! false)\n\n(defn dom-node\n  \"Return DOM node for component\"\n  [component]\n  (react-dom/findDOMNode component))\n\n(defn mounted?\n  \"Returns true if component is still mounted to the DOM.\n  This is necessary to avoid updating unmounted components.\"\n  [component]\n  (not (true? (gobj/get component \"unmounted\"))))\n\n(defn- wrap-props\n  \"Wraps :on-change handlers of text inputs to apply changes synchronously.\"\n  [props tag]\n  (cond-> props\n          (and (contains? props :on-change)\n               (#{\"input\" \"textarea\"} tag)) (update :on-change render-loop/apply-sync!)))\n\n(defn reactive-render\n  \"Wrap a render function to force-update the component when re-db patterns accessed during evaluation are invalidated.\"\n  [f]\n  (fn []\n    (this-as this\n      (let [re$view       (gobj/get this \"re$view\")\n            {:keys [patterns value]} (patterns/capture-patterns (apply f this (:view/children @re$view)))\n\n            prev-patterns (:view/re-db.patterns @re$view)]\n        (when-not (= prev-patterns patterns)\n          (when-let [un-sub (gobj/get this \"reactiveUnsubscribe\")] (un-sub))\n\n          (gobj/set this \"reactiveUnsubscribe\" (when-not (empty? patterns)\n                                                 (d/listen patterns #(force-update this))))\n          (vswap! re$view assoc :view/re-db.patterns patterns))\n        value))))\n\n(def ^:private kmap\n  \"Mapping of methods-map keys to React lifecycle keys.\"\n  {:constructor             \"constructor\"\n   :view/initial-state      \"$initialState\"\n   :view/state              \"$state\"\n   :view/did-catch          \"componentDidCatch\"\n   :view/will-mount         \"componentWillMount\"\n   :view/did-mount          \"componentDidMount\"\n   :view/will-receive-props \"componentWillReceiveProps\"\n   :view/will-receive-state \"componentWillReceiveState\"\n   :view/should-update      \"shouldComponentUpdate\"\n   :view/will-update        \"componentWillUpdate\"\n   :view/did-update         \"componentDidUpdate\"\n   :view/will-unmount       \"componentWillUnmount\"\n   :view/render             \"render\"})\n\n(defn compseq\n  \"Compose fns to execute sequentially over the same arguments\"\n  [& fns]\n  (fn [& args]\n    (doseq [f fns]\n      (apply f args))))\n\n(defn- collect\n  \"Merge a list of method maps. Multiple lifecycle methods execute sequentially. Only the last-defined :should-update function is applied.\"\n  [methods]\n  (let [methods (apply merge-with (fn [a b] (if (vector? a) (conj a b) [a b])) methods)]\n    (reduce-kv (fn [m method-k fns]\n                 (cond-> m\n                         (vector? fns) (assoc method-k (if (keyword-identical? method-k :view/should-update)\n                                                         (last fns)\n                                                         (apply compseq fns))))) methods methods)))\n\n(defn finish-lifecycle [this]\n  \"after update, update prev-props and prev-state\"\n  (let [re$view (aget this \"re$view\")\n        {prev-props :view/props\n         state      :view/state\n         children   :view/children} @re$view]\n    (vreset! re$view\n             (cond-> (assoc @re$view\n                       :view/prev-props prev-props\n                       :view/prev-children children)\n                     state (assoc :view/prev-state @state)))))\n\n(defn- wrap-methods\n  \"Wrap a component's methods, binding arguments and specifying lifecycle update behaviour.\"\n  [method-k f]\n  (if-not (fn? f)\n    f\n    (case method-k\n      (:view/initial-state\n        :view/state\n        :key\n        :constructor) f\n      :view/render (reactive-render f)\n      :view/will-receive-props\n      (fn [props]\n        (binding [*trigger-state-render* false]\n          (this-as this\n            (f this props))))\n      (:view/will-mount\n        :view/will-unmount\n        :view/will-receive-state\n        :view/will-update)\n      (fn []\n        (binding [*trigger-state-render* false]\n          (this-as this\n            (apply f this (:view/children @(gobj/get this \"re$view\"))))))\n      (:view/did-mount\n        :view/did-update)\n      (fn []\n        (this-as this\n          (apply f this (:view/children @(gobj/get this \"re$view\")))))\n      (fn [& args]\n        (this-as this\n          (apply f this args))))))\n\n(defn- init-state!\n  \"Bind a component to update whenever `state` changes.\n  `state` can be any type which implements IWatchable and IDeref.\"\n  [component state]\n  (vswap! (gobj/get component \"re$view\") assoc :view/state state :view/prev-state @state)\n  (add-watch state component (fn [_ _ old-state new-state]\n                               (when (not= old-state new-state)\n                                 (vswap! (gobj/get component \"re$view\") assoc :view/prev-state old-state)\n                                 (when-let [^js/Function will-receive (gobj/get component \"componentWillReceiveState\")]\n                                   (.call will-receive component))\n                                 (when (and *trigger-state-render* (if-let [^js/Function should-update (gobj/get component \"shouldComponentUpdate\")]\n                                                                     (.call should-update component)\n                                                                     true))\n                                   (force-update component)))))\n  state)\n\n(defn- ensure-state!\n  \"Lazily create and bind a state atom for `component`\"\n  [component]\n  (when-not (contains? @(aget component \"re$view\") :view/state)\n    (init-state! component (atom nil))))\n\n(extend-protocol ILookup\n  ;; for convenience, we allow reading keys from a component's props by looking them up\n  ;; directly on the component. this enables destructuring in lifecycle/render method arglist.\n  react/Component\n  (-lookup\n    ([this k]\n     (if (#{\"view\" \"spec\"} (namespace k))\n       (do (when (keyword-identical? k :view/state) (ensure-state! this))\n           (get @(gobj/get this \"re$view\") k))\n       (get-in @(gobj/get this \"re$view\") [:view/props k])))\n    ([this k not-found]\n     (if (#{\"view\" \"spec\"} (namespace k))\n       (do (when (keyword-identical? k :view/state) (ensure-state! this))\n           (get @(gobj/get this \"re$view\") k))\n       (get-in @(gobj/get this \"re$view\") [:view/props k] not-found)))))\n\n(defn- lifecycle-methods\n  \"Augment lifecycle methods with default behaviour.\"\n  [methods]\n  (->> (collect [{:view/will-receive-props (fn [this props]\n                                             ;; when a component receives new props, update internal state.\n                                             (let [{prev-props :view/props prev-children :view/children :as this} this]\n                                               (let [next-props (aget props \"props\")]\n                                                 (vswap! (gobj/get this \"re$view\")\n                                                         assoc\n                                                         :view/props next-props\n                                                         :view/prev-props prev-props\n                                                         :view/children (aget props \"children\")\n                                                         :view/prev-children prev-children))))\n                  :view/should-update      (fn [{:keys [view/props\n                                                        view/prev-props\n                                                        view/children\n                                                        view/prev-children\n                                                        view/state\n                                                        view/prev-state]}]\n                                             ;; default should-update behaviour compares props, children, and state.\n                                             (or (not= props prev-props)\n                                                 (not= children prev-children)\n                                                 (when-not (nil? state)\n                                                   (not= @state prev-state))))}\n                 methods\n                 {:view/will-unmount (fn [{:keys [view/state] :as this}]\n                                       ;; manually track unmount state, react doesn't do this anymore,\n                                       ;; otherwise our async render loop can't tell if a component is still on the page.\n                                       (gobj/set this \"unmounted\" true)\n                                       (when-let [un-sub (aget this \"reactiveUnsubscribe\")]\n                                         (un-sub))\n                                       (some-> state (remove-watch this)))\n                  :view/did-update   finish-lifecycle}])\n       (reduce-kv (fn [obj method-k method]\n                    (doto obj\n                      (gobj/set (get kmap method-k) (wrap-methods method-k method)))) #js {})))\n\n(defn swap-silently!\n  \"Swap a component's state atom without forcing an update (render)\"\n  [& args]\n  (binding [*trigger-state-render* false]\n    (apply swap! args)))\n\n(defn- init-component\n  \"Bind element methods and populate initial props for `component`.\"\n  [component $props]\n  (if $props\n    (let [props    (gobj/get $props \"props\")\n          children (gobj/get $props \"children\")]\n      (gobj/set component \"re$view\"\n                (volatile! (-> (gobj/get $props \"class\")\n                               (assoc :view/props (dissoc props :view/state)\n                                      :view/children children))))\n      (when-let [instance-keys (gobj/get $props \"instance\")]\n        (doseq [k (gobj/getKeys instance-keys)]\n          (let [f (gobj/get instance-keys k)]\n            (gobj/set component k (if (fn? f) (fn [& args]\n                                                (apply f component args)) f)))))\n      (when-let [state (or\n                         ;;;;;;;;;;;;;;;\n                         ;;\n                         ;; state can be provided in 1 of 3 ways, depends on whether you want to provide state\n                         ;; at time of component definition or element instantiation.\n                         ;;\n                         ;; 1. pass state as :view/state prop, when element is created:\n                         ;;    in this case it must be an atom-like thing that implements IWatchable/IDeref\n\n                         (get props :view/state)\n\n                         ;; 2. in the component's methods map, :view/initial-state can either be a static value or\n                         ;;    a function, which will be called w/ the component to return initial state.\n                         ;;    the initial value is wrapped in an atom.\n\n                         (when-let [initial-state (gobj/get component \"$initialState\")]\n                           (atom (cond-> initial-state (fn? initial-state) (apply component children))))\n\n                         ;; 3. in the component's methods map, can specify :view/state directly. Must be\n                         ;;    an atom-like thing.\n\n                         (when-let [watchable-state (gobj/get component \"$state\")]\n                           (cond-> watchable-state (fn? watchable-state) (apply component children))))]\n        (init-state! component state)))\n    (gobj/set component \"re$view\" (volatile! {})))\n  component)\n\n(defn- factory\n  \"Return a function which returns a React element when called with props and children.\"\n  [constructor]\n  (let [{:keys [class-keys\n                instance-keys] :as re$view$base} (gobj/get constructor \"re$view$base\")\n        {{defaults :props/defaults\n          :as      prop-spec} :spec/props\n         children-spec        :spec/children\n         :as                  class-keys} (-> class-keys\n                                              (update :spec/props vspec/normalize-props-map)\n                                              (update :spec/children vspec/resolve-spec-vector))\n        class-react-key (gobj/get constructor \"key\")\n        display-name    (gobj/get constructor \"displayName\")]\n    (doto (fn [props & children]\n            (let [[props children] (if (or (map? props)\n                                           (nil? props)) [props children] [nil (cons props children)])\n                  props (cond->> props defaults (merge defaults))\n                  key   (or (get props :key)\n                            (when class-react-key\n                              (cond (string? class-react-key) class-react-key\n                                    (keyword? class-react-key) (get props class-react-key)\n                                    (fn? class-react-key) (apply class-react-key (assoc props :view/children children) children)\n                                    :else (throw (js/Error \"Invalid key supplied to component\"))))\n                            display-name)]\n\n              (when (true? INSTRUMENT!)\n                (vspec/validate-props display-name prop-spec props)\n                (vspec/validate-children display-name children-spec children))\n\n              (react/createElement constructor #js {\"key\"      key\n                                                    \"ref\"      (get props :ref)\n                                                    \"props\"    (dissoc props :ref)\n                                                    \"children\" children\n                                                    \"instance\" instance-keys\n                                                    \"class\"    class-keys})))\n      (gobj/set \"re$view$base\" re$view$base))))\n\n(defn- ^:export class*\n  [{:keys [lifecycle-keys\n           react-keys] :as re-view-base}]\n  (let [prototype   (new react/Component)\n        _           (gobj/extend prototype (lifecycle-methods lifecycle-keys))\n        constructor (fn ReView [$props]\n                      (this-as this\n                        (init-component this $props)))\n        _           (gobj/set constructor \"prototype\" prototype)]\n    (doseq [[k v] (seq react-keys)]\n      (gobj/set constructor (v-util/camelCase k) v))\n    (doto constructor\n      (gobj/set \"re$view$base\" (assoc re-view-base :prototype prototype)))))\n\n(defn- ^:export view*\n  \"Returns a React component factory for supplied lifecycle methods.\n   Expects a single map of functions, or any number of key-function pairs,\n\n   (component {:render (fn [this] [:div ...])})\n\n   -or-\n\n   (component\n\n     :get-initial-state\n     (fn [this] {:apple-state :ripe})\n\n     :render\n     (fn [this] [:div ...]))\n\n   See other functions in this namespace for how to work with props and state.\n   Result of :render function is automatically passed through hiccup/element,\n   unless it is already a valid React element.\n   \"\n  [re-view-base]\n  (factory (class* re-view-base)))\n\n(defn prototype [class]\n  (:prototype (gobj/get class \"re$view$base\")))\n\n(defn render-to-dom\n  \"Render view to element, which should be a DOM element or id of element on page.\"\n  [component element]\n  (react-dom/render component (cond->> element\n                                       (string? element)\n                                       (.getElementById js/document))))\n\n(defn partial\n  \"Partially apply props and optional class-keys to base view. Props specified at runtime will overwrite those given here.\n  `re$view$base` property is retained on preserved.\"\n  ([base props]\n   (-> (fn [& args]\n         (let [[user-props & children] (cond->> args\n                                                (not (map? (first args))) (cons {}))]\n           (apply base (merge props user-props) children)))\n       (doto (gobj/set \"re$view$base\" (gobj/get base \"re$view$base\")))))\n  ([base base-overrides props]\n   (partial (view* (merge-with merge (gobj/get base \"re$view$base\") base-overrides)) props)))\n\n(defn pass-props\n  \"Remove prop keys handled by component, useful for passing down unhandled props to a child component.\n  By default, removes all keys listed in the component's :spec/props map. Set `:consume false` for props\n  that should be passed through.\"\n  [this]\n  (apply dissoc (get this :view/props) (get-in this [:spec/props :props/consumed])))\n\n(def is-react-element? v-util/is-react-element?)\n\n"]}