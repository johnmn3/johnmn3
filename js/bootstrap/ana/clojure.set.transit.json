["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/set.cljs","~:line",11,"~:column",8,"~:end-line",11,"~:end-column",19,"~:doc","Set operations such as union/intersection.","~:author","Rich Hickey"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$clojure.set","~:imports",null,"~:requires",["^ ","~$cljs.core","^A","~$goog","^B"],"~:seen",["^<",[]],"~:shadow/js-access-global",["^<",["Error"]],"~:uses",null,"~:defs",["^ ","~$union",["^ ","~:protocol-inline",null,"^2",["^ ","^3","clojure/set.cljs","^4",19,"^5",7,"^6",19,"^7",12,"~:arglists",["~#list",["~$quote",["^J",[[],["~$s1"],["^L","~$s2"],["^L","^M","~$&","~$sets"]]]]],"^8","Return a set that is the union of the input sets","~:top-fn",["^ ","~:variadic",true,"~:max-fixed-arity",2,"~:method-params",["^J",[[],["^L"],["^L","^M"]]],"^I",["^J",[[],["^L"],["^L","^M"],["^L","^M","~$&","^N"]]],"~:arglists-meta",["^J",[null,null,null,null]]]],"^=","~$clojure.set/union","^P",true,"^3","clojure/set.cljs","^7",12,"^O",["^ ","^P",true,"^Q",2,"^R",["^J",[[],["^L"],["^L","^M"]]],"^I",["^J",[[],["^L"],["^L","^M"],["^L","^M","~$&","^N"]]],"^S",["^J",[null,null,null,null]]],"^R",["^J",[[],["^L"],["^L","^M"]]],"~:protocol-impl",null,"^S",["^J",[null,null,null,null]],"^5",1,"^4",19,"^6",19,"^Q",2,"~:fn-var",true,"^I",["^J",[[],["^L"],["^L","^M"],["^L","^M","~$&","^N"]]],"^8","Return a set that is the union of the input sets"],"~$map-invert",["^ ","^H",null,"^2",["^ ","^3","clojure/set.cljs","^4",97,"^5",7,"^6",97,"^7",17,"^I",["^J",["^K",["^J",[["~$m"]]]]],"^8","Returns the map with the vals mapped to the keys."],"^=","~$clojure.set/map-invert","^P",false,"^3","clojure/set.cljs","^7",17,"^R",["^J",[["~$m"]]],"^U",null,"^S",["^J",[null,null]],"^5",1,"^4",97,"^6",97,"^Q",1,"^V",true,"^I",["^J",["^K",["^J",[["~$m"]]]]],"^8","Returns the map with the vals mapped to the keys."],"~$join",["^ ","^H",null,"^2",["^ ","^3","clojure/set.cljs","^4",101,"^5",7,"^6",101,"^7",11,"^I",["^J",["^K",["^J",[["~$xrel","~$yrel"],["^Z","^[","~$km"]]]]],"^8","When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys.","^O",["^ ","^P",false,"^Q",3,"^R",["^J",[["^Z","^["],["^Z","^[","^10"]]],"^I",["^J",[["^Z","^["],["^Z","^[","^10"]]],"^S",["^J",[null,null]]]],"^=","~$clojure.set/join","^P",false,"^3","clojure/set.cljs","^7",11,"^O",["^ ","^P",false,"^Q",3,"^R",["^J",[["^Z","^["],["^Z","^[","^10"]]],"^I",["^J",[["^Z","^["],["^Z","^[","^10"]]],"^S",["^J",[null,null]]],"^R",["^J",[["^Z","^["],["^Z","^[","^10"]]],"^U",null,"^S",["^J",[null,null]],"^5",1,"^4",101,"^6",101,"^Q",3,"^V",true,"^I",["^J",[["^Z","^["],["^Z","^[","^10"]]],"^8","When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys."],"~$select",["^ ","^H",null,"^2",["^ ","^3","clojure/set.cljs","^4",61,"^5",7,"^6",61,"^7",13,"^I",["^J",["^K",["^J",[["~$pred","~$xset"]]]]],"^8","Returns a set of the elements for which pred is true"],"^=","~$clojure.set/select","^P",false,"^3","clojure/set.cljs","^7",13,"^R",["^J",[["^13","^14"]]],"^U",null,"^S",["^J",[null,null]],"^5",1,"^4",61,"^6",61,"^Q",2,"^V",true,"^I",["^J",["^K",["^J",[["^13","^14"]]]]],"^8","Returns a set of the elements for which pred is true"],"~$intersection",["^ ","^H",null,"^2",["^ ","^3","clojure/set.cljs","^4",31,"^5",7,"^6",31,"^7",19,"^I",["^J",["^K",["^J",[["^L"],["^L","^M"],["^L","^M","~$&","^N"]]]]],"^8","Return a set that is the intersection of the input sets","^O",["^ ","^P",true,"^Q",2,"^R",["^J",[["^L"],["^L","^M"]]],"^I",["^J",[["^L"],["^L","^M"],["^L","^M","~$&","^N"]]],"^S",["^J",[null,null,null]]]],"^=","~$clojure.set/intersection","^P",true,"^3","clojure/set.cljs","^7",19,"^O",["^ ","^P",true,"^Q",2,"^R",["^J",[["^L"],["^L","^M"]]],"^I",["^J",[["^L"],["^L","^M"],["^L","^M","~$&","^N"]]],"^S",["^J",[null,null,null]]],"^R",["^J",[["^L"],["^L","^M"]]],"^U",null,"^S",["^J",[null,null,null]],"^5",1,"^4",31,"^6",31,"^Q",2,"^V",true,"^I",["^J",[["^L"],["^L","^M"],["^L","^M","~$&","^N"]]],"^8","Return a set that is the intersection of the input sets"],"~$superset?",["^ ","^H",null,"^2",["^ ","^3","clojure/set.cljs","^4",137,"^5",7,"^6",137,"^7",16,"^I",["^J",["^K",["^J",[["~$set1","~$set2"]]]]],"^8","Is set1 a superset of set2?"],"^=","~$clojure.set/superset?","^P",false,"^3","clojure/set.cljs","^7",16,"^R",["^J",[["^19","^1:"]]],"^U",null,"^S",["^J",[null,null]],"^5",1,"^4",137,"^6",137,"^Q",2,"^V",true,"^I",["^J",["^K",["^J",[["^19","^1:"]]]]],"^8","Is set1 a superset of set2?"],"~$index",["^ ","^H",null,"^2",["^ ","^3","clojure/set.cljs","^4",87,"^5",7,"^6",87,"^7",12,"^I",["^J",["^K",["^J",[["^Z","~$ks"]]]]],"^8","Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks."],"^=","~$clojure.set/index","^P",false,"^3","clojure/set.cljs","^7",12,"^R",["^J",[["^Z","^1="]]],"^U",null,"^S",["^J",[null,null]],"^5",1,"^4",87,"^6",87,"^Q",2,"^V",true,"^I",["^J",["^K",["^J",[["^Z","^1="]]]]],"^8","Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks."],"~$bubble-max-key",["^ ","^H",null,"^2",["^ ","^3","clojure/set.cljs","^4",13,"^5",8,"^6",13,"^7",22,"~:private",true,"^I",["^J",["^K",["^J",[["~$k","~$coll"]]]]]],"^1@",true,"^=","~$clojure.set/bubble-max-key","^P",false,"^3","clojure/set.cljs","^7",22,"^R",["^J",[["~$k","^1A"]]],"^U",null,"^S",["^J",[null,null]],"^5",1,"^4",13,"^6",13,"^Q",2,"^V",true,"^I",["^J",["^K",["^J",[["~$k","^1A"]]]]]],"~$subset?",["^ ","^H",null,"^2",["^ ","^3","clojure/set.cljs","^4",131,"^5",7,"^6",131,"^7",14,"^I",["^J",["^K",["^J",[["^19","^1:"]]]]],"^8","Is set1 a subset of set2?"],"^=","~$clojure.set/subset?","^P",false,"^3","clojure/set.cljs","^7",14,"^R",["^J",[["^19","^1:"]]],"^U",null,"^S",["^J",[null,null]],"^5",1,"^4",131,"^6",131,"^Q",2,"^V",true,"^I",["^J",["^K",["^J",[["^19","^1:"]]]]],"^8","Is set1 a subset of set2?"],"~$rename",["^ ","^H",null,"^2",["^ ","^3","clojure/set.cljs","^4",82,"^5",7,"^6",82,"^7",13,"^I",["^J",["^K",["^J",[["^Z","~$kmap"]]]]],"^8","Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap"],"^=","~$clojure.set/rename","^P",false,"^3","clojure/set.cljs","^7",13,"^R",["^J",[["^Z","^1F"]]],"^U",null,"^S",["^J",[null,null]],"^5",1,"^4",82,"^6",82,"^Q",2,"^V",true,"^I",["^J",["^K",["^J",[["^Z","^1F"]]]]],"^8","Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap"],"~$rename-keys",["^ ","^H",null,"^2",["^ ","^3","clojure/set.cljs","^4",72,"^5",7,"^6",72,"^7",18,"^I",["^J",["^K",["^J",[["~$map","^1F"]]]]],"^8","Returns the map with the keys in kmap renamed to the vals in kmap"],"^=","~$clojure.set/rename-keys","^P",false,"^3","clojure/set.cljs","^7",18,"^R",["^J",[["^1I","^1F"]]],"^U",null,"^S",["^J",[null,null]],"^5",1,"^4",72,"^6",72,"^Q",2,"^V",true,"^I",["^J",["^K",["^J",[["^1I","^1F"]]]]],"^8","Returns the map with the keys in kmap renamed to the vals in kmap"],"~$project",["^ ","^H",null,"^2",["^ ","^3","clojure/set.cljs","^4",67,"^5",7,"^6",67,"^7",14,"^I",["^J",["^K",["^J",[["^Z","^1="]]]]],"^8","Returns a rel of the elements of xrel with only the keys in ks"],"^=","~$clojure.set/project","^P",false,"^3","clojure/set.cljs","^7",14,"^R",["^J",[["^Z","^1="]]],"^U",null,"^S",["^J",[null,null]],"^5",1,"^4",67,"^6",67,"^Q",2,"^V",true,"^I",["^J",["^K",["^J",[["^Z","^1="]]]]],"^8","Returns a rel of the elements of xrel with only the keys in ks"],"~$difference",["^ ","^H",null,"^2",["^ ","^3","clojure/set.cljs","^4",46,"^5",7,"^6",46,"^7",17,"^I",["^J",["^K",["^J",[["^L"],["^L","^M"],["^L","^M","~$&","^N"]]]]],"^8","Return a set that is the first set without elements of the remaining sets","^O",["^ ","^P",true,"^Q",2,"^R",["^J",[["^L"],["^L","^M"]]],"^I",["^J",[["^L"],["^L","^M"],["^L","^M","~$&","^N"]]],"^S",["^J",[null,null,null]]]],"^=","~$clojure.set/difference","^P",true,"^3","clojure/set.cljs","^7",17,"^O",["^ ","^P",true,"^Q",2,"^R",["^J",[["^L"],["^L","^M"]]],"^I",["^J",[["^L"],["^L","^M"],["^L","^M","~$&","^N"]]],"^S",["^J",[null,null,null]]],"^R",["^J",[["^L"],["^L","^M"]]],"^U",null,"^S",["^J",[null,null,null]],"^5",1,"^4",46,"^6",46,"^Q",2,"^V",true,"^I",["^J",[["^L"],["^L","^M"],["^L","^M","~$&","^N"]]],"^8","Return a set that is the first set without elements of the remaining sets"]],"~:require-macros",["^ ","^A","^A"],"~:flags",["^ "],"~:js-deps",["^ "],"~:deps",["^B","^A"]]