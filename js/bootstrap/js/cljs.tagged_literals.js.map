{"version":3,"file":"cljs.tagged_literals.js","sources":["cljs/tagged_literals.cljc"],"mappings":";;;4EAaGE,5EADH,kCAAA,lCAAMW;AAAN,AAEE,GAAU,AAACG,wBAAQd;AAAnB;AACE,AADF,MAIa,KAAAM,MAAA;;;AAEb,YAAAF,eAAA,KAAA,0EAAA,KAAAA,eAAA,KAAA,8GAAA,KAAAA,eAAA,UAAA,KAAA,IAAA,OAAA,IAAA,OAAA,IAAA,pCAAuDJ;;AAatD,iCAAA,jCAAMU,0EACHV;AADH,AAEE,GAAU,OAASA;AAAnB;AACE,MAAO,KAAAM,MAAA,jBADT;;;IAGE,OAACW,eAAKjB,1BADR,IAAA;oBAEkBE,JAFlB,QAAAwB;AAGI,MAAO,KAAApB,MAAW,AAAGJ,jBAHzB;;0EAiBCF,1EADH,iCAAA,jCAAMS;AAEJ,GAAU,OAAST,VAFrB;AAEE;AAAA,AACE,MAAO,KAAAM,MAAA;;;IAEP,OAACD,sBAAiBL,jCADpB,IAAA;oBAEkBE,JAFlB,QAAAW;AAGI,MAAO,KAAAP,MAAW,AAAGJ,jBAHzB;;AAKL,mDAAA,nDAAMD,8GAAuBF;4EAGlB,2BAAA,1BAAM,AAACD,oBAAUC,jGAH5B,oCAEM,EAAK,cAAAa,bAAUb,vCADnB,SAAI,OAASA;;AAIf,AAAA;;;;;;;AAAA;AAAA,AAAA,wCAAA,xCAASwB;AAAT,AAAA,0FAAA;;;AAAA,AAAA,8CAAA,9CAASA;;AAAT,AAAA,iDAAA,jDAASA;;AAAT,AAAA,sDAAA,WAAAJ,mBAAAC,qBAAAC,zGAASE;AAAT,AAAA,OAAAD,iBAAAF,qBAAA;;;AAAA;;;oCAAA,pCAASI,gFAASC;AAAlB,AAAA,YAAAF,6BAAkBE;;;sEAGfzB,tEADH,+BAAA,/BAAMO,AAFGgB;AAET,AAEE,GAAU,EAAI,AAACT,wBAAQd,WAAM,AAACQ,qBAAKR;AAAnC;AACE,MAGW,KAAAM,MAAA,jBAJb;;;AAMA,GAAU,EAAI,EAAK,AAACE,qBAAKR,YACX,AAACe,uBAAOd,iDAAsB,AAACe,eAAKhB;AADlD;AAAA,MAKa,KAAAM,MAAA,jBAHX;;;AAKF,YAAAiB,6BAAUvB;;AAEZ,AAAeG,ygBAMHI,pFADAE,zFADAC,zFADAC,9MAFV,uGAAA,2CAAA,4FAAA,wFAAA,yFAAA,/ZAACO","names":["cljs.core/namespace","k","form","cljs.tagged-literals/valid-js-literal-key?","e","cljs.tagged-literals/*cljs-data-readers*","cljs.core/List","cljs.reader/read-date","js/Error","cljs.tagged-literals/read-js","cljs.core/map?","cljs.tagged-literals/read-inst","cljs.tagged-literals/read-uuid","cljs.tagged-literals/read-queue","cljs.core/Keyword","e18485","cljs.core/vector?","cljs.core/every?","cljs.core/keys","cljs.core/uuid","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","this__4192__auto__","writer__4193__auto__","opt__4194__auto__","cljs.core/-write","cljs.tagged-literals/JSValue","cljs.tagged-literals/->JSValue","val","e18484"],"sourcesContent":[";; Copyright (c) Rich Hickey. All rights reserved.\n;; The use and distribution terms for this software are covered by the\n;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;; which can be found in the file epl-v10.html at the root of this distribution.\n;; By using this software in any fashion, you are agreeing to be bound by\n;; the terms of this license.\n;; You must not remove this notice, or any other, from this software.\n\n(ns cljs.tagged-literals\n  #?(:clj  (:require [clojure.instant :as inst])\n     :cljs (:require [cljs.reader :as reader])))\n\n(defn read-queue\n  [form]\n  (when-not (vector? form)\n    (throw\n      #?(:clj  (RuntimeException.\n                 \"Queue literal expects a vector for its elements.\")\n         :cljs (js/Error.\n                 \"Queue literal expects a vector for its elements.\"))))\n  (list 'cljs.core/into 'cljs.core.PersistentQueue.EMPTY form))\n\n#?(:clj\n   (defn read-uuid\n     [form]\n     (when-not (string? form)\n       (throw (RuntimeException. \"UUID literal expects a string as its representation.\")))\n     (try\n       (java.util.UUID/fromString form)\n       (catch Throwable e\n         (throw (RuntimeException. (.getMessage e)))))))\n\n#?(:cljs\n   (defn read-uuid\n     [form]\n     (when-not (string? form)\n       (throw (js/Error. \"UUID literal expects a string as its representation.\")))\n     (try\n       (uuid form)\n       (catch :default e\n         (throw (js/Error. (. e -message)))))))\n\n#?(:clj\n   (defn read-inst\n     [form]\n     (when-not (string? form)\n       (throw (RuntimeException. \"Instance literal expects a string for its timestamp.\")))\n     (try\n       (inst/read-instant-date form)\n       (catch Throwable e\n         (throw (RuntimeException. (.getMessage e)))))))\n\n#?(:cljs\n   (defn read-inst\n     [form]\n     (when-not (string? form)\n       (throw (js/Error. \"Instance literal expects a string for its timestamp.\")))\n     (try\n       (reader/read-date form)\n       (catch :default e\n         (throw (js/Error. (. e -message)))))))\n\n(defn valid-js-literal-key? [k]\n  (or (string? k)\n      (and (keyword? k)\n           (nil? (namespace k)))))\n\n(deftype JSValue [val])\n\n(defn read-js\n  [form]\n  (when-not (or (vector? form) (map? form))\n    (throw\n      #?(:clj  (RuntimeException.\n                 \"JavaScript literal must use map or vector notation\")\n         :cljs (js/Error.\n                 \"JavaScript literal must use map or vector notation\"))))\n  (when-not (or (not (map? form))\n                (every? valid-js-literal-key? (keys form)))\n    (throw\n      #?(:clj  (RuntimeException.\n                 \"JavaScript literal keys must be strings or unqualified keywords\")\n         :cljs (js/Error.\n                 \"JavaScript literal keys must be strings or unqualified keywords\"))))\n  (JSValue. form))\n\n(def ^:dynamic *cljs-data-readers*\n  (merge ;; assumes we can read all data_readers\n    #?(:clj *data-readers*)\n    {'queue read-queue\n     'uuid  read-uuid\n     'inst  read-inst\n     'js    read-js}))\n"]}