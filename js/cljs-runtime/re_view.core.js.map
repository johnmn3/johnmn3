{"version":3,"file":"re_view.core.js","sources":["re_view/core.cljs"],"mappings":"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","names":["re-view.core/schedule!","re-view.render-loop/schedule!","re-view.core/force-update","re-view.render-loop/force-update","re-view.core/force-update!","re-view.render-loop/force-update!","re-view.core/flush!","re-view.render-loop/flush!","re-view.core/*trigger-state-render*","goog/define","re-view.core/dom-node","component","js/module$node_modules$react_dom$index.findDOMNode","re-view.core/mounted?","goog.object/get","re-view.core/wrap-props","props","tag","G__33655","and__3938__auto__","cljs.core/contains?","fexpr__33658","cljs.core.update.cljs$core$IFn$_invoke$arity$3","re-view.render-loop/apply-sync!","re-view.core/reactive-render","f","this","map__33661","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","re$view","patterns","value","*pattern-log*33662","re-db.patterns/*pattern-log*","map__33663","*db-log*33664","re-db.core/*db-log*","*prevent-notify*33665","re-db.core/*prevent-notify*","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","value__15667__auto__","cljs.core/deref","value__16429__auto__","tx-report__16430__auto__","patterns__16431__auto__","re-db.core/notify-listeners","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","prev-patterns","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","temp__5457__auto__","un-sub","G__33673","G__33674","G__33675","goog.object/set","cljs.core/empty?","G__33677","G__33678","re-db.d/listen","cljs.core/-vreset!","cljs.core/-deref","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","re-view.core/kmap","var_args","args__4534__auto__","len__4531__auto__","i__4532__auto__","argseq__4535__auto__","cljs.core/IndexedSeq","re-view.core/compseq","seq33699","self__4519__auto__","cljs.core/seq","fns","args","seq__33710","chunk__33711","count__33712","i__33713","cljs.core/chunked-seq?","c__4351__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","re-view.core/collect","methods","cljs.core/merge-with","a","b","cljs.core/vector?","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core/reduce-kv","m","method-k","G__33737","cljs.core/keyword-identical?","cljs.core/last","re-view.core/finish-lifecycle","map__33739","prev-props","state","children","cljs.core/vreset!","G__33748","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","re-view.core/wrap-methods","cljs.core/fn?","G__33749","cljs.core/Keyword","*trigger-state-render*33753","*trigger-state-render*33757","re-view.core/init-state!","cljs.core/add-watch","_","old-state","new-state","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","will-receive","temp__5455__auto__","should-update","re-view.core/ensure-state!","js/module$node_modules$react$index.Component","k","G__33804","fexpr__33803","cljs.core/namespace","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","not-found","G__33807","fexpr__33806","cljs.core.get_in.cljs$core$IFn$_invoke$arity$3","re-view.core/lifecycle-methods","map__33822","prev-children","next-props","p__33824","map__33825","prev-state","or__3949__auto__","p__33828","map__33829","G__33831","cljs.core/remove-watch","obj","method","G__33814","G__33815","G__33816","G__33817","re-view.core/swap-silently!","seq33840","*trigger-state-render*33841","cljs.core/swap!","re-view.core/init-component","$props","G__33846","G__33847","G__33848","cljs.core/volatile!","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","instance-keys","seq__33849","chunk__33850","count__33851","i__33852","goog.object/getKeys","G__33853","G__33854","G__33855","G__33856","G__33857","G__33858","initial-state","G__33862","watchable-state","G__33863","G__33864","G__33865","G__33866","re-view.core/factory","constructor","map__33922","map__33923","map__33924","class-keys","re$view$base","defaults","prop-spec","children-spec","re-view.view-spec/normalize-props-map","re-view.view-spec/resolve-spec-vector","class-react-key","display-name","G__33928","vec__33929","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core/map?","cljs.core/cons","G__33932","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","key","js/Error","re-view.core/INSTRUMENT!","re-view.view-spec/validate-props","re-view.view-spec/validate-children","G__33941","G__33942","js/module$node_modules$react$index.createElement","p__33960","map__33961","re-view.core/class*","lifecycle-keys","react-keys","re-view-base","prototype","G__33963","G__33964","goog.object/extend","seq__33965","chunk__33966","count__33967","i__33968","vec__33969","vec__33975","v","G__33972","G__33973","G__33974","G__33980","G__33981","G__33982","re-view.util/camelCase","G__33983","G__33984","G__33985","G__33986","re-view.core/view*","re-view.core/prototype","class","re-view.core/render-to-dom","element","G__34041","G__34042","js/module$node_modules$react_dom$index.render","G__34043","js/document","G__34049","re-view.core/partial","base","vec__34052","seq__34053","first__34054","user-props","G__34055","G__34051","G__34056","G__34057","G__34058","base-overrides","re_view.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic","cljs.core/merge","re-view.core/pass-props","cljs.core/dissoc","re-view.core/is-react-element?","re-view.util/is-react-element?"],"sourcesContent":["(ns re-view.core\n  (:refer-clojure :exclude [partial])\n  (:require-macros [re-view.core])\n  (:require [re-db.d :as d]\n            [re-db.patterns :as patterns :include-macros true]\n            [re-view.render-loop :as render-loop]\n            [re-view.hiccup.core :as hiccup]\n            [goog.object :as gobj]\n            [re-view.util :as v-util]\n            [re-view.view-spec :as vspec]\n            [\"react-dom\" :as react-dom]\n            [\"react\" :as react]))\n\n(def schedule! render-loop/schedule!)\n(def force-update render-loop/force-update)\n(def force-update! render-loop/force-update!)\n(def flush! render-loop/flush!)\n\n(def ^:dynamic *trigger-state-render* true)\n\n(goog-define INSTRUMENT! false)\n\n(defn dom-node\n  \"Return DOM node for component\"\n  [component]\n  (react-dom/findDOMNode component))\n\n(defn mounted?\n  \"Returns true if component is still mounted to the DOM.\n  This is necessary to avoid updating unmounted components.\"\n  [component]\n  (not (true? (gobj/get component \"unmounted\"))))\n\n(defn- wrap-props\n  \"Wraps :on-change handlers of text inputs to apply changes synchronously.\"\n  [props tag]\n  (cond-> props\n          (and (contains? props :on-change)\n               (#{\"input\" \"textarea\"} tag)) (update :on-change render-loop/apply-sync!)))\n\n(defn reactive-render\n  \"Wrap a render function to force-update the component when re-db patterns accessed during evaluation are invalidated.\"\n  [f]\n  (fn []\n    (this-as this\n      (let [re$view       (gobj/get this \"re$view\")\n            {:keys [patterns value]} (patterns/capture-patterns (apply f this (:view/children @re$view)))\n\n            prev-patterns (:view/re-db.patterns @re$view)]\n        (when-not (= prev-patterns patterns)\n          (when-let [un-sub (gobj/get this \"reactiveUnsubscribe\")] (un-sub))\n\n          (gobj/set this \"reactiveUnsubscribe\" (when-not (empty? patterns)\n                                                 (d/listen patterns #(force-update this))))\n          (vswap! re$view assoc :view/re-db.patterns patterns))\n        value))))\n\n(def ^:private kmap\n  \"Mapping of methods-map keys to React lifecycle keys.\"\n  {:constructor             \"constructor\"\n   :view/initial-state      \"$initialState\"\n   :view/state              \"$state\"\n   :view/did-catch          \"componentDidCatch\"\n   :view/will-mount         \"componentWillMount\"\n   :view/did-mount          \"componentDidMount\"\n   :view/will-receive-props \"componentWillReceiveProps\"\n   :view/will-receive-state \"componentWillReceiveState\"\n   :view/should-update      \"shouldComponentUpdate\"\n   :view/will-update        \"componentWillUpdate\"\n   :view/did-update         \"componentDidUpdate\"\n   :view/will-unmount       \"componentWillUnmount\"\n   :view/render             \"render\"})\n\n(defn compseq\n  \"Compose fns to execute sequentially over the same arguments\"\n  [& fns]\n  (fn [& args]\n    (doseq [f fns]\n      (apply f args))))\n\n(defn- collect\n  \"Merge a list of method maps. Multiple lifecycle methods execute sequentially. Only the last-defined :should-update function is applied.\"\n  [methods]\n  (let [methods (apply merge-with (fn [a b] (if (vector? a) (conj a b) [a b])) methods)]\n    (reduce-kv (fn [m method-k fns]\n                 (cond-> m\n                         (vector? fns) (assoc method-k (if (keyword-identical? method-k :view/should-update)\n                                                         (last fns)\n                                                         (apply compseq fns))))) methods methods)))\n\n(defn finish-lifecycle [this]\n  \"after update, update prev-props and prev-state\"\n  (let [re$view (aget this \"re$view\")\n        {prev-props :view/props\n         state      :view/state\n         children   :view/children} @re$view]\n    (vreset! re$view\n             (cond-> (assoc @re$view\n                       :view/prev-props prev-props\n                       :view/prev-children children)\n                     state (assoc :view/prev-state @state)))))\n\n(defn- wrap-methods\n  \"Wrap a component's methods, binding arguments and specifying lifecycle update behaviour.\"\n  [method-k f]\n  (if-not (fn? f)\n    f\n    (case method-k\n      (:view/initial-state\n        :view/state\n        :key\n        :constructor) f\n      :view/render (reactive-render f)\n      :view/will-receive-props\n      (fn [props]\n        (binding [*trigger-state-render* false]\n          (this-as this\n            (f this props))))\n      (:view/will-mount\n        :view/will-unmount\n        :view/will-receive-state\n        :view/will-update)\n      (fn []\n        (binding [*trigger-state-render* false]\n          (this-as this\n            (apply f this (:view/children @(gobj/get this \"re$view\"))))))\n      (:view/did-mount\n        :view/did-update)\n      (fn []\n        (this-as this\n          (apply f this (:view/children @(gobj/get this \"re$view\")))))\n      (fn [& args]\n        (this-as this\n          (apply f this args))))))\n\n(defn- init-state!\n  \"Bind a component to update whenever `state` changes.\n  `state` can be any type which implements IWatchable and IDeref.\"\n  [component state]\n  (vswap! (gobj/get component \"re$view\") assoc :view/state state :view/prev-state @state)\n  (add-watch state component (fn [_ _ old-state new-state]\n                               (when (not= old-state new-state)\n                                 (vswap! (gobj/get component \"re$view\") assoc :view/prev-state old-state)\n                                 (when-let [^js/Function will-receive (gobj/get component \"componentWillReceiveState\")]\n                                   (.call will-receive component))\n                                 (when (and *trigger-state-render* (if-let [^js/Function should-update (gobj/get component \"shouldComponentUpdate\")]\n                                                                     (.call should-update component)\n                                                                     true))\n                                   (force-update component)))))\n  state)\n\n(defn- ensure-state!\n  \"Lazily create and bind a state atom for `component`\"\n  [component]\n  (when-not (contains? @(aget component \"re$view\") :view/state)\n    (init-state! component (atom nil))))\n\n(extend-protocol ILookup\n  ;; for convenience, we allow reading keys from a component's props by looking them up\n  ;; directly on the component. this enables destructuring in lifecycle/render method arglist.\n  react/Component\n  (-lookup\n    ([this k]\n     (if (#{\"view\" \"spec\"} (namespace k))\n       (do (when (keyword-identical? k :view/state) (ensure-state! this))\n           (get @(gobj/get this \"re$view\") k))\n       (get-in @(gobj/get this \"re$view\") [:view/props k])))\n    ([this k not-found]\n     (if (#{\"view\" \"spec\"} (namespace k))\n       (do (when (keyword-identical? k :view/state) (ensure-state! this))\n           (get @(gobj/get this \"re$view\") k))\n       (get-in @(gobj/get this \"re$view\") [:view/props k] not-found)))))\n\n(defn- lifecycle-methods\n  \"Augment lifecycle methods with default behaviour.\"\n  [methods]\n  (->> (collect [{:view/will-receive-props (fn [this props]\n                                             ;; when a component receives new props, update internal state.\n                                             (let [{prev-props :view/props prev-children :view/children :as this} this]\n                                               (let [next-props (aget props \"props\")]\n                                                 (vswap! (gobj/get this \"re$view\")\n                                                         assoc\n                                                         :view/props next-props\n                                                         :view/prev-props prev-props\n                                                         :view/children (aget props \"children\")\n                                                         :view/prev-children prev-children))))\n                  :view/should-update      (fn [{:keys [view/props\n                                                        view/prev-props\n                                                        view/children\n                                                        view/prev-children\n                                                        view/state\n                                                        view/prev-state]}]\n                                             ;; default should-update behaviour compares props, children, and state.\n                                             (or (not= props prev-props)\n                                                 (not= children prev-children)\n                                                 (when-not (nil? state)\n                                                   (not= @state prev-state))))}\n                 methods\n                 {:view/will-unmount (fn [{:keys [view/state] :as this}]\n                                       ;; manually track unmount state, react doesn't do this anymore,\n                                       ;; otherwise our async render loop can't tell if a component is still on the page.\n                                       (gobj/set this \"unmounted\" true)\n                                       (when-let [un-sub (aget this \"reactiveUnsubscribe\")]\n                                         (un-sub))\n                                       (some-> state (remove-watch this)))\n                  :view/did-update   finish-lifecycle}])\n       (reduce-kv (fn [obj method-k method]\n                    (doto obj\n                      (gobj/set (get kmap method-k) (wrap-methods method-k method)))) #js {})))\n\n(defn swap-silently!\n  \"Swap a component's state atom without forcing an update (render)\"\n  [& args]\n  (binding [*trigger-state-render* false]\n    (apply swap! args)))\n\n(defn- init-component\n  \"Bind element methods and populate initial props for `component`.\"\n  [component $props]\n  (if $props\n    (let [props    (gobj/get $props \"props\")\n          children (gobj/get $props \"children\")]\n      (gobj/set component \"re$view\"\n                (volatile! (-> (gobj/get $props \"class\")\n                               (assoc :view/props (dissoc props :view/state)\n                                      :view/children children))))\n      (when-let [instance-keys (gobj/get $props \"instance\")]\n        (doseq [k (gobj/getKeys instance-keys)]\n          (let [f (gobj/get instance-keys k)]\n            (gobj/set component k (if (fn? f) (fn [& args]\n                                                (apply f component args)) f)))))\n      (when-let [state (or\n                         ;;;;;;;;;;;;;;;\n                         ;;\n                         ;; state can be provided in 1 of 3 ways, depends on whether you want to provide state\n                         ;; at time of component definition or element instantiation.\n                         ;;\n                         ;; 1. pass state as :view/state prop, when element is created:\n                         ;;    in this case it must be an atom-like thing that implements IWatchable/IDeref\n\n                         (get props :view/state)\n\n                         ;; 2. in the component's methods map, :view/initial-state can either be a static value or\n                         ;;    a function, which will be called w/ the component to return initial state.\n                         ;;    the initial value is wrapped in an atom.\n\n                         (when-let [initial-state (gobj/get component \"$initialState\")]\n                           (atom (cond-> initial-state (fn? initial-state) (apply component children))))\n\n                         ;; 3. in the component's methods map, can specify :view/state directly. Must be\n                         ;;    an atom-like thing.\n\n                         (when-let [watchable-state (gobj/get component \"$state\")]\n                           (cond-> watchable-state (fn? watchable-state) (apply component children))))]\n        (init-state! component state)))\n    (gobj/set component \"re$view\" (volatile! {})))\n  component)\n\n(defn- factory\n  \"Return a function which returns a React element when called with props and children.\"\n  [constructor]\n  (let [{:keys [class-keys\n                instance-keys] :as re$view$base} (gobj/get constructor \"re$view$base\")\n        {{defaults :props/defaults\n          :as      prop-spec} :spec/props\n         children-spec        :spec/children\n         :as                  class-keys} (-> class-keys\n                                              (update :spec/props vspec/normalize-props-map)\n                                              (update :spec/children vspec/resolve-spec-vector))\n        class-react-key (gobj/get constructor \"key\")\n        display-name    (gobj/get constructor \"displayName\")]\n    (doto (fn [props & children]\n            (let [[props children] (if (or (map? props)\n                                           (nil? props)) [props children] [nil (cons props children)])\n                  props (cond->> props defaults (merge defaults))\n                  key   (or (get props :key)\n                            (when class-react-key\n                              (cond (string? class-react-key) class-react-key\n                                    (keyword? class-react-key) (get props class-react-key)\n                                    (fn? class-react-key) (apply class-react-key (assoc props :view/children children) children)\n                                    :else (throw (js/Error \"Invalid key supplied to component\"))))\n                            display-name)]\n\n              (when (true? INSTRUMENT!)\n                (vspec/validate-props display-name prop-spec props)\n                (vspec/validate-children display-name children-spec children))\n\n              (react/createElement constructor #js {\"key\"      key\n                                                    \"ref\"      (get props :ref)\n                                                    \"props\"    (dissoc props :ref)\n                                                    \"children\" children\n                                                    \"instance\" instance-keys\n                                                    \"class\"    class-keys})))\n      (gobj/set \"re$view$base\" re$view$base))))\n\n(defn- ^:export class*\n  [{:keys [lifecycle-keys\n           react-keys] :as re-view-base}]\n  (let [prototype   (new react/Component)\n        _           (gobj/extend prototype (lifecycle-methods lifecycle-keys))\n        constructor (fn ReView [$props]\n                      (this-as this\n                        (init-component this $props)))\n        _           (gobj/set constructor \"prototype\" prototype)]\n    (doseq [[k v] (seq react-keys)]\n      (gobj/set constructor (v-util/camelCase k) v))\n    (doto constructor\n      (gobj/set \"re$view$base\" (assoc re-view-base :prototype prototype)))))\n\n(defn- ^:export view*\n  \"Returns a React component factory for supplied lifecycle methods.\n   Expects a single map of functions, or any number of key-function pairs,\n\n   (component {:render (fn [this] [:div ...])})\n\n   -or-\n\n   (component\n\n     :get-initial-state\n     (fn [this] {:apple-state :ripe})\n\n     :render\n     (fn [this] [:div ...]))\n\n   See other functions in this namespace for how to work with props and state.\n   Result of :render function is automatically passed through hiccup/element,\n   unless it is already a valid React element.\n   \"\n  [re-view-base]\n  (factory (class* re-view-base)))\n\n(defn prototype [class]\n  (:prototype (gobj/get class \"re$view$base\")))\n\n(defn render-to-dom\n  \"Render view to element, which should be a DOM element or id of element on page.\"\n  [component element]\n  (react-dom/render component (cond->> element\n                                       (string? element)\n                                       (.getElementById js/document))))\n\n(defn partial\n  \"Partially apply props and optional class-keys to base view. Props specified at runtime will overwrite those given here.\n  `re$view$base` property is retained on preserved.\"\n  ([base props]\n   (-> (fn [& args]\n         (let [[user-props & children] (cond->> args\n                                                (not (map? (first args))) (cons {}))]\n           (apply base (merge props user-props) children)))\n       (doto (gobj/set \"re$view$base\" (gobj/get base \"re$view$base\")))))\n  ([base base-overrides props]\n   (partial (view* (merge-with merge (gobj/get base \"re$view$base\") base-overrides)) props)))\n\n(defn pass-props\n  \"Remove prop keys handled by component, useful for passing down unhandled props to a child component.\n  By default, removes all keys listed in the component's :spec/props map. Set `:consume false` for props\n  that should be passed through.\"\n  [this]\n  (apply dissoc (get this :view/props) (get-in this [:spec/props :props/consumed])))\n\n(def is-react-element? v-util/is-react-element?)\n\n"]}