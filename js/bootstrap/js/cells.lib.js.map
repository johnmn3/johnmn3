{"version":3,"file":"cells.lib.js","sources":["cells/lib.cljs"],"mappings":"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","names":["cljs.core/not","xhrio","f","initial-value","cljs.core/deref","stop?","js/window","interval-f","url","format","query","cljs.core/reset!","self","cells.cell/status!","cells.eval-context/on-dispose","cljs.core/vreset!","cells.lib/query-string","G__16095","js/JSON.parse","cells.cell/status","cljs.core/identity","cells.cell.status_BANG_.cljs$core$IFn$_invoke$arity$2","clear-key","js/setInterval","n","var_args","G__16137","cells.lib/timeout","js/Error","cells.lib/unique-id","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core/str","cells.util/unique-id","cells.lib.interval.cljs$core$IFn$_invoke$arity$3","G__16170","G__16171","goog.net.XhrIo/send","the-cell__15599__auto__","cljs.core/first","cells.cell/*cell-stack*","context__15600__auto__","cells.cell/*eval-context*","args__15601__auto__","*cell-stack*16176","cljs.core/cons","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","e16177","error__15602__auto__","cells.eval-context/handle-error","event","location","G__16161","cells.lib/fetch","p__16163","map__16164","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$3","cljs.core.get.cljs$core$IFn$_invoke$arity$2","G__16169","options","cells.cell/error?","*cell-stack*16223","e16224","error","x","cells.lib/geo-location","parse","cells.lib/parse-fns","cells.lib/status","cells.lib.fetch.cljs$core$IFn$_invoke$arity$2","cells.cell/with-view","and__3938__auto__","cljs.core/native-satisfies?","cells.cell/IStatus","cells.lib.timeout.cljs$core$IFn$_invoke$arity$3","p1__16156#","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic","G__16179","G__16180","G__16181","cells.lib/status!","G__16185","goog.net.ErrorCode/getDebugMessage","goog/Uri","cljs.core/clj->js","cells.lib/dependencies","cells.cell/dependencies","_","cells.cell/message","*cell-stack*16215","e16216","cells.lib._on_frame.cljs$core$IFn$_invoke$arity$2","cells.lib/with-view","cljs.core/volatile!","G__16110","cells.lib/interval","js/clearTimeout","*cell-stack*16088","e16093","G__16116","js/clearInterval","cells.lib/dependents","cells.cell/dependents","cells.lib/message","cells.cell.status_BANG_.cljs$core$IFn$_invoke$arity$3","js/navigator.geolocation.getCurrentPosition","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cells.lib/loading?","formatted-value","G__16189","cells.lib/error?","G__16144","frame-f","cells.cell/loading?","G__16086","cells.lib/-on-frame","js/setTimeout","*cell-stack*16139","e16142","*cell-stack*16117","e16118","G__16119"],"sourcesContent":["(ns cells.lib\n  (:require [cells.cell :as cell\n             :refer [*cell-stack*]\n             :refer-macros [cell-fn cell]\n             :include-macros true]\n            [cells.eval-context :refer [on-dispose handle-error]]\n            [goog.net.XhrIo :as xhr]\n            [goog.net.ErrorCode :as errors]\n            [cells.util :as util])\n  (:require-macros [cells.lib])\n  (:import [goog Uri]))\n\n(declare -on-frame\n         interval\n         timeout\n         fetch\n         geo-location)\n\n(def status!\n\n  cell/status!)\n\n(def status\n  \"Returns the cell's status (a keyword)\"\n  cell/status)\n\n(def message\n  \"Returns the cell's status message, if it exists.\"\n  cell/message)\n\n(def error?\n  \"Returns true if cell's status is :error\"\n  cell/error?)\n\n(def with-view\n  \"Wraps a cell with a view (as metadata)\"\n  cell/with-view)\n\n(defn loading?\n  \"Returns true if x has a status of :loading.\"\n  [x]\n  (and (satisfies? cell/IStatus x)\n       (cell/loading? x)))\n\n(def dependencies cell/dependencies)\n(def dependents cell/dependents)\n(def unique-id (comp str util/unique-id))\n\n#_(defn restricted-swap! [specified-name cell & args]\n    (if (instance? cell/Cell cell)\n      (do (assert (= specified-name (name cell)))\n          (apply cell/swap-cell! cell args))\n      (apply swap! cell args)))\n\n#_(defn restricted-reset! [specified-name cell newval]\n    (if (instance? cell/Cell cell)\n      (do (assert (= specified-name (name cell)))\n          (cell/reset-cell! cell newval))\n      (reset! cell newval)))\n\n(defn- query-string [query]\n  (-> Uri .-QueryData (.createFromMap (clj->js query)) (.toString)))\n\n(defn -on-frame\n  ([f] (-on-frame f nil))\n  ([f initial-value]\n   (let [self (first cell/*cell-stack*)\n         stop? (volatile! false)\n         interval-f (cell-fn frame-f []\n                             (reset! self (f @self))\n                             (when-not @stop?\n                               (.requestAnimationFrame js/window frame-f)))]\n     (on-dispose self #(vreset! stop? true))\n     (reset! self initial-value)\n     (.requestAnimationFrame js/window interval-f))))\n\n(defn interval\n  ([n f] (interval n f nil))\n  ([n f initial-value]\n   (if (= n :frame)\n     (-on-frame f initial-value)\n     (let [self (first cell/*cell-stack*)\n           clear-key (volatile! nil)\n           _ (on-dispose self #(some-> @clear-key (js/clearInterval)))\n           interval-f (cell-fn [] (reset! self (f @self)))]\n       (vreset! clear-key (js/setInterval interval-f n))\n       (reset! self (f initial-value))))))\n\n(defn- timeout\n  ([n f] (timeout n f nil))\n  ([n f initial-value]\n\n   (let [self (first cell/*cell-stack*)\n         _ (cell/status! self :loading)\n         clear-key (js/setTimeout (cell-fn []\n                                           (cell/status! self nil)\n                                           (reset! self (f @self))) n)]\n     (on-dispose self #(js/clearTimeout clear-key))\n     initial-value)))\n\n(def parse-fns {:json->clj (comp #(js->clj % :keywordize-keys true) js/JSON.parse)\n                :json      js/JSON.parse\n                :text      identity})\n\n(defn fetch\n  \"Fetch a resource from a url. By default, response is parsed as JSON and converted to Clojure via clj->js with :keywordize-keys true.\n  Accepts options :format, which may be :json or :text, and :query, a map which will be\n  appended to url as a query parameter string.\"\n  ([url]\n   (fetch url {}))\n  ([url {:keys [format query]\n         :or   {format :json->clj}\n         :as   options}]\n   [url options]\n   (let [self (first cell/*cell-stack*)\n         url (cond-> url\n                     query (str \"?\" (query-string query)))\n         parse (get parse-fns format)]\n     (cell/status! self :loading)\n     (xhr/send url (cell-fn [event]\n                            (let [xhrio (.-target event)]\n                              (if-not (.isSuccess xhrio)\n                                (status! self :error {:message         (-> xhrio .getLastErrorCode (errors/getDebugMessage))\n                                                                :xhrio xhrio})\n                                (let [formatted-value (-> xhrio (.getResponseText) (parse))]\n                                  (status! self nil)\n                                  (reset! self formatted-value))))))\n     @self)))\n\n(defn geo-location\n  []\n  (let [self (first *cell-stack*)]\n    (cell/status! self :loading)\n    (js/navigator.geolocation.getCurrentPosition\n      (cell-fn [location]\n               (cell/status! self nil)\n               (->> {:latitude  (.. location -coords -latitude)\n                     :longitude (.. location -coords -longitude)}\n                    (reset! self)))\n      (cell-fn [error]\n               (cell/status! self :error (str error))))))\n"]}