{"version":3,"file":"re_view.view_spec.js","sources":["re_view/view_spec.cljs"],"mappings":"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","names":["i","props","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","v","re-view.view-spec/resolve-spec","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","m","k","spec-name","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core/name","required","js/Error","e","re-view.view-spec/validate-spec","cljs.core/empty?","remaining-children","p__16315","map__16316","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","re-view.view-spec/spec-kind","spec","specs","clojure.string/starts-with?","p1__16297#","cljs.core/first","keys","or__3949__auto__","re-view.view-spec/spec-kinds","cljs.core/reduce-kv","value","re-view.view-spec/Hiccup?","cljs.core.map.cljs$core$IFn$_invoke$arity$2","req","re-view.view-spec/spec-registry","G__16325","prop-keys","cljs.core/keys","remaining-req","cljs.core/set?","spec-map","cljs.core/fn?","and__3938__auto__","js/console","display-name","children-spec","cljs.core/map?","re-view.view-spec/defspecs","cljs.core.into.cljs$core$IFn$_invoke$arity$2","re-view.view-spec/builtins","&more","children","cljs.core/count","p__16333","map__16334","e16378","p1__16338#","G__16349","fexpr__16348","cljs.core/filterv","seq__16344","cljs.core/seq","chunk__16345","count__16346","i__16347","temp__5457__auto__","cljs.core/chunked-seq?","c__4351__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/next","cljs.core/namespace","cljs.core/not","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core/vector?","G__16291","re-view.view-spec/Element?","re_view.util.any_pred.cljs$core$IFn$_invoke$arity$variadic","prop-specs","re-view.view-spec/SVG?","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__16305","vec__16306","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","pred","name","re-view.util/flatten-seqs","G__16331","cljs.core/second","opt","cljs.core/string?","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","cljs.core/boolean?","cljs.core/rest","p__16319","map__16320","re-view.view-spec/normalize-props-map","p__16339","map__16340","re-view.view-spec/validate-props","seq__16379","chunk__16380","count__16381","i__16382","child","cljs.core/Keyword","p1__16295#","e16342","re-view.util/is-react-element?","G__16310","map__16322","default","pass-through","p__16375","map__16376","re-view.view-spec/validate-children","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/conj","cljs.core/nil?","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/keyword?","cljs.core/split-with","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/not=","vec__16328","cljs.core/number?","cljs.core/assoc-in","cljs.core/object?","re-view.view-spec/resolve-spec-vector"],"sourcesContent":["(ns re-view.view-spec\n  (:require [re-view.util :as util]\n            [clojure.string :as string]))\n\n(def spec-registry\n  \"Global registry for view specs\"\n  {})\n\n(defn defspecs\n  \"Define a view spec\"\n  [specs]\n  (set! spec-registry (merge spec-registry (reduce-kv (fn [m k v]\n                                                        (cond-> m\n                                                                (not (map? v)) (assoc k {:spec      v\n                                                                                         :spec-name k}))) specs specs))))\n\n(def Hiccup? #(and (vector? %)\n                   (keyword? (first %))))\n\n(def SVG? #(and (Hiccup? %)\n                (string/starts-with? (name (first %)) \"svg\")))\n\n(def Element? (util/any-pred\n                util/is-react-element?\n                Hiccup?\n                string?\n                nil?))\n\n(def builtins [[:Boolean boolean?]\n               [:String string?]\n               [:Number number?]\n               [:Function fn?]\n               [:Map map?]\n               [:Vector vector?]\n               [:Element Element?]\n               [:Hiccup Hiccup?]\n               [:SVG SVG?]\n               [:Object object?]\n               [:Keyword keyword?]])\n\n(defspecs (into {} builtins))\n(def ^:private spec-kinds (reduce (fn [m [name pred]] (assoc m pred name)) {} builtins))\n\n(defn resolve-spec\n  \"Resolves a spec. Keywords are looked up in the spec registry recursively until a function or set is found.\n  If a map's :spec is a namespaced keyword, it is resolved and merged (without overriding existing keys)\"\n  [k]\n  (cond (keyword? k) (resolve-spec (or (get spec-registry k)\n                                       (throw (js/Error (str \"View spec not registered: \" k)))))\n        (set? k) {:spec      k\n                  :spec-name :Set}\n        (fn? k) {:spec k}\n        (map? k) (let [spec (get k :spec)]\n                   (if (or (fn? spec)\n                           (set? spec))\n                     k\n                     (merge k (resolve-spec spec))))\n        :else (throw (js/Error (str \"Invalid spec: \" k)))))\n\n(defn spec-kind [{:keys [spec-name spec]}]\n  (or (get spec-kinds spec)\n      (if (set? spec) :Set\n                      spec-name)))\n\n(defn normalize-props-map\n  \"Resolves specs in map\"\n  [{:keys [props/keys\n           props/required] :as props}]\n  (as-> props props\n        (reduce-kv (fn [m k v]\n                     (assoc m k (resolve-spec v))) props (dissoc props :props/keys :props/required))\n        (reduce (fn [m k]\n                  (assoc m (keyword (name k)) (resolve-spec k))) props keys)\n        (reduce (fn [m k]\n                  (assoc m (keyword (name k)) (assoc (resolve-spec k) :required true))) props required)\n        (reduce-kv (fn [m k v]\n                     (let [{:keys [default pass-through required] :as spec} v]\n                       (cond-> (assoc m k spec)\n                               (not pass-through) (update :props/consumed conj k)\n                               required (update :props/required conj k)\n                               default (assoc-in [:props/defaults k] default))))\n                   (assoc props :props/consumed []\n                                :props/required []) props)))\n\n(defn resolve-spec-vector\n  \"Resolves specs in vector\"\n  [specs]\n  (when specs (let [[req opt] (split-with (partial not= :&) specs)]\n                {:req   (map resolve-spec req)\n                 :&more (some-> (second opt) (resolve-spec))})))\n\n(defn validate-spec [k {:keys [required spec spec-name] :as spec-map} value]\n  (when (and spec-map (not (fn? spec)) (not (set? spec)))\n    (prn :invalid-spec? k spec-map))\n  (if (nil? value)\n    (when required (throw (js/Error (str \"Prop is required: \" k))))\n    (when (and spec (not (spec value)))\n          (.log js/console \"value\" value)\n          (.log js/console \"spec\" spec)\n      #_(println \"Failed Spec\" spec-map)\n      #_(prn :spec spec-name :val value :spec spec)\n      (throw (js/Error (str \"Validation failed for prop: \" k \" with spec \" (or spec-name spec) \" and value \" value))))))\n\n(defn validate-props [display-name\n                      {:keys [props/required]\n                       :as   prop-specs} props]\n  (let [prop-keys (keys props)]\n    (try\n      (doseq [k (into required (filterv #(not (#{\"props\" \"spec\"} (namespace %))) (keys props)))]\n        (validate-spec k (get prop-specs k) (get props k)))\n      (catch js/Error e\n        (println \"Error validating props in \" display-name)\n        (throw e))))\n  props)\n\n(defn validate-children [display-name {:keys [req &more] :as children-spec} children]\n  (when children-spec\n    (try\n      (let [children (util/flatten-seqs children)]\n        (loop [remaining-req req\n               remaining-children children\n               i 0]\n          (if (empty? remaining-req)\n            (when-not (empty? remaining-children)\n              (if &more\n                (doseq [child remaining-children]\n                  (validate-spec :children-& &more child))\n                (throw (js/Error (str \"Expected fewer children. Provided \" (count children) \", expected \" (count req) (when &more \" or more\") \".\")))))\n            (if (empty? remaining-children)\n              (throw (js/Error (str \"Expected more children in \" display-name \". Provided \" (count children) \", expected \" (count req) (when &more \" or more\") \".\")))\n              (do (validate-spec (keyword (str \"children-\" i))\n                                 (first remaining-req)\n                                 (first remaining-children))\n                  (recur (rest remaining-req)\n                         (rest remaining-children)\n                         (inc i)))))))\n      (catch js/Error e\n        (.error js/console (str \"Error validating children in \" display-name))\n        (throw (js/Error e))\n        )))\n  children)"]}