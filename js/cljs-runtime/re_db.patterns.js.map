{"version":3,"file":"re_db.patterns.js","sources":["re_db/patterns.cljs"],"mappings":"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","names":["re-db.patterns/*pattern-log*","re-db.patterns/empty-pattern-map","re-db.patterns/supported-pattern-keys","cljs.core/set","cljs.core/keys","re-db.patterns/conj-set","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2","cljs.core/conj","re-db.patterns/into-set","cljs.core/into","var_args","G__32297","re-db.patterns/log-read","js/Error","kind","pattern","cljs.core.update.cljs$core$IFn$_invoke$arity$4","multiple?","re-db.patterns/add-value","value-map","pattern-key","value","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","re-db.patterns/remove-value","cljs.core/disj","re-db.patterns/resolve-id","db-snap","attr","val","re_db.patterns.log_read.cljs$core$IFn$_invoke$arity$2","cljs.core/first","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","p__32314","vec__32317","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","re-db.patterns/listen-lookup-ref","lookup-attr","lookup-val","lookup-ref","listeners","db","f","lookup-target","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/deref","lookup-cb","p__32322","map__32323","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","db-after","tx-report","next-lookup-target","G__32328","G__32329","G__32330","re-db.patterns/unlisten","G__32331","cljs.core/Keyword","cljs.core/second","G__32332","G__32333","G__32334","re-db.patterns/listen","G__32335","cljs.core/reset!","G__32340","cljs.core/assoc-in","re-db.patterns/unlisten-lookup-ref","map__32372","G__32374","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","re-db.patterns/lookup-ref?","or__3949__auto__","and__3938__auto__","cljs.core/keyword-identical?","cljs.core/vector?","patterns","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","cljs.core/reduce-kv","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","temp__5455__auto__","re-db.patterns/non-empty-keys","m","ks","k","v","G__32439","cljs.core/empty?","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","G__32469","re-db.patterns/datom-patterns","datoms","many?","re_db.patterns.datom_patterns.cljs$core$IFn$_invoke$arity$3","pattern-keys","p__32474","vec__32476","pattern-map","e","a","pv","G__32483","cljs.core/contains?","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/select-keys","re-db.patterns/pattern-values","values","re-db.patterns/datom-values","active-keys","re-db.patterns/invalidate!","seq__32515","cljs.core/seq","chunk__32516","count__32517","i__32518","temp__5457__auto__","cljs.core/chunked-seq?","c__4351__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/next","x__4243__auto__","m__4244__auto__","re-db/patterns.reaction","goog/typeOf","cljs.core/missing-protocol","re-db/patterns.patterns","re-db.patterns/IPatternListen","re-db.patterns/reaction","this","re-db.patterns/patterns"],"sourcesContent":["(ns re-db.patterns)\n\n(def ^:dynamic *pattern-log*\n  \"Dynamic var used in conjunction with re-db.patterns/capture-patterns macro to\n  identify patterns read by a block of code.\"\n  nil)\n\n(def ^:private empty-pattern-map\n  \"Map for building sets of patterns.\"\n  {:e__ #{}                                                 ;; <entity id>\n   :_a_ #{}                                                 ;; <attribute>\n   :_av #{}                                                 ;; [<attribute>, <value>]\n   :ea_ #{}})                                               ;; [<entity id>, <attribute>]\n\n(def supported-pattern-keys (set (keys empty-pattern-map)))\n\n(def conj-set (fnil conj #{}))\n(def into-set (fnil into #{}))\n\n(defn log-read\n  \"Record pattern to *pattern-log*.\"\n  ([kind pattern]\n   (when-not (nil? *pattern-log*)\n     (set! *pattern-log* (update *pattern-log* kind conj-set pattern))))\n  ([kind pattern multiple?]\n   (when-not (nil? *pattern-log*)\n     (set! *pattern-log* (update *pattern-log* kind (if multiple? into-set conj-set) pattern)))))\n\n(defn add-value\n  \"Associates value with pattern in value-map.\"\n  [value-map pattern-key pattern value]\n  (update-in value-map [pattern-key pattern] conj-set value))\n\n(defn remove-value\n  \"Removes value associated with pattern in value-map.\"\n  [value-map pattern-key pattern value]\n  (update-in value-map [pattern-key pattern] disj value))\n\n(declare listen unlisten)\n\n(defn resolve-id\n  \"Copied from re-db.core.\"\n  [db-snap attr val]\n  (log-read :_av [attr val])\n  (first (get-in db-snap [:ave attr val])))\n\n(defn listen-lookup-ref\n  \"Adds lookup ref listener, which uses an intermediate listener to update when\n  the target of a lookup ref changes.\"\n  [[lookup-attr lookup-val :as lookup-ref] kind pattern listeners db f]\n  (let [lookup-target (atom (resolve-id @db lookup-attr lookup-val))\n        lookup-cb (fn [{:keys [db-after] :as tx-report}]\n                    (let [next-lookup-target (resolve-id db-after lookup-attr lookup-val)]\n                      (when @lookup-target\n                        (unlisten db {kind (case kind :e__ [@lookup-target]\n                                                      :ea_ [[lookup-target (second pattern)]])} f))\n                      (when-not (nil? next-lookup-target)\n                        (listen db {kind (case kind :e__ [next-lookup-target]\n                                                    :ea_ [[next-lookup-target (second pattern)]])} f))\n                      (reset! lookup-target next-lookup-target)\n                      (f tx-report)))]\n    (-> (cond-> listeners\n                (not (nil? @lookup-target)) (add-value :e__ @lookup-target f))\n        (add-value :_av lookup-ref lookup-cb)\n        (assoc-in [:lookup-refs [pattern f]] {:lookup-cb     lookup-cb\n                                              :lookup-target lookup-target}))))\n\n(defn unlisten-lookup-ref\n  \"Removes lookup ref listener.\"\n  [lookup-ref kind pattern listeners db f]\n  (let [{:keys [lookup-cb lookup-target]} (get-in listeners [:lookup-refs [pattern f]])]\n    (-> (cond-> listeners\n                @lookup-target (remove-value kind pattern f))\n        (remove-value :_av lookup-ref lookup-cb)\n        (dissoc [:lookup-refs [pattern f]]))))\n\n(defn lookup-ref?\n  \"Returns true if pattern has lookup ref in id position.\"\n  [kind pattern]\n  (or (and (keyword-identical? kind :e__)\n           (vector? pattern)\n           pattern)\n      (and (keyword-identical? kind :ea_)\n           (vector? (first pattern))\n           (first pattern))))\n\n(defn listen\n  \"Adds pattern listener.\"\n  [db patterns value]\n  (swap! db assoc :listeners\n         (reduce-kv (fn [listeners kind patterns]\n                      (reduce (fn [listeners pattern]\n                                (if-let [lookup-ref (lookup-ref? kind pattern)]\n                                  (listen-lookup-ref lookup-ref kind pattern listeners db value)\n                                  (add-value listeners kind pattern value))) listeners patterns)) (get @db :listeners) patterns)))\n\n(defn unlisten\n  \"Removes pattern listener.\"\n  [db patterns value]\n  (swap! db assoc :listeners\n         (reduce-kv (fn [listeners kind patterns]\n                      (reduce (fn [listeners pattern]\n                                (if-let [lookup-ref (lookup-ref? kind pattern)]\n                                  (unlisten-lookup-ref lookup-ref kind pattern listeners db value)\n                                  (remove-value listeners kind pattern value))) listeners patterns)) (get @db :listeners) patterns)))\n\n(defn non-empty-keys\n  \"Returns list of keys for which map contains a non-empty value.\"\n  [m]\n  (reduce-kv (fn [ks k v]\n               (cond-> ks\n                       (not (empty? v)) (conj k))) #{} m))\n\n(defn datom-patterns\n  \"Returns a map of patterns matched by a list of datoms.\n  Limits patterns to those listed in pattern-keys.\n  many? should return true for attributes which have schema value :db.cardinality/many?.\"\n  ([datoms many?]\n   (datom-patterns datoms many? [:e__ :ea_ :_av :_a_]))\n  ([datoms many? pattern-keys]\n   (->> datoms\n        (reduce (fn [pattern-map [e a v pv]]\n                  (cond-> pattern-map\n                          (contains? pattern-keys :e__) (update :e__ conj e)\n                          (contains? pattern-keys :ea_) (update :ea_ conj [e a])\n                          (contains? pattern-keys :_av) (update :_av into (if (many? a)\n                                                                            (reduce\n                                                                              (fn [patterns v] (conj patterns [a v])) [] (into v pv))\n                                                                            [[a v]\n                                                                             [a pv]]))\n                          (contains? pattern-keys :_a_) (update :_a_ conj a)))\n                (select-keys empty-pattern-map pattern-keys)))))\n\n(defn pattern-values\n  \"Returns values associated with patterns.\n\n  value-map is of form {<pattern-key> {<pattern> #{...set of values...}}}.\n  pattern-map is of form {<pattern-key> #{...set of patterns...}}\"\n  [pattern-map value-map]\n  (reduce-kv (fn [values pattern-key patterns]\n               (reduce (fn [values pattern]\n                         (into values (get-in value-map [pattern-key pattern]))) values patterns)) #{} pattern-map))\n\n(defn datom-values\n  \"Returns the set of values in value-map associated with patterns matched by datoms.\"\n  [value-map datoms many?]\n  (let [active-keys (non-empty-keys value-map)]\n    (-> (datom-patterns datoms many? active-keys)\n        (pattern-values value-map))))\n\n(defn invalidate!\n  \"Invalidate a pattern, ie. invoke callbacks that match pattern\"\n  [db pattern-key pattern]\n  (doseq [f (get-in @db [:listeners pattern-key pattern])]\n    (f)))\n\n(defprotocol IPatternListen\n  (reaction [this] \"the action to take when a listened pattern matches\")\n  (patterns [this] \"Return the patterns currently listened to\"))\n\n(comment\n  (assert (= (datom-patterns [[\"e\" \"a\" \"v\" \"prev-v\"]]\n                             #{}\n                             supported-pattern-keys)\n             {:e__ #{\"e\"}\n              :ea_ #{[\"e\" \"a\"]}\n              :_av #{[\"e\" \"v\"] [\"e\" \"prev-v\"]}\n              :_a_ #{\"a\"}})))"]}