{"version":3,"file":"re_view.view_spec.js","sources":["re_view/view_spec.cljs"],"mappings":";;;;AAIA;;;kCAAA,lCAAKA;AAIL;;;6BAAA,7BAAMC,kEAEHC;AAFH,AAGE,OAAMF,kCAAc,AAACG,uGAAMH,gCAAc,AAACI,oBAAU,WAAKC,EAAEC,EAAEC;AAAT,AACE,IAAAC,WAAQH;AAAR,AAAA,GACQ,EAAK,AAACI,qBAAKF;AAAI,qDAAAC,WAAA,2CAAA,sDAAA,1JAACE,uDAAMJ,iGAAcC,iEACAD;;AAF5CE;;GAEkDN,MAAMA;;AAEhH,kCAAA,0CAAAS,5EAAKC;AAAL,AAAc,SAAK,wBAAAD,xBAACE,+CACD,8CAAAC,7CAAU,gBAAAH,hBAACI;;AAE9B,+BAAA,uCAAAC,tEAAKC;AAAL,AAAW,IAAAC,oBAAK,gCAAAF,hCAACJ;AAAN,AAAA,oBAAAM;AACK,2FAAA,pFAACC,kCAAoB,AAACC,eAAK,gBAAAJ,hBAACD;;AADjCG;;;AAGX,AAAKG,mCAAS,AAACC,6GACCC,qCACAX,gCACAY,wBACAC;AAEhB,6BAAA,oFAAA,mFAAA,0FAAA,mFAAA,wFAAA,mFAAA,yFAAA,mFAAA,yFAAA,mFAAA,gFAAA,mFAAA,yFAAA,mFAAA,oGAAA,mFAAA,iGAAA,mFAAA,wFAAA,mFAAA,0FAAA,mFAAA,t4DAAKC,6PAAoBC,4KACDH,4KACAI,gLACEC,kKACLpB,yKACGI,8KACCQ,qLACDT,8KACHK,kLACGa,8KACCC;AAEzB,AAAC9B,2BAAS,6CAAA,7CAAC+B,gFAAQN;AACnB,AAAeO,+BAAW,AAACC,+CAAO,aAAAC,FAAK9B;AAAL,AAAA,IAAA+B,aAAAD;WAAA,AAAAE,4CAAAD,WAAA,IAAA,lEAAQE;WAAR,AAAAD,4CAAAD,WAAA,IAAA,lEAAaG;AAAb,AAAoB,OAAC7B,8CAAML,EAAEkC,KAAKD;GAA1C,mCAAoDZ;AAE9E;;;;iCAAA,jCAAMc,0EAGHlC;AAHH,AAIE,GAAM,cAAAQ,bAAUR;AAAG,IAAAmC,WAAc,iBAAAC,mBAAI,AAACC,4CAAI3C,gCAAcM;AAAvB,AAAA,oBAAAoC;AAAAA;;AACI,MAAO,AAACE,MAAS,CAAA,yEAAkCtC;;;AADrE,AAAA,oIAAAmC,qDAAAA,jLAACD,+DAAAA,yEAAAA;;AAApB,GAEM,AAACK,qBAAKvC;AAFZ,kDAAA,sDAAA,+DAAA,jEAE2BA;;AAF3B,GAIM,AAACuB,oBAAIvB;AAJX,kDAAA,oDAIqBA;;AAJrB,GAKM,AAACG,qBAAKH;AAAG,IAAMwC,OAAK,8CAAA,9CAACH,4CAAIrC;AAAhB,AACE,GAAI,EAAI,AAACuB,oBAAIiB,WACL,AAACD,qBAAKC;AACZxC;;AACA,OAACH,uGAAMG,EAAE,CAACkC,+DAAAA,qEAAAA,RAAaM,iDAAAA;;;AAT1C,AAUY,MAAO,AAACF,MAAS,CAAA,6DAAsBtC;;;;;;;AAErD,8BAAA,sCAAAyC,pEAAMK;AAAN,AAAA,IAAAJ,aAAAD;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAC,gCAAA,AAAAD,+BAAA,KAAA,OAAA,QAAA,AAAAE,8CAAAC,mBAAAH,YAAAA;gBAAA,AAAAL,4CAAAK,eAAA,vEAAyBK;WAAzB,AAAAV,4CAAAK,eAAA,lEAAmCF;AAAnC,AACE,IAAAJ,mBAAI,AAACC,4CAAIV,6BAAWa;AAApB,AAAA,oBAAAJ;AAAAA;;AACI,GAAI,AAACG,qBAAKC;AAAV;;AACgBO;;;;AAEtB;;;wCAAA,gDAAAC,xFAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAN,gCAAA,AAAAM,+BAAA,KAAA,OAAA,QAAA,AAAAL,8CAAAC,mBAAAI,YAAAA;YAAAA,RAG+BI;WAH/B,AAAAhB,4CAAAY,eAAA,lEAEWE;eAFX,AAAAd,4CAAAY,eAAA,tEAGWG;AAHX,AAIE,gBAAMC,ZAAMA;IAAAA,YACN,AAACvD,oBAAU;kBAAKC,EAAEC,EAAEC;AAAT,AACE,OAACG,8CAAML,EAAEC,EAAE,AAACkC,+BAAajC;;CAAKoD,UAAM,gEAAA,gHAAA,hLAACC,sDAAOD;IAFnDA,YAGN,AAACzB,+CAAO;kBAAK7B,EAAEC;AAAP,AACE,OAACI,8CAAML,EAAE,AAACwD,gDAAQ,AAACzC,eAAKd,IAAI,AAACkC,+BAAalC;;CAAKqD,UAAMF;IAJzDE,YAKN,AAACzB,+CAAO;kBAAK7B,EAAEC;AAAP,AACE,OAACI,8CAAML,EAAE,AAACwD,gDAAQ,AAACzC,eAAKd,IAAI,gFAAA,6DAAA,7IAACI,8CAAM,AAAC8B,+BAAalC;;CAAqBqD,UAAMD;AAN5F,AAOM,OAACtD,oBAAU;kBAAKC,EAAEC,EAAEC;AAAT,AACE,IAAAuD,aAAuDvD;IAAvDuD,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAb,gCAAA,AAAAa,+BAAA,KAAA,OAAA,QAAA,AAAAZ,8CAAAC,mBAAAW,YAAAA;WAAAA,PAAiDhB;eAAjD,AAAAH,4CAAAmB,eAAA,tEAAcC;mBAAd,AAAApB,4CAAAmB,eAAA,1EAAsBE;mBAAtB,AAAArB,4CAAAmB,eAAA,1EAAmCJ;AAAnC,AACE,IAAAO,WAAQ,AAACvD,8CAAML,EAAEC,EAAEwC;IAAnBmB,eAAA,8KAAAA,5KACQ,AAACC,cAAIF,eAAc,+CAAAC,SAAA,xDAACE,6HAAuBC,eAAK9D;IADxD2D,eAAA,oLAAAA,lKAEQP,cAAS,+CAAAO,aAAA,5DAACE,kIAAuBC,eAAK9D;AAF9C,AAAA,oBAGQyD;AAAQ,0BAAAE,aAAA,mFAAA,nHAACI,wLAA0B/D,UAAGyD;;AAH9CE;;;CAIJ,+DAAA,qEAAA,mFAAA,sEAAA,7RAACK,qDAAMX,+QAC0BA;;AAEpD;;;wCAAA,xCAAMY,wFAEHrE;AAFH,AAGE,oBAAMA;AAAN,AAAY,IAAAsE,aAAgB,AAACG,qBAAW,kEAAA,lEAACC,gDAAQC,iEAAS3E;UAA9C,AAAAmC,4CAAAmC,WAAA,IAAA,jEAAOC;UAAP,AAAApC,4CAAAmC,WAAA,IAAA,jEAAWE;AAAX,AAAA,kDAAA,mIAAA,hFACU,AAACI,4CAAItC,+BAAaiC,4DAClB,iBAAAM,WAAQ,AAACC,iBAAON;AAAhB,AAAA,GAAA,CAAAK,YAAA;AAAA;;AAAqB,sCAAAA,/BAACvC;;;;AAF5C;;;AAIF,kCAAA,4CAAAyC,9EAAME,4EAAe7E,WAAiD+E;AAAtE,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAjC,gCAAA,AAAAiC,+BAAA,KAAA,OAAA,QAAA,AAAAhC,8CAAAC,mBAAA+B,YAAAA;eAAAA,XAA4DE;eAA5D,AAAAzC,4CAAAuC,eAAA,tEAA+BxB;WAA/B,AAAAf,4CAAAuC,eAAA,lEAAwCpC;gBAAxC,AAAAH,4CAAAuC,eAAA,vEAA6C7B;AAA7C,AACE,oBAAM,iBAAAnC,oBAAKkE;AAAL,AAAA,oBAAAlE;AAAA,SAAc,EAAK,AAACW,oBAAIiB,YAAO,EAAK,AAACD,qBAAKC;;AAA1C5B;;;AAAN,AACE,qGAAA,rGAACoE,2KAAmBhF,EAAE8E;;AADxB;;AAEA,GAAI,UAAA,TAAMC;AACR,oBAAM3B;AAAN,AAAe,MAAO,AAACd,MAAS,CAAA,iEAA0BtC;;AAA1D;;;AACA,oBAAM,iBAAAY,oBAAK4B;AAAL,AAAA,oBAAA5B;AAAU,OAACgD,cAAI,CAACpB,qCAAAA,4CAAAA,TAAKuC,wBAAAA;;AAArBnE;;;AAAN,AACM,YAAA,ZAAMqE,oBAAmBF;;AACzB,YAAA,ZAAME,mBAAkBzC;;AAG5B,MAAO,AAACF,MAAS,CAAA,8EAAA,HAAoCtC,6DAAgB,iBAAAoC,mBAAIW;AAAJ,AAAA,oBAAAX;AAAAA;;AAAcI;;MAAlE,0DAAsFuC;;AALzG;;;;AAOJ,mCAAA,wDAAAG,3FAAME,8EAAgBC,sBAEmBhC;AAFzC,AAAA,IAAA8B,aAAAD;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAxC,gCAAA,AAAAwC,+BAAA,KAAA,OAAA,QAAA,AAAAvC,8CAAAC,mBAAAsC,YAAAA;iBAAAA,bAE6BG;eAF7B,AAAAjD,4CAAA8C,eAAA,tEAC8B/B;AAD9B,AAGE,IAAMmC,kBAAU,AAACC,eAAKnC;AAAtB,AACE,IAAA,AACE,IAAAqC,mBAAA,AAAAC,cAAU,AAACjE,6CAAK0B,SAAS,kBAAA,lBAACmD;kBAADD;AAAA,AAAU,OAAC1C,cAAI,iBAAA4C,WAAmB,oBAAAF,pBAACI;IAApBD,eAAA,iFAAA,YAAA;AAAA,AAAA,QAAAA,6CAAAA,2CAAAD,YAAAC,uBAAAD;;;CAAmC,AAAChB,eAAKnC;IAAjFuC,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,cAAA,AAAAD,wDAAAE,lEAAQ9F;AAAR,AAAA,AACE,AAAC6E,gCAAc7E,QAAE,AAACqC,4CAAIiD,WAAWtF,SAAG,AAACqC,4CAAIgB,MAAMrD;;AADjD;AAAA,eAAA0F;eAAAE;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAAC,2BAAA,AAAAJ,cAAAD;AAAA,AAAA,GAAAK;AAAA,AAAA,IAAAL,uBAAAK;AAAA,AAAA,GAAA,AAAAC,6BAAAN;AAAA,IAAAO,wBAAA,AAAAC,sBAAAR;AAAA,AAAA,eAAA,AAAAS,qBAAAT;eAAAO;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,cAAA,AAAAxF,gBAAAiF,1BAAQ1F;AAAR,AAAA,AACE,AAAC6E,gCAAc7E,QAAE,AAACqC,4CAAIiD,WAAWtF,SAAG,AAACqC,4CAAIgB,MAAMrD;;AADjD;AAAA,eAAA,AAAAqG,eAAAX;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;gBADF,GAAA,CAAAD,kBAGSnD;AAHT,cAAAmD,VAGkBkB;AAHlB,AAII,yGAAA,zGAACC,sIAAqCvB;;AACtC,MAAOsB;;AALX,AAAA,MAAAlB;;;;AAMFpC;;AAEF,sCAAA,2DAAAwD,jGAAME,oFAAmB1B,sBAAmD6B;AAA5E,AAAA,IAAAJ,aAAAD;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAnE,gCAAA,AAAAmE,+BAAA,KAAA,OAAA,QAAA,AAAAlE,8CAAAC,mBAAAiE,YAAAA;oBAAAA,hBAA6DG;UAA7D,AAAA5E,4CAAAyE,eAAA,jEAA8C3C;sBAA9C,AAAA9B,4CAAAyE,eAAA,7EAAkDE;AAAlD,AACE,oBAAMC;AAAN,AACE,IAAA,AACE,IAAMC,qBAAS,AAACE,0BAAkBF;AAAlC,AACE,IAAOG,sBAAclD;IACdmD,2BAAmBJ;cAD1B,VAEOK;;AAFP,AAGE,GAAI,AAACC,uBAAOH;AACV,GAAU,AAACG,uBAAOF;AAAlB;AAAA,AACE,oBAAIN;AACF,IAAAS,mBAAA,AAAA9B,cAAc2B;IAAdI,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,kBAAA,AAAAD,wDAAAE,tEAAQC;AAAR,AAAA,AACE,gCAAA,hCAAChD,kGAA0BmC,gBAAMa;;AADnC;AAAA,eAAAJ;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAA7B,2BAAA,AAAAJ,cAAA8B;AAAA,AAAA,GAAA1B;AAAA,AAAA,IAAA0B,uBAAA1B;AAAA,AAAA,GAAA,AAAAC,6BAAAyB;AAAA,IAAAxB,wBAAA,AAAAC,sBAAAuB;AAAA,AAAA,eAAA,AAAAtB,qBAAAsB;eAAAxB;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,kBAAA,AAAAxF,gBAAAgH,9BAAQI;AAAR,AAAA,AACE,gCAAA,hCAAChD,kGAA0BmC,gBAAMa;;AADnC;AAAA,eAAA,AAAAxB,eAAAoB;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AAEA,MAAO,AAACnF,MAAS,CAAA,sHAAA,iLAAA,tNAA0C,AAAC8D,gBAAMc,+EAAwB,AAACd,gBAAMjC,kDAAK,mCAAA,AAAA,WAAA,5BAAM6C;;;;AAChH,GAAI,AAACQ,uBAAOF;AACV,MAAO,AAAChF,MAAS,CAAA,uFAAA,+FAAA,iLAAA,9RAAkC+C,wEAA2B,AAACe,gBAAMc,+EAAwB,AAACd,gBAAMjC,kDAAK,mCAAA,AAAA,WAAA,5BAAM6C;;AAC/H,AAAI,AAACnC,gCAAc,AAACtB,gDAAQ,CAAA,wDAAiBgE,oBAC1B,AAAC9G,gBAAM4G,qBACP,AAAC5G,gBAAM6G;;AACtB,eAAO,AAACQ,eAAKT;eACN,AAACS,eAAKR;eACN,WAAA,VAAKC;;;;;;;;;gBAlB1B,GAAA,CAAAJ,kBAmBS7E;AAnBT,cAAA6E,VAmBkBR;AAnBlB,AAoBI,AAAQ1B,cAAW,CAAA,4EAAqCI;;AACxD,MAAO,AAAC/C,MAASqE;;AArBrB,AAAA,MAAAQ;;;;AADF;;AAwBAD","names":["re-view.view-spec/spec-registry","re-view.view-spec/defspecs","specs","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core/reduce-kv","m","k","v","G__33491","cljs.core/map?","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","p1__33492#","re-view.view-spec/Hiccup?","cljs.core/vector?","cljs.core/Keyword","cljs.core/first","p1__33494#","re-view.view-spec/SVG?","and__3938__auto__","clojure.string/starts-with?","cljs.core/name","re-view.view-spec/Element?","re_view.util.any_pred.cljs$core$IFn$_invoke$arity$variadic","re-view.util/is-react-element?","cljs.core/string?","cljs.core/nil?","re-view.view-spec/builtins","cljs.core/boolean?","cljs.core/number?","cljs.core/fn?","cljs.core/object?","cljs.core/keyword?","cljs.core.into.cljs$core$IFn$_invoke$arity$2","re-view.view-spec/spec-kinds","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__33497","vec__33498","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","name","pred","re-view.view-spec/resolve-spec","G__33505","or__3949__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$2","js/Error","cljs.core/set?","spec","p__33510","map__33511","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","re-view.view-spec/spec-kind","spec-name","p__33513","map__33514","re-view.view-spec/normalize-props-map","keys","required","props","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","map__33520","default","pass-through","G__33526","cljs.core/not","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/conj","cljs.core/assoc-in","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","re-view.view-spec/resolve-spec-vector","vec__33534","req","opt","cljs.core/split-with","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/not=","cljs.core.map.cljs$core$IFn$_invoke$arity$2","G__33537","cljs.core/second","p__33545","map__33546","re-view.view-spec/validate-spec","spec-map","value","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","js/console","p__33551","map__33552","re-view.view-spec/validate-props","display-name","prop-specs","prop-keys","cljs.core/keys","e33554","seq__33555","cljs.core/seq","chunk__33556","count__33557","i__33558","temp__5457__auto__","cljs.core/chunked-seq?","c__4351__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/next","p1__33550#","cljs.core/filterv","G__33560","fexpr__33559","cljs.core/namespace","e","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","p__33589","map__33590","re-view.view-spec/validate-children","&more","children-spec","children","e33592","re-view.util/flatten-seqs","remaining-req","remaining-children","i","cljs.core/empty?","seq__33597","chunk__33598","count__33599","i__33600","child","cljs.core/rest"],"sourcesContent":["(ns re-view.view-spec\n  (:require [re-view.util :as util]\n            [clojure.string :as string]))\n\n(def spec-registry\n  \"Global registry for view specs\"\n  {})\n\n(defn defspecs\n  \"Define a view spec\"\n  [specs]\n  (set! spec-registry (merge spec-registry (reduce-kv (fn [m k v]\n                                                        (cond-> m\n                                                                (not (map? v)) (assoc k {:spec      v\n                                                                                         :spec-name k}))) specs specs))))\n\n(def Hiccup? #(and (vector? %)\n                   (keyword? (first %))))\n\n(def SVG? #(and (Hiccup? %)\n                (string/starts-with? (name (first %)) \"svg\")))\n\n(def Element? (util/any-pred\n                util/is-react-element?\n                Hiccup?\n                string?\n                nil?))\n\n(def builtins [[:Boolean boolean?]\n               [:String string?]\n               [:Number number?]\n               [:Function fn?]\n               [:Map map?]\n               [:Vector vector?]\n               [:Element Element?]\n               [:Hiccup Hiccup?]\n               [:SVG SVG?]\n               [:Object object?]\n               [:Keyword keyword?]])\n\n(defspecs (into {} builtins))\n(def ^:private spec-kinds (reduce (fn [m [name pred]] (assoc m pred name)) {} builtins))\n\n(defn resolve-spec\n  \"Resolves a spec. Keywords are looked up in the spec registry recursively until a function or set is found.\n  If a map's :spec is a namespaced keyword, it is resolved and merged (without overriding existing keys)\"\n  [k]\n  (cond (keyword? k) (resolve-spec (or (get spec-registry k)\n                                       (throw (js/Error (str \"View spec not registered: \" k)))))\n        (set? k) {:spec      k\n                  :spec-name :Set}\n        (fn? k) {:spec k}\n        (map? k) (let [spec (get k :spec)]\n                   (if (or (fn? spec)\n                           (set? spec))\n                     k\n                     (merge k (resolve-spec spec))))\n        :else (throw (js/Error (str \"Invalid spec: \" k)))))\n\n(defn spec-kind [{:keys [spec-name spec]}]\n  (or (get spec-kinds spec)\n      (if (set? spec) :Set\n                      spec-name)))\n\n(defn normalize-props-map\n  \"Resolves specs in map\"\n  [{:keys [props/keys\n           props/required] :as props}]\n  (as-> props props\n        (reduce-kv (fn [m k v]\n                     (assoc m k (resolve-spec v))) props (dissoc props :props/keys :props/required))\n        (reduce (fn [m k]\n                  (assoc m (keyword (name k)) (resolve-spec k))) props keys)\n        (reduce (fn [m k]\n                  (assoc m (keyword (name k)) (assoc (resolve-spec k) :required true))) props required)\n        (reduce-kv (fn [m k v]\n                     (let [{:keys [default pass-through required] :as spec} v]\n                       (cond-> (assoc m k spec)\n                               (not pass-through) (update :props/consumed conj k)\n                               required (update :props/required conj k)\n                               default (assoc-in [:props/defaults k] default))))\n                   (assoc props :props/consumed []\n                                :props/required []) props)))\n\n(defn resolve-spec-vector\n  \"Resolves specs in vector\"\n  [specs]\n  (when specs (let [[req opt] (split-with (partial not= :&) specs)]\n                {:req   (map resolve-spec req)\n                 :&more (some-> (second opt) (resolve-spec))})))\n\n(defn validate-spec [k {:keys [required spec spec-name] :as spec-map} value]\n  (when (and spec-map (not (fn? spec)) (not (set? spec)))\n    (prn :invalid-spec? k spec-map))\n  (if (nil? value)\n    (when required (throw (js/Error (str \"Prop is required: \" k))))\n    (when (and spec (not (spec value)))\n          (.log js/console \"value\" value)\n          (.log js/console \"spec\" spec)\n      #_(println \"Failed Spec\" spec-map)\n      #_(prn :spec spec-name :val value :spec spec)\n      (throw (js/Error (str \"Validation failed for prop: \" k \" with spec \" (or spec-name spec) \" and value \" value))))))\n\n(defn validate-props [display-name\n                      {:keys [props/required]\n                       :as   prop-specs} props]\n  (let [prop-keys (keys props)]\n    (try\n      (doseq [k (into required (filterv #(not (#{\"props\" \"spec\"} (namespace %))) (keys props)))]\n        (validate-spec k (get prop-specs k) (get props k)))\n      (catch js/Error e\n        (println \"Error validating props in \" display-name)\n        (throw e))))\n  props)\n\n(defn validate-children [display-name {:keys [req &more] :as children-spec} children]\n  (when children-spec\n    (try\n      (let [children (util/flatten-seqs children)]\n        (loop [remaining-req req\n               remaining-children children\n               i 0]\n          (if (empty? remaining-req)\n            (when-not (empty? remaining-children)\n              (if &more\n                (doseq [child remaining-children]\n                  (validate-spec :children-& &more child))\n                (throw (js/Error (str \"Expected fewer children. Provided \" (count children) \", expected \" (count req) (when &more \" or more\") \".\")))))\n            (if (empty? remaining-children)\n              (throw (js/Error (str \"Expected more children in \" display-name \". Provided \" (count children) \", expected \" (count req) (when &more \" or more\") \".\")))\n              (do (validate-spec (keyword (str \"children-\" i))\n                                 (first remaining-req)\n                                 (first remaining-children))\n                  (recur (rest remaining-req)\n                         (rest remaining-children)\n                         (inc i)))))))\n      (catch js/Error e\n        (.error js/console (str \"Error validating children in \" display-name))\n        (throw (js/Error e))\n        )))\n  children)"]}