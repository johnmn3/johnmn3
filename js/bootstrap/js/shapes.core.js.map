{"version":3,"file":"shapes.core.js","sources":["shapes/core.cljs"],"mappings":";;AAKA,AAAA;AAAA;;;sBAAA,tBAAakN;;AAAb;;;AACG7C,oDAASjH,MAAK6D,pCADjB;QACY7D,wBAAAA,hCADZ,AAAA,GAAA,EAAA,EAAA,UAAA,YAAA,EAAA,CAAA,6CAAA;OACYA,0CAAAA,MAAK6D,vDADjB;;yBACY7D,qBAAAA,9CADZ,IAAAyJ,kBAAA,EAAA,UAAA,OAAA;IAAAC,kBAAA,CAAAC,oBAAA,AAAAC,YAAAH;AAAA,AAAA,GAAA,EAAA,CAAAC,mBAAA;sGACY1J,6CAAAA,vCAAK6D,6CAAAA,zJADjB,QAAA6F,gDAAAA,iEAAAA;;AAAA,IAAAA,sBAAA,CAAAC,oBAAA;AAAA,AAAA,GAAA,EAAA,CAAAD,uBAAA;8GACY1J,iDAAAA,3CAAK6D,iDAAAA,rKADjB,QAAA6F,oDAAAA,qEAAAA;;mDACY1J,nDADZ,MAAA,AAAA6J,2BAAA;;;;;;AAIA,AAAA,qBAAA,6BAAAlH,lDAAMmG,AAJN;AAIA,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,iDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,IAAAC,yBAAA;AAAA,AAAA,IAAAlG,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAkG,4BAAA,CAAA,UAAAjG;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAkG,uBAAA,KAAAhG,qBAAA,AAAA+F,6BAAA,KAAA,IAAA;AAAA,AAAA,OAAAD,wDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAAE;;;;;AAAA,AAAA,mDAAA,nDAAMF,8DACF1C,MAAMC,SAASxJ;AAChB,iCAAA,1BAACoK,oBAAQpK,yFAAOuJ,MAAMC,1HAFzB;;;wFAIIN,QAAQC,WAAaC,tCADrBzC,QAAQC,7EAHZ,AAAA,AAAA,0DAAA,1DAAMqF;gDAMM,6CAAA,7CAAC9H,gIAAMwC,QAAQC,sCAET,AAACtD,kBAAQ8F,hPAR3B,AAKG,OAACgB,oBAAQ,AAACgD,eAAKhE,yJAECF,QAAQC;;;AAP3B;AAAA,AAAA,uCAAA,WAAAiD,lDAAMH;AAAN,AAAA,IAAAI,WAAA,AAAA3H,gBAAA0H;IAAAA,eAAA,AAAAE,eAAAF;IAAAG,WAAA,AAAA7H,gBAAA0H;IAAAA,eAAA,AAAAE,eAAAF;IAAAI,WAAA,AAAA9H,gBAAA0H;IAAAA,eAAA,AAAAE,eAAAF;IAAAK,WAAA,AAAA/H,gBAAA0H;IAAAA,eAAA,AAAAE,eAAAF;AAAA,AAAA,IAAAM,qBAAA;AAAA,AAAA,OAAAA,wDAAAL,SAAAE,SAAAC,SAAAC,SAAAL;;;AAAA,AAAA,6CAAA,7CAAMH;;AAUN,AAAA,AAVA;;;;;;;;;;;;;;;;AAUA,AAAA,AAAA,AAAA,mDAAArD,nDAASnE;;6EAEGtB,MAAK6D,nFAFjB,AAAA,AAAA,kEAAA,lEAASvC;;IAEGtB,JAFZ,AAAA,gBAAA;AAGI,YAAKsB,kBAAM,AAACJ,+CAAO,7EAHvB;4BAGuBgF,VAAK1G;AAAL,AAAA,IAAA2G,aAAAD;YAAA,AAAA3I,4CAAA4I,WAAA,IAAA,nEAAYC;eAAZ,AAAA7I,4CAAA4I,WAAA,IAAA,tEAAkBE;AAAlB,kKACoC1B,AAAD,nGAAnBuD,VAAP1I,4HAAgC4G,jLAAvC,+GAAsB,CAAA,zGAArBjI,wDAAY,qIAAmCkI;;CAClD7G,aACA,kDAAA,lDAAC4F,sDAAYvB;;;yEAEzB7D,zEARX,AAAA,AAAA,8DAAA,9DAASsB;;IAQEtB,JARX,AAAA,gBAAA;AAQiBR,AARjB;;;2EAUYQ,MAAK8D,jFAVjB,AAAA,AAAA,gEAAA,hEAASxC;;IAUGtB,JAVZ,AAAA,gBAAA;AAAA,AAWI,OAAC2F,4CAAInG,aAAMsE;;;2EACH9D,MAAK8D,EAAEC,nFAZnB,AAAA,AAAA,gEAAA,hEAASzC;;IAYGtB,JAZZ,AAAA,gBAAA;AAaI,OAACgE,4CAAIxE,aAAMsE,EAAEC,lEAbjB;;;+EAeW/D,MAAKoB,IAAIuG,zFAfpB,AAAA,AAAA,oEAAA,pEAASrG;;IAeEtB,JAfX,AAAA,gBAAA;AAgBI,YAAKsB,kBAAM,AAACnD,8CAAMqB,aAAM4B,IAAIuG,7FAhBhC;;;6FAiBmB3H,MAAKoB,nGAjBxB,AAAA,AAAA,kFAAA,lFAASE;;IAiBUtB,JAjBnB,AAAA,gBAAA;AAAA,AAkBI,OAAC6K,0BAAUrL,aAAM4B;;;wEAETpB,MAAKoB,9EApBjB,AAAA,AAAA,6DAAA,7DAASE;;IAoBGtB,JApBZ,AAAA,gBAAA;AAqBI,YAAKsB,kBAAM,AAAC6D,+CAAO3F,aAAM4B,1FArB7B;;;AAAA,AAAA,AAAA,8DAAA,9DAASE,yEAuBAtB;;AAvBT,AAAA,gBAAA,ZAuBSA;AAvBT,AAuBe,OAACoD,cAAI5D;;;uFAELQ,MAAKgH,OAAOvJ,pGAzB3B,AAAA,AAAA,4EAAA,5EAAS6D;;IAyBMtB,JAzBf,AAAA,gBAAA;AAAA,AA0BI,OAACmK,yDAAUnD,yDAAO,AAACoD,wGAAO5K;;;AA1B9B,AAAA,6BAAA,7BAAS8B;AAAT,AAAA,0FAAA;;;AAAA,AAAA,mCAAA,nCAASA;;AAAT,AAAA,sCAAA,tCAASA;;AAAT,AAAA,2CAAA,WAAAiH,mBAAAC,qBAAAC,9FAASnH;AAAT,AAAA,OAAAoH,iBAAAF,qBAAA;;;AAAA;;;yBAAA,zBAAS9G,0DAAOlC;AAAhB,AAAA,YAAA8B,kBAAgB9B;;;AAAP8B,AA8BT,4BAAA,5BAAMhD,gEAAeqB,QAAQkB;AAC3B,oBAAI,AAAC8C,MAAS9C,1BADhB;AAEI,MAAO,KAAAnB,MAAWC;;AAClB,OAAC+K,WAAc7J;;;AAEnB,kCAAA,lCAAMN,4EAAqBZ,QAAQiC,MAAME,MAAMjB;AAC7C,IAAMD,WAAS,AAACtC,0BAAcqB,QAAQkB,jDADxC;AACE,AACE,GAAI,EAAA,yBAAA,xBAAIe,SAAMhB,gBAAAA,YAASkB;AACrBlB;;AACA,MAAO,KAAAlB,MAAWC;;;AAExB;;;kDAEG1B,7BAFH,rBAAM8B;AAAN,AAGE,0BAAA,1BAACzB,qDAAyCL;;AAC1C,8BAAA,2CAAA,sDAAA,uDAAA,qDAAA,yDAAA,sDAAA,wDAAA,uDAAA,yDAAA,OAAA,oDAAA,tjBAACyD,4UAEiBzD,+GAEAA,vDADAA;;AAKpB;;;wDAEGC,MAAMJ,tCAFT,xBAAM2B;AAAN,AAGE,0BAAA,1BAACnB,oDAAwCJ;;AACzC,0BAAA,1BAACI,qDAAyCR;;AAC1C,8BAAA,2CAAA,sDAAA,uDAAA,qDAAA,qDAAA,+CAAA,IAAA,gDAAA,IAAA,6DAAA,gEAAA,yDAAA,OAAA,oDAAA,jnBAAC4D,sfAKiB5D,/DADAI;;AAKpB;;;qBAAA,rBAAMoB,kDAEH+B;AAFH,AAGE,0BAAA,1BAAC/C,mDAAuC+C;;AACxC,OAAC5B,sBAAU4B,KAAKA;;AAElB;;;uBAAA,vBAAMmB,sDAEHlC;AACD,0BAAA,1BAAChC,mDAAuCgC,nDAH1C;;AAIE,OAACoB,uBAAQ,iBAAM6B,IAAE,CAAA,YAAajD;qiBAKVA,ihBACAA,lQAEE,QAAA,PAAGA,YAAQ,CAAGA,OAAKiD,rHADjBjD,ptBAPf,AAAA,+CAAA,gDAAA,yDAAA,oDAAA,uDAAA,0DAAA,qDAAA,sDAAA,+CAAA,2DAAA,IAAA,OAAA,aAAA,mFAAA,mFAAA,iBAAA,mHAAA,6GAAA,0DAAA,uDAAA,3IASaA,KAAKA;;;AAI7B,AAAA;;;oBAAA,4BAAAqC,hDAAM+D;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,gDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,gDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,gDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAhH,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,AAAA,kDAAA,lDAAMgH,6DAEFxE;AAFJ,AAES,uDAAA,MAAA,tDAACiF,4DAAcjF;;;AAFxB,AAAA,kDAAA,lDAAMwE,6DAGFpG,KAAK4B;AACN,0BAAA,1BAAC5D,mDAAuCgC,nDAJ3C;;AAKG,OAAC6G,gDAAM7G,KAAKA,KAAK4B;;;AALpB,AAAA,kDAAA,lDAAMwE,6DAMFxI,MAAMJ,OAAOoE;AACf,0BAAA,1BAAC5D,oDAAwCJ,pDAP3C;;AAQE,0BAAA,1BAACI,qDAAyCR;;mWAIvBA,1HAFAoE,zOADlB,8BAAA,2CAAA,qDAAA,sDAAA,yDAAA,6DAAA,nSAACR,6RAEiBxD;;;AAXrB,AAAA,4CAAA,5CAAMwI;;AAAN,AAcA;;;8CAEG/H,3BAFH,nBAAM0L;m3BAKmB1L,pKAMA,CAAA,MAAK,AAACyI,gBAAMzI,tuBAXrC,AAGE,8BAAA,wCAAA,gDAAA,gEAAA,mEAAA,oDAAA,uDAAA,qDAAA,sDAAA,+CAAA,mEAAA,yDAAA,wDAAA,KAAA,KAAA,SAAA,4CAAA,sDAAA,uDAAA,IAAA,YAAA,v2BAAC+C;;AAaH,AAAA;;;mBAAA,2BAAAiB,9CAAMyB;AAAN,AAAA,IAAAxB,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAwB,sDAAArB;;;mEAEKN,nEAFL,AAAA,AAAA,AAAA2B,wDAAA;AAAA,2cAOoB3B,3cAJlB,8BAAA,2CAAA,sDAAA,uDAAA,qDAAA,qDAAA,uDAAA,MAAA,yDAAA,MAAA,sDAAA,yDAAA,QAAA,oDAAA,hkBAACf;;;AAHH,AAAA,AAAA0C,2CAAA;;AAAA;AAAA,AAAA,AAAAA,qCAAA,WAAAC;AAAA,AAAA,IAAAlB,qBAAA;AAAA,AAAA,OAAAA,wDAAA,AAAAC,cAAAiB;;;AAcA,AAdA;;;+BAcA,/BAAMrF,sEAEHwC;AAFH,AAGE,GAAM,4BAAWF,3BAAME;AAAvB,0FAAyCA;;GACnC,6CAAWF,5CAAM,AAACC,gBAAMC,pBAD9B;AACgDA;;AADhD,AAEY,IAAA4G,WAAkB,AAAC7G,gBAAMC;AAAzB,AAAA,gIAAA4G,mDAAAA,3KAACpJ,6DAAAA,uEAAAA;;;;;AAEf;;;8DAEGyD,OAAOoE,1CAFV,3BAAM0D;AAGJ,mDAAA,WAAAC,vDAACvK,PAHH;AAGE,AAAM,GAAI,OAAAuK;AAAY,iBAAAA,TAAG3D;;AAAnB2D;;GAAgC/H;;AAExC,4BAAA,5BAAM3B,gEAAe5B;AAArB,OACGgC,PAAD,sDAAQ,WAAAqG,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAM3F,QAAN,AAAArE,4CAAAkK,WAAA,IAAA;IAAYzF,QAAZ,AAAAzE,4CAAAkK,WAAA,IAAA;IAAkB3F,QAAlB,AAAAvE,4CAAAkK,WAAA,IAAA;IAAwB1F,QAAxB,AAAAxE,4CAAAkK,WAAA,IAAA;IAAAC,aAAAF;QAAA,AAAAjK,4CAAAmK,WAAA,IAAA,/DAAgC7G;IAAEnC,IAAlC,AAAAnB,4CAAAmK,WAAA,IAAA;kHAEG,EAAI,CAAGhJ,IAAEsD,QAAOtD,EAAEsD,zCADlB,EAAI,CAAGnB,IAAEe,QAAOf,EAAEe,uDAGlB,EAAI,CAAGlD,IAAEqD,QAAOrD,EAAEqD,nLAJrB,AAAA,0IAGG,EAAI,CAAGlB,IAAEiB,QAAOjB,EAAEiB;oIAGrB,kDAAA,lDAACsD,sDAAY,AAACC,+CAAOC,wBAAQpG,9PANrC,mFAAA,SAAA,SAAA,UAAA;;AAQF;;;8DAEGrC,nCAFH,3BAAMqD;AAAN,AAAA,kDAAA,uDAGW,CAAA,CAAA,CAAA,CAAG,iBAAA7B,mBAAI,AAAA,6EAAIxB;AAAR,AAAA,oBAAAwB;AAAAA;;AAAA;;OACA,iBAAAA,mBAAI,AAAA,+EAAKxB;AAAT,AAAA,oBAAAwB;AAAAA;;AAAA;;QACA,iBAAAA,mBAAI,AAAA,qFAAQxB;AAAZ,AAAA,oBAAAwB;AAAAA;;AAAA;;QACA,iBAAAA,mBAAI,AAAA,6EAAIxB;AAAR,AAAA,oBAAAwB;AAAAA;;AAAA;;QACA,iBAAAyH,qBAAa,AAAA,6EAAIjJ;AAAjB,AAAA,oBAAAiJ;AAAA,UAAAA,NAAS5G;AACP,IAAAuF,aAAgC,AAAC3D,0BAAc5B,3CADjD;YACE,AAAA3B,4CAAAkH,WAAA,IAAA,nEAAO7C;YAAP,AAAArE,4CAAAkH,WAAA,IAAA,nEAAazC;YAAb,AAAAzE,4CAAAkH,WAAA,IAAA,nEAAmB3C;YAAnB,AAAAvE,4CAAAkH,WAAA,IAAA,nEAAyB1C;AAAzB,AACED;;AAFJ;;MAPd,yDAWW,CAAA,CAAA,CAAA,CAAG,iBAAAzD,mBAAI,AAAA,8EAAIxB;AAAR,AAAA,oBAAAwB;AAAAA;;AAAA;;OACA,iBAAAA,mBAAI,AAAA,8EAAKxB;AAAT,AAAA,oBAAAwB;AAAAA;;AAAA;;QACA,iBAAAA,mBAAI,AAAA,uFAASxB;AAAb,AAAA,oBAAAwB;AAAAA;;AAAA;;QACA,iBAAAA,mBAAI,AAAA,6EAAIxB;AAAR,AAAA,oBAAAwB;AAAAA;;AAAA;;QACA,iBAAAyH,qBAAa,AAAA,6EAAIjJ;AAAjB,AAAA,oBAAAiJ;AAAA,UAAAA,NAAS5G;AAAT,AACE,IAAA6L,aAAgC,AAACjK,0BAAc5B;YAA/C,AAAA3B,4CAAAwN,WAAA,IAAA,nEAAOnJ;YAAP,AAAArE,4CAAAwN,WAAA,IAAA,nEAAa/I;YAAb,AAAAzE,4CAAAwN,WAAA,IAAA,nEAAmBjJ;YAAnB,AAAAvE,4CAAAwN,WAAA,IAAA,nEAAyBhJ;AACvBA,AADF;;AADF;;;;AAKd,2BAAA,3BAAMuB,8DAAczG;AAClB,IAAMiD,SAAO,AAACI,yBAAarD,tCAD7B;AACE,AAAA,kLACoBiD,8CAAY,AAAA,pIAAvB,FAAN,GAAS,AAAA,gNAAwBjD,jHAAR,iBAAAwB,lHAAtB;AAAsB,AAAA,oBAAAA;AAAAA;;AAAA;;gIAA8BxB,7EAAJ,AAAA,pCAAJ,iBAAAwB,xBAA5C;AAA4C,AAAA,oBAAAA;AAAAA;;AAAA;;4NACbxB,lHAAR,iBAAAwB,3BAARyB,8CAAY,AAAA,tIAAxB,FAAN,GAAS,AAAA,FAAN;AAAuB,AAAA,oBAAAzB;AAAAA;;AAAA;;iIAA8BxB,9EAAJ,AAAA,pCAAJ,iBAAAwB,xBAA7C;AAA6C,AAAA,oBAAAA;AAAAA;;AAAA;;;;AAErD;;;kDAEG+B,7BAFH,rBAAMiC;AAGJ,IAAMjC,aAAO,AAACpB,6BAAiBoB,9CAHjC;IAIQN,SAAO,AAACG,4CAAIC,yBAAaE;uXAEpB,AAAA,uFAAS,gEAAA,hEAACR,8CAAMC,2EAAgBC,9dADhC,AAAA,qFAAQ,gEAAA,hEAACF,8CAAMC,yEAAeC,rTAFzC,AAAA,kDAAA,4QAAA;;AAKF,gCAAA,hCAAMf,wEAAgBG;mEAGfL,wEAFA,AAACoB,4CAAI,oEAAA,pEAACsE,gDAAQC,yBAAetF,hQAG7B,mEAAA,5DAACuB,8CAAMyD,rDAJd,qFAEO,kDAAA,lDAAC+D;;AAIR,qCAAA,rCAAMhJ,kFAAqBC;AAA3B,yHACO,4CAAA,WAAAwF,vDAACzE,zHAED,OAACQ,8CAAMyD,cADP,kDAAA,lDAAC+D;AADD,AAAM,GAAI,CAAAvD,4BAAA1G;AAAa,oDAAK,eAAA0G,fAACC;;AAAvBD;;GAAmCxF;;AAQhD,+BAAA,/BAAMiD,sEAAetF;AAArB,AACE,IAAA0I,aAAA,AAAAC,gBAAgD3I;IAAhD0I,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAE,gCAAA,AAAAF,+BAAA,KAAA,OAAA,QAAA,AAAA9E,8CAAAiF,mBAAAH,YAAAA;YAAAA,RAAwC/F;WAAxC,AAAAmG,4CAAAJ,eAAA,lEAActE;eAAd,AAAA0E,4CAAAJ,eAAA,tEAAmB7B;QAAnB,AAAAiC,4CAAAJ,eAAA,/DAA4BK;WAA5B,AAAAD,4CAAAJ,eAAA,lEAA8BX;IACxBnG,WAAS,4DAAA,wGAAA,pKAACc,sDAAOC;AACrB,oDAAA,7CAACwB,gIAAMC,KAAK,AAACC,+CACC,3LAHhB;oBAGgB2D,FAAKlH;AAAL,AAAA,IAAAmH,aAAAD;QAAA,AAAAtH,4CAAAuH,WAAA,IAAA,/DAAQhB;QAAR,AAAAvG,4CAAAuH,WAAA,IAAA,/DAAUC;AAAV,AACE,IAAAuC,WAAMxD;IAANwD,eAAA,EAAA,CAAAA,oBAAAtJ,oBAAA,AAAAsJ,aAAA;AAAA,AAAA,QAAAA;KAAA;AACK,wDAAA,jDAACxI,+CAAOnB,iDAAKsB;;;KADlB;AAEU,wDAAA,jDAACH,+CAAOnB,4DAAUoB;;;KAF5B;AAGU,IAAAoJ,WAAMlH;IAANkH,eAAA,EAAA,CAAAA,oBAAAnK,oBAAA,AAAAmK,aAAA;AAAA,AAAA,QAAAA;KAAA;AACQ,IAAApB,aAAgC,AAACjG,0BAAc8E;YAA/C,AAAArI,4CAAAwJ,WAAA,IAAA,nEAAOnF;YAAP,AAAArE,4CAAAwJ,WAAA,IAAA,nEAAa/E;YAAb,AAAAzE,4CAAAwJ,WAAA,IAAA,nEAAmBjF;YAAnB,AAAAvE,4CAAAwJ,WAAA,IAAA,nEAAyBhF;sDACfpE,tDAAR,wDAAA,+DAAA,hHAACmB,PADH;kBACE+C;AAAsB,AAAtB,oDAA2B,iBAAAxD,mBAAAwD;AAAA,AAAA,oBAAAxD;AAAAA;;AAAA;;MAAL,iJAAA,iEAAA,iEAAA,5NAA0B,AAAA,0IAAgB,SAASuD,RAANE,iEAAoBC,tHAA9BpE,8HAAoCqE,TAAT;;;;;;AAE5F,IAAAqB,aAAY,AAACC,yBAAa3F;QAA1B,AAAAJ,4CAAA8F,WAAA,IAAA,/DAAOxC;QAAP,AAAAtD,4CAAA8F,WAAA,IAAA,/DAAS3E;AAAT,AACE,wDAAA,+DAAA,hHAACI,+CAAOnB;kBAARqH;AAAsB,oDAAK,iBAAA3G,mBAAA2G,xFAA3B;AAA2B,AAAA,oBAAA3G;AAAAA;;AAAA;;0PAA2CK,vGAAbf,7IAAnC,iJAAA,mDAAA,mDAAA,hMAA0B,AAAA,0IAAgBkD;;;;;;;KAR9E;AASa,wDAAA,+DAAA,jEAAQlD,/CAAPmB;kBAADkJ;oDAA2B,iBAAA3J,mBAAA2J,xFAAL,AAAtB;AAA2B,AAAA,oBAAA3J;AAAAA;;AAAA;;kLAAkD,AAAA,5KAAvD,+QAAA,rNAA8BoC,4DAAU,kDAAA,hEAAJyD,iKAA+BvG,nJAA1BsK,5DAAZ;;;;;KAThE;AAUS,wDAAA,+DAAA,hHAACnJ,+CAAOnB;kBAAR4I;AAAA,AAAsB,oDAAK,iBAAAlI,mBAAAkI;AAAA,AAAA,oBAAAlI;AAAAA;;AAAA;;MAAL,+IAAA,zFAAyB,AAAA,qFAAQV;;;;;;AAC9DA;;;;UAEJ,+BAAA,mFAAA,+CAAA,0DAAA,wDAAA,+DAAA,lVAACa,sBAAYC,/BADbA,yaAGR,AAACrB,6CAAK+E,6BAAcuB,vFADnBkB;;AAGX,wBAAA,xBAAMmF,wDAAWlN;AAAjB,AAAA,0FAAA,kDACQ,+EAAA,+CAAA,sDAAA,gDAAA,pOAACuF,qDAAM,AAACC,mBAAOxF,sKACpB,AAACsF,6BAActF;;AAElB;;;kDAEGoF,MAAMpF,nCAFT,rBAAMwK;AAGJ,GAAI,6CAAA,7CAAC9E,+FAAO,AAAA,mFAAO1F,rLAHrB;wHAI2B,xHAAvB,2DAAA,oLAAoD,AAAA,1EAAvB,7CAALO,6CAAMmH,hHAAvB1H,9CAANsB,mUAA8DtB,rHAAzBwK,mBAAOpF;;AAC7C,2DAAA,pDAAC9D,8CAAMtB,+DAAcoF;;;AAEzB;;;wDAEGpF,hCAFH,xBAAM+B;AAGJ,GAAI,6CAAA,7CAAC2D,+FAAO,AAAA,mFAAO1F,rLAHrB;AAII,2DAAA,pDAACsB,8CAAMtB,mEAAgB,AAACO,6CAAKwB,sBAAU,AAAA,2FAAW/B;;AAClD,2DAAA,yDAAA,7GAACsB,8CAAMtB;;;AAEX;;;8CAEGoF,MAAMpF,jCAFT,nBAAMoI;AAAN,AAGE,GAAI,6CAAA,7CAAC1C,+FAAO,AAAA,mFAAO1F;wUAC4CA,hNAAtC,xHAAvB,2DAAA,kLAAkD,AAAA,xEAArB,7CAALO,6CAAMmH,iEAAatC,jLAApCpF,9CAANsB,8MAAqC8G;;AACtC,2DAAA,pDAAC9G,8CAAMtB,0DAAYoF;;;AAEvB;;;sBAAA,tBAAM7D,oDAEHvB;AAFH,AAGE,GAAI,6CAAA,7CAAC0F,+FAAO,AAAA,mFAAO1F;AACjB,2DAAA,pDAACsB,8CAAMtB,mEAAgB,AAACO,6CAAKgB,oBAAQ,AAAA,2FAAWvB;;AAChD,2DAAA,oDAAA,xGAACsB,8CAAMtB;;;AAEX;;;sDAEGoF,MAAMpF,rCAFT,vBAAMgL;AAAN,AAGE,AAACR,mBAAOpF,MAAMpF;;AACd,OAACoI,iBAAKhD,MAAMpF;;AAGd;;;gDAEGsE,OAAOtE,nCAFV,pBAAMmN;AAGJ,0BAAA,1BAAC1L,qDAAyC6C,rDAH5C;;AAIE,IAAApD,WAAM,AAAA,mFAAOlB;IAAbkB,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AACQ,4DAAA,rDAACuG,+CAAOzH,qDAAS0N,yBAAapJ;;;;AACpC,2DAAA,pDAAChD,8CAAMtB,6DAAasE;;;;AAGxB;;;kDAEGA,OAAOtE,pCAFV,rBAAM2J;AAAN,AAGE,0BAAA,1BAAClI,qDAAyC6C;;AAC1C,GAAI,gDAAA,hDAACyJ,yGAAa,AAAA,mFAAO/N;AACvB,2DAAA,pDAACsB,8CAAMtB,8DAAcsE;;AADvB;;;AAGF,0BAAA,1BAAMzD,4DAAaC,EAAEC,MAAMC;AAA3B,AACE,IAAM4D,QAAM,AAAA,6EAAI9D;IACVuH,QAAM,AAAA,8EAAIvH;AADhB,AAEE,uDAAA,hDAACQ,8CAAMR,4DAAU,AAACP,6CAAK;kBAAAiL;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAA9K,4CAAA+K,WAAA,IAAA,/DAAMzH;QAAN,AAAAtD,4CAAA+K,WAAA,IAAA,/DAAQ5J;gHAEL,CAAGb,QAAM,CAAGa,IAAEwG,pCADd,CAAGtH,QAAM,CAAGiD,IAAEY,xGADjB,AAAA;;CAGA,AAAA,wFAAS9D;;AAEpC;;;uBAAA,vBAAM+E,sDAEH7B,EAAEnC,EAAE7B;AAFP,AAGE,0BAAA,1BAACyB,gDAAoCuC;;AACrC,0BAAA,1BAACvC,gDAAoCI;;AACrC,IAAAoJ,WAAM,AAAA,mFAAOjL;IAAbiL,eAAA,EAAA,CAAAA,oBAAA9J,oBAAA,AAAA8J,aAAA;AAAA,AAAA,QAAAA;KAAA;qDAEc,oDAAA,pDAAC3J,qGAAU0C,vDADXhE,nGAEA,6JAAA,tJAACsB,sMAAUO;;;KAHzB;qDAKe,iFAAA,jFAACP,gIAAS0C,lFADV,AAACnD,wBAAYb,MAAMgE,EAAEnC,nIAErB,wLAAA,jLAACP,iOAASO;;;KANzB;mGAOY,oDAAA,+DAAA,nHAACP,8CAAMtB,wJAAkBgE,EAAEnC,3SAE3B,wWAAA,jWAACP,iZAASO,nWADV,iQAAA,jQAACP,gTAAS0C;;;;mGAEhBhE,9CACA,oDAAA,pDAACsB,mGAAS0C,xJACV,2JAAA,pJAAC1C,oMAASO;;;;AAElB,AAAA;;;oBAAA,4BAAAiE,hDAAMjC;AAAN,AAAA,IAAAkC,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAlC,uDAAAqC;;;oEAEK3C,pEAFL,AAAA,AAAA,AAAAM,yDAAA;AAGE,OAACgB,uBAAQ,oFAAA,sDAAA,yGAAA,qDAAA,kDAAA,+CAAA,IAAA,gDAAA,IAAA,jcAACU,qDAAM,AAACC,mBAAOjC,sbAKHA,5hBARvB;;;AAAA,AAAA,AAAAM,4CAAA;;AAAA;AAAA,AAAA,AAAAA,sCAAA,WAAAwJ;AAAA,AAAA,IAAA/G,qBAAA;AAAA,AAAA,OAAAA,wDAAA,AAAAC,cAAA8G;;;AAWA,AAAA,AAXA;;;qBAWA,6BAAAvH,lDAAMgG;AAAN,AAAA,IAAA/F,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAA+F,wDAAA5F;;;qEAEK3C,rEAFL,AAAA,AAAA,AAAAuI,0DAAA;AAiBO,uEAAA,AAAA,hEAAClI,8CAAMC,mGAZP,AAACQ,+CAAO,WAAK7B,MAAMxC,xNAL1B;qGAM0B,AAACsC,6CAAK,iBAAAC,WAAA,9KADjB,AAAA,kDAAA;AACiB,AAAA,kFAAAA,4BAAAA,tGAACC,sCAAAA,gDAAAA;2kBAIP,AAACc,kBAAQ,iBAAAmG,WAAA,xGALpB,5gBAEiB,AAAChC,+CAAOzH,MAAM,oMAAA,iDAAA,nPAAI,uIAAA,vIAAC0F,6CAAE,AAAA,mFAAO1F,mKAERgJ,iBAAE,AAACpF,8CAAMoF,iBAAE,AAAA,wFAASxG;AACrC,AAAA,kFAAAiH,4BAAAA,tGAACjH,sCAAAA,gDAAAA;;gLAEZ,4CAAA,WAAAiD,vDAACrC,7KAPlB,2CAAA,mDAAA,qBAAA;AAOiB,AAAM,GAAI,kJAAA,lJAACsC,6CAAE,AAAA,mFAAAD;AACL,OAAA,6EAAAA;;AACA,OAAA,qFAAAA;;GACH,AAACrC,4CAAIC,yBAAa,AAACC,kBAAQC,sBAXjDO,kBADA,AAAC3B,6BAAiBoB,/CAElB;;;AALP,AAAA,AAAAuI,6CAAA;;AAAA;AAAA,AAAA,AAAAA,uCAAA,WAAAC;AAAA,AAAA,IAAAzF,qBAAA;AAAA,AAAA,OAAAA,wDAAA,AAAAC,cAAAwF;;;AAmBA,AAAA,AAnBA;;;oBAmBA,4BAAAjG,hDAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,uDAAAF;;;AAAA,AAAA,AAAA,AAAAE,yDAAA,WAEK7C;wJAGE,AAACc,+CAAO,WAAK7B,MAAMxC,xNAL1B,AAiBO,uEAAA,AAAA,hEAAC4D,8CAAMC;AAZC,AAAA,kDAAA,mDACY,AAACvB,6CAAK,iBAAA2L,WAAA;AAAA,AAAA,kFAAAA,4BAAAA,tGAACzL,sCAAAA,gDAAAA;mhBADnB,9gBAEkB,AAACiF,+CAAOzH,MAAM,oMAAA,gDAAA,lPAAI,uIAAA,vIAAC0F,6CAAE,AAAA,mFAAO1F,mKAERgJ,iBAAE,AAACpF,8CAAMoF,iBAAE,AAAA,0FAAUxG,sEAC/C,AAACc,kBAAQ,iBAAAyG,WAAA;AAAA,AAAA,kFAAAA,4BAAAA,tGAACvH,sCAAAA,gDAAAA;;GAL9B,2CAAA,mDAAA,qBAAA,4DAOkB,4CAAA,WAAAd,vDAAC0B;AAAD,AAAM,GAAI,kJAAA,lJAACsC,6CAAE,AAAA,mFAAAhE;AACL,OAAA,6EAAAA;;AACA,OAAA,uFAAAA;;gHAV1BoC,AACA,kBAFA,AAAC3B,6BAAiBoB,5JAYK,AAACH,4CAAIC,yBAAa,AAACC,kBAAQC;;;AAfzD,AAAA,AAAA6C,4CAAA;;AAAA;AAAA,AAAA,AAAAA,sCAAA,WAAAC;AAAA,AAAA,IAAAC,qBAAA;AAAA,AAAA,OAAAA,wDAAA,AAAAC,cAAAF;;;AA+BA,AA/BA;;;oDAiCGtG,EAAEC,hCAFL,tBAAMkE;AAAN,AAGE,gCAAA,8CAAA,IAAA,lFAACR,sFAAwE3D;;AACzE,2DAAA,pDAACuB,8CAAMtB,gEAAe,6CAAKD;;AAE7B,kBAAA,lBAAMkK,4CAAKlD,IAAIO,MAAM3D;AAArB,AAAA;AAEE,gCAAA,0CAAA,IAAA,9EAACD,oFAAoEqD;;AACrE,gCAAA,4CAAA,IAAA,hFAACrD,sFAAsE4D;;AACvE,gCAAA,2CAAA,IAAA,/EAAC5D,qFAAqEC;;AACtE,0EAAA,WAAA,4DAAA,SAAA,nJAACyD,qDAAMC,qBAAWN,QAAQO,4DAAU3D;;AAEtC,mBAAA,nBAAMiK,8CAAM7G,IAAIO,MAAM3D,KAAKmB;AAA3B,AAAA;AAEE,gCAAA,0CAAA,IAAA,9EAACpB,oFAAoEqD;;AACrE,gCAAA,4CAAA,IAAA,hFAACrD,sFAAsE4D;;AACvE,gCAAA,2CAAA,IAAA,/EAAC5D,qFAAqEC;;AACtE,gCAAA,4CAAA,IAAA,hFAACD,oFAAsEoB;;AACvE,0EAAA,YAAA,4DAAA,SAAA,UAAA,9JAACsC,qDAAMC,sBAAYN,QAAQO,4DAAU3D,SAASmB;;AAEhD;;;4CAEG7E,IAAIC,WAAWC,zCAFlB,lBAAMkK;AAAN,AAGE,gCAAA,0CAAA,IAAA,9EAAC3G,oFAAoEzD;;AACrE,gCAAA,iDAAA,IAAA,rFAACyD,2FAA2ExD;;AAC5E,gCAAA,gDAAA,IAAA,pFAACwD,0FAA0EvD;;AAC3E,0EAAA,WAAA,iEAAA,eAAA,9JAACiH,qDAAMC,qBAAWpH,QAAQC,kEAAgBC;;AAE5C;;;mBAAA,nBAAMqD,8CAEHvD,IAAIC,WAAWC,UAAU2E;AAF5B,AAGE,gCAAA,0CAAA,IAAA,9EAACpB,oFAAoEzD;;AACrE,gCAAA,iDAAA,IAAA,rFAACyD,2FAA2ExD;;AAC5E,gCAAA,gDAAA,IAAA,pFAACwD,0FAA0EvD;;AAC3E,gCAAA,4CAAA,IAAA,hFAACuD,oFAAsEoB;;AACvE,0EAAA,YAAA,iEAAA,eAAA,YAAA,3KAACsC,qDAAMC,sBAAYpH,QAAQC,kEAAgBC,gBAAgB2E;;AAE7D;;;oDAEGgF,MAAMxJ,QAAQD,QAAQ0K,QAAQ4B,5DAFjC,tBAAMmB;AAGJ,0BAAA,1BAACrM,oDAAwCqI,pDAH3C;;AAIE,0BAAA,1BAACrI,sDAA0CnB;;AAC3C,0BAAA,1BAACmB,sDAA0CpB;;AAC3C,0BAAA,1BAACoB,sDAA0CsJ;;AAC3C,0BAAA,1BAACtJ,sDAA0CkL;;AAC3C,IAAMvM,aAAW,CAAGC,UAAQC;IACtB4K,aAAW,CAAGyB,UAAQ5B;AAD5B,0DAGKA,1DADH,QAAG,CAAG,CAAGjB,QAAMxJ,WAAS,CAAG4K,aAAW9K;;AAM1C;;;0BAEE,AAACG,6CAAK,WAAAC,lFAFHiN;AAEG,AAAA,IAAAhN,aAAAD;iBAAA,AAAAE,4CAAAD,WAAA,IAAA,xEAAME;QAAN,AAAAD,4CAAAD,WAAA,IAAA,/DAAiBG;AAAjB,AAAA,0FACGD,WAAW,AAACqK,qBAASrK,WAAW,mBAAA,nBAAC8B;GAD1C,wCAAA,cAAA,OAAA,OAAA,YAAA,eAAA,cAAA,QAAA,cAAA,OAAA,kBAAA,gBAAA,YAAA,cAAA,QAAA,SAAA,SAAA,YAAA,OAAA,eAAA,UAAA,gBAAA,UAAA,eAAA,OAAA,aAAA,aAAA,SAAA,SAAA,cAAA,iBAAA,OAAA,UAAA,gBAAA,YAAA,kBAAA,aAAA,gBAAA,SAAA,WAAA,OAAA,iBAAA,YAAA,uBAAA,eAAA,cAAA,cAAA,aAAA,gBAAA,UAAA,SAAA,OAAA,YAAA,aAAA,UAAA,aAAA,UAAA,aAAA,WAAA,YAAA,cAAA,gBAAA,SAAA,YAAA,aAAA,QAAA,QAAA,iBAAA,QAAA,iBAAA,cAAA,SAAA,QAAA,QAAA,YAAA,cAAA,WAAA,aAAA,iBAAA,WAAA,aAAA,OAAA,YAAA,OAAA,QAAA,OAAA,YAAA,QAAA,WAAA,MAAA,SAAA,YAAA,QAAA,WAAA,YAAA,eAAA,MAAA,WAAA,gBAAA,YAAA,WAAA,WAAA,eAAA,QAAA,OAAA,gBAAA,YAAA,WAAA,UAAA,aAAA,YAAA,YAAA,oBAAA,YAAA,YAAA,UAAA,QAAA,YAAA,aAAA,YAAA,gBAAA,SAAA,YAAA,aAAA,WAAA,UAAA,aAAA,mBAAA,YAAA,OAAA,aAAA,YAAA,YAAA,SAAA,YAAA,YAAA,UAAA,iBAAA,kBAAA,gBAAA,YAAA,YAAA,SAAA,iBAAA,aAAA,cAAA,YAAA,iBAAA,mFAAA,IAAA,MAAA,cAAA,mFAAA,IAAA,MAAA,cAAA,mFAAA,IAAA,IAAA,cAAA,mFAAA,MAAA,MAAA,aAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,aAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,IAAA,MAAA,cAAA,mFAAA,KAAA,MAAA,cAAA,mFAAA,KAAA,KAAA,cAAA,mFAAA,MAAA,MAAA,YAAA,mFAAA,MAAA,KAAA,aAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,IAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,KAAA,KAAA,cAAA,mFAAA,MAAA,IAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,KAAA,cAAA,mFAAA,MAAA,MAAA,YAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,KAAA,MAAA,aAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,KAAA,aAAA,mFAAA,IAAA,MAAA,cAAA,mFAAA,KAAA,MAAA,cAAA,mFAAA,MAAA,KAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,aAAA,mFAAA,MAAA,MAAA,YAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,IAAA,MAAA,YAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,IAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,IAAA,YAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,aAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,IAAA,cAAA,mFAAA,MAAA,IAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,IAAA,MAAA,YAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,KAAA,aAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,aAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,KAAA,MAAA,aAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,YAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,IAAA,cAAA,mFAAA,IAAA,MAAA,cAAA,mFAAA,KAAA,MAAA,cAAA,mFAAA,KAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,IAAA,IAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,IAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,YAAA,mFAAA,IAAA,IAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,IAAA,MAAA,YAAA,mFAAA,IAAA,IAAA,cAAA,mFAAA,MAAA,IAAA,YAAA,mFAAA,MAAA,IAAA,YAAA,mFAAA,KAAA,MAAA,aAAA,mFAAA,MAAA,KAAA,aAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,aAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,KAAA,MAAA,aAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,IAAA,IAAA,YAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,KAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,KAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,KAAA,cAAA,mFAAA,KAAA,MAAA,cAAA,mFAAA,MAAA,KAAA,cAAA,mFAAA,IAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,KAAA,aAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,KAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,aAAA,mFAAA,MAAA,KAAA,YAAA,mFAAA,KAAA,KAAA,aAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,KAAA,aAAA,mFAAA,MAAA,KAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,aAAA,mFAAA,MAAA,MAAA,YAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,KAAA,aAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,KAAA,KAAA,aAAA,mFAAA,KAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,KAAA,IAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,YAAA,mFAAA,MAAA,MAAA,aAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA","names":["o","shape","hue","saturation","lightness","old-spread","old-max","old-min","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","p__15717","vec__15719","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","color-name","_","shapes.core/move-points","m","new-x","new-y","height","G__15631","cljs.core/Keyword","radius","width","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","shapes.core/no-fill","or__3949__auto__","shapes.core/assert-number","p1__15694#","cljs.core/select-keys","unkinded","y","the-text","shapes.core/no-stroke","cljs.core/flatten","cljs.core.update.cljs$core$IFn$_invoke$arity$3","shapes.core/points->string","shapes.core/assure-shape-seq","shapes.core/path-points->string","pts","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","G__15683","state","shapes.core/square","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","attrs","shapes.core/rectangle","js/Error","message","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/max-key","bounds","shapes.core/circle","this","cljs.core.map.cljs$core$IFn$_invoke$arity$2","shapes.core/shape-bounds","cljs.core/butlast","shapes","shapes.core/hsla","size","shapes.core/assert-number-range","blue","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","shapes.core/layer","cljs.core/reverse","x-parsed","x","shapes.core/points-bounds","shapes.core/opacity","cljs.core.into.cljs$core$IFn$_invoke$arity$2","kind","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","amount","key","side","shapes.core/Shape","cljs.core/first","shape-or-shapes","old-x","shapes.core/->Shape","alpha","x-min","p1__15523#","x-max","y-max","y-min","color","src","shapes.core/shape->vector","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","shapes.core/bounds","p1__15680#","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","shapes.core/triangle","points","shapes.core/position","var_args","args__4534__auto__","len__4531__auto__","i__4532__auto__","argseq__4535__auto__","cljs.core/IndexedSeq","shapes.core/above","seq15695","self__4519__auto__","cljs.core/seq","vec__15581","shapes.core/center-point","h","event-1","listener-1","children","js/isNaN","red","listeners","k","not-found","cljs.core.get.cljs$core$IFn$_invoke$arity$3","cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic","cljs.core/str","green","shapes.core/path","seq15428","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/interpose","vec__15476","p1__15515#","cljs.core/name","text","p__15556","vec__15557","v","p1__15531#","shapes.core/fill","old-y","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core.partition.cljs$core$IFn$_invoke$arity$2","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/number?","map__15541","cljs.core/deref","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","d","cljs.core/+","temp__5455__auto__","event-2","listener-2","args","p__15345","vec__15348","event","listener","G__15684","p1__15533#","shapes.core/rotate","G__15419","shapes.core/image","value","G__15698","factor","shapes.core/rgb","vec__15569","writer","shapes.core/-listen","shapes.core/hsl","shapes.core.image.cljs$core$IFn$_invoke$arity$3","cljs.core/count","shapes.core/stroke","G__15560","p__15464","p__15465","vec__15466","vec__15469","val","new-min","shapes.core/colorize","G__15663","new-spread","p1__15532#","cljs.core.interpose.cljs$core$IFn$_invoke$arity$2","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","G__15565","G__15453","p__15648","vec__15650","this__4192__auto__","writer__4193__auto__","opt__4194__auto__","cljs.core/-write","shapes.core/beside","seq15681","G__15309","shapes.core/listen","args-arr__4546__auto__","argseq__4547__auto__","seq15304","G__15305","cljs.core/next","G__15306","G__15307","G__15308","self__4518__auto__","new-max","x__4243__auto__","m__4244__auto__","shapes/core.-listen","goog/typeOf","cljs.core/missing-protocol","shapes.core/IListen","shapes.core/to-hiccup","shapes.core/scale","cljs.core/last","seq15672","cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","shapes.core/text","shapes.core/color-names","shapes.core/scale-points","p1__15460#","shapes.core/rgba","js/parseFloat","shapes.core/rescale","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/contains?","G__15697","vec__15491"],"sourcesContent":["(ns shapes.core)\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Support for _An Introduction to Racket with Pictures_-style pedagogy\n\n(defprotocol IListen\n  (-listen [this listeners]\n           \"Attach event listeners to shape.\"))\n\n(defn listen\n  ([event listener shape]\n   (-listen shape [event listener]))\n  ([event-1 listener-1\n    event-2 listener-2 & args]\n   (-listen (last args)\n            (into [event-1 listener-1\n                   event-2 listener-2]\n                  (butlast args)))))\n\n(deftype Shape [attrs]\n  IListen\n  (-listen [this listeners]\n    (new Shape (reduce (fn [attrs [event listener]]\n                         (assoc attrs (keyword (str \"on-\" (name event))) listener))\n                       attrs\n                       (partition 2 listeners))))\n  IDeref\n  (-deref [this] attrs)\n  ILookup\n  (-lookup [this k]\n    (get attrs k))\n  (-lookup [this k not-found]\n    (get attrs k not-found))\n  IAssociative\n  (-assoc [this key val]\n    (new Shape (assoc attrs key val)))\n  (-contains-key? [this key]\n    (contains? attrs key))\n  IMap\n  (-dissoc [this key]\n    (new Shape (dissoc attrs key)))\n  ISeqable\n  (-seq [this] (seq attrs))\n  IPrintWithWriter\n  (-pr-writer [this writer _]\n    (write-all writer (pr-str attrs))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; helpers for param checks\n\n(defn assert-number [message x]\n  (if (js/isNaN x)\n    (throw (js/Error. message))\n    (js/parseFloat x)))\n\n(defn assert-number-range [message x-min x-max x]\n  (let [x-parsed (assert-number message x)]\n    (if (<= x-min x-parsed x-max)\n      x-parsed\n      (throw (js/Error. message)))))\n\n(defn circle\n  \"Returns a circle of `radius`.\"\n  [radius]\n  (assert-number \"radius must be a number!\" radius)\n  (->Shape {:is-a   :shape\n            :kind   :circle\n            :r      radius\n            :cx     radius\n            :cy     radius\n            :stroke \"none\"\n            :fill   \"black\"}))\n\n(defn rectangle\n  \"Returns a rectangle of `width` and `height`.\"\n  [width height]\n  (assert-number \"width must be a number!\" width)\n  (assert-number \"height must be a number!\" height)\n  (->Shape {:is-a   :shape\n            :kind   :rect\n            :x      0\n            :y      0\n            :width  width\n            :height height\n            :stroke \"none\"\n            :fill   \"black\"}))\n\n(defn square\n  \"Returns a square of dimension `side`.\"\n  [side]\n  (assert-number \"side must be a number!\" side)\n  (rectangle side side))\n\n(defn triangle\n  \"Returns an equilateral triangle with sides of `size`.\"\n  [size]\n  (assert-number \"size must be a number!\" size)\n  (->Shape (let [h (* 0.8660259 size)]\n             {:is-a   :shape\n              :kind   :polygon\n              :x      0\n              :y      0\n              :width  size\n              :height size\n              :points [[0 size]\n                       [(/ size 2) (- size h)]\n                       [size size]]\n              :stroke \"none\"\n              :fill   \"black\"})))\n\n(defn image\n  \"Add an image to the drawing\"\n  ([src] (image 200 200 src))\n  ([size src]\n   (assert-number \"size must be a number!\" size)\n   (image size size src))\n  ([width height src]\n  (assert-number \"width must be a number!\" width)\n  (assert-number \"height must be a number!\" height)  \n   (->Shape {:kind   :image\n             :href   src\n             :width  width\n             :height height})))\n\n(defn text\n  \"Add a label containing `the-text` to a drawing.\"\n  [the-text]\n  (->Shape {:is-a        :shape\n            :kind        :text\n            :text        the-text\n            :x           0\n            :y           18\n            :font-family \"Fira Code\"\n            :font-size   15\n            :font-weight \"normal\"\n            :width       (* 9 (count the-text))\n            :height      18\n            :fill        \"#3f4245\"}))\n\n;; XXX no verification yet, too complicated for the moment\n(defn path\n  \"Create an arbitrary path from a set of points.\"\n  [& points]\n  (->Shape {:is-a   :shape\n            :kind   :path\n            :width  100\n            :height 100\n            :d      points\n            :stroke \"black\"\n            :fill   \"none\"}))\n\n;; TODO add general polygon fn\n;; TODO add spec annotations!\n\n(defn assure-shape-seq\n  \"Returns `shape-or-shapes` wrapped in a vector if it appears to be a single shape.\"\n  [shape-or-shapes]\n  (cond (instance? Shape shape-or-shapes) [shape-or-shapes]\n        (instance? Shape (first shape-or-shapes)) shape-or-shapes\n        :else (assure-shape-seq (first shape-or-shapes))))\n\n(defn scale-points\n  \"Scale a set of `points` by `factor`.\"\n  [points factor]\n  (map #(if (number? %) (* factor %) %) points))\n\n(defn points-bounds [pts]\n  (reduce (fn [[x-min y-min x-max y-max] [x y]]\n            [(if (< x x-min) x x-min)\n             (if (< y y-min) y y-min)\n             (if (> x x-max) x x-max)\n             (if (> y y-max) y y-max)])\n          [100000 100000 -100000 -100000]                   ;; buggy because not max positive/negative\n          (partition 2 (filter number? pts))))\n\n(defn shape-bounds\n  \"Returns a map containing :height :width keys that represent the outer (i.e. highest) x/y position for this shape.\"\n  [shape]\n  {:width  (+ (or (:x shape) 0)\n              (or (:cx shape) 0)\n              (or (:width shape) 0)\n              (or (:r shape) 0)\n              (if-let [pts (:d shape)]\n                (let [[x-min y-min x-max y-max] (points-bounds pts)]\n                  x-max)\n                0))\n   :height (+ (or (:y shape) 0)\n              (or (:cy shape) 0)\n              (or (:height shape) 0)\n              (or (:r shape) 0)\n              (if-let [pts (:d shape)]\n                (let [[x-min y-min x-max y-max] (points-bounds pts)]\n                  y-max)\n                0))})\n\n(defn center-point [shape]\n  (let [bounds (shape-bounds shape)]\n    [(+ (/ (- (:width bounds) (or (:x shape) 0)) 2) (or (:x shape) 0))\n     (+ (/ (- (:height bounds) (or (:y shape) 0)) 2) (or (:y shape) 0))]))\n\n(defn bounds\n  \"Returns a map containing :height :width keys that represent the outer (i.e. highest) x/y position for this group of shapes.\"\n  [shapes]\n  (let [shapes (assure-shape-seq shapes)\n        bounds (map shape-bounds shapes)]\n    {:width  (:width (apply max-key :width bounds))\n     :height (:height (apply max-key :height bounds))}))\n\n(defn points->string [pts]\n  (->> (map (partial interpose \",\") pts)\n       (interpose \" \")\n       flatten\n       (apply str)))\n\n(defn path-points->string [pts]\n  (->> (map #(if (keyword? %) (str (name %)) %) pts)\n       (interpose \" \")\n       (apply str)))\n\n;; TODO rotate can take two more numbers for the centrum, would\n;; probably be better for each thing to rotate around itself\n;; TODO SVG translation/rotation causes slipping, may need to re-calc bounds\n;; TODO re-implement this mess using a transform matrix\n(defn shape->vector [shape]\n  (let [{:keys [kind children d text] :as attrs} @shape\n        unkinded (dissoc attrs :is-a :kind)]\n    (into [kind (reduce                                     ;; clean up/preprocess the string-y bits of the SVG element\n                  (fn [m [k v]]\n                    (case k\n                      :d (update m :d path-points->string)\n                      :points (update m :points points->string)\n                      :rotate (case kind\n                                :path (let [[x-min y-min x-max y-max] (points-bounds d)]\n                                        (update m :transform #(str (or % \"\") \" rotate(\" (:rotate m) \",\" (- x-max x-min) \",\" (- y-max y-min) \")\")))\n                                #_(update m :transform #(str (or % \"\") \" rotate(\" (:rotate m) \",\" (:x attrs) \",\" (:y attrs) \")\"))\n                                (let [[x y] (center-point m)]\n                                  (update m :transform #(str (or % \"\") \" rotate(\" (:rotate m) \",\" x \",\" y \")\"))))\n                      :translate (update m :transform #(str (or % \"\") \" translate(\" (apply str (interpose \",\" (:translate m))) \")\"))\n                      :scale (update m :transform #(str (or % \"\") \" scale(\" (:scale m) \")\"))\n                      m))\n                  unkinded\n                  (select-keys unkinded [:d :points :rotate :translate :scale]))\n           text]\n          (mapv shape->vector children))))\n\n(defn to-hiccup [shape]\n  [:svg (assoc (bounds shape) :x 0 :y 0)\n   (shape->vector shape)])\n\n(defn stroke\n  \"Return `shape` with its stroke set to `color`.\"\n  [color shape]\n  (if (= :svg (:kind shape))\n    (assoc shape :children (mapv (partial stroke color) (:children shape)))\n    (assoc shape :stroke color)))\n\n(defn no-stroke\n  \"Return `shape` with its stroke color turned off.\"\n  [shape]\n  (if (= :svg (:kind shape))\n    (assoc shape :children (mapv no-stroke (:children shape)))\n    (assoc shape :stroke \"none\")))\n\n(defn fill\n  \"Return `shape` with its fill set to `color`.\"\n  [color shape]\n  (if (= :svg (:kind shape))\n    (assoc shape :children (mapv (partial fill color) (:children shape)))\n    (assoc shape :fill color)))\n\n(defn no-fill\n  \"Return `shape` with its fill color turned off.\"\n  [shape]\n  (if (= :svg (:kind shape))\n    (assoc shape :children (mapv no-fill (:children shape)))\n    (assoc shape :fill \"none\")))\n\n(defn colorize\n  \"Return `shape` with its color set to `color`.\"\n  [color shape]\n  (stroke color shape)\n  (fill color shape))\n\n;; XXX SVG transforms are a fucking mess, so this needs to be fixed\n(defn scale\n  \"Return `shape` with rotated by `amount`.\"\n  [amount shape]\n  (assert-number \"amount must be a number!\" amount)\n  (case (:kind shape)\n    :path (update shape :d scale-points amount)\n    (assoc shape :scale amount)))\n\n;; XXX SVG transforms are a fucking mess, so this needs to be fixed\n(defn rotate\n  \"Return `shape` with rotated by `amount`.\"\n  [amount shape]\n  (assert-number \"amount must be a number!\" amount)\n  (if (not= :circle (:kind shape))\n    (assoc shape :rotate amount)))\n\n(defn move-points [m new-x new-y]\n  (let [old-x (:x m)\n        old-y (:y m)]\n    (assoc m :points (mapv (fn [[x y]]\n                             [(+ new-x (- x old-x))\n                              (+ new-y (- y old-y))])\n                           (:points m)))))\n\n(defn position\n  \"Return `shape` with its x and y positions set to `x` and `y`.\"\n  [x y shape]\n  (assert-number \"x must be a number!\" x)\n  (assert-number \"y must be a number!\" y)\n  (case (:kind shape)\n    :circle (-> shape\n                (assoc :cx x)\n                (assoc :cy y))\n    :polygon (-> (move-points shape x y)\n                 (assoc :x x)\n                 (assoc :y y))\n    :path (-> (assoc shape :translate [x y])\n              (assoc :x x)\n              (assoc :y y))\n    (-> shape\n        (assoc :x x)\n        (assoc :y y))))\n\n(defn layer\n  \"Returns a new shape with these `shapes` layered over each other.\"\n  [& shapes]\n  (->Shape (assoc (bounds shapes)\n             :is-a :shape\n             :kind :svg\n             :x 0\n             :y 0\n             :children shapes)))\n\n;; XXX broken for triangles!\n(defn beside\n  \"Return `shapes` with their positions adjusted so they're lined up beside one another.\"\n  [& shapes]\n  (->> (assure-shape-seq shapes)\n       reverse\n       (reduce (fn [state shape]\n                 {:out    (conj (state :out)\n                                (update shape (if (= (:kind shape) :circle)\n                                                :cx\n                                                :x) + (apply + (:widths state))))\n                  :widths (butlast (state :widths))})\n               {:out    '()\n                :widths (map #(if (= (:kind %) :circle)\n                                (:r %)\n                                (:width %))\n                             (map shape-bounds (butlast shapes)))})\n       :out\n       (apply layer)))\n\n(defn above\n  \"Return `shapes` with their positions adjusted so they're stacked above one another.\"\n  [& shapes]\n  (->> (assure-shape-seq shapes)\n       reverse\n       (reduce (fn [state shape]\n                 {:out     (conj (state :out)\n                                 (update shape (if (= (:kind shape) :circle)\n                                                 :cy\n                                                 :y) + (apply + (:heights state))))\n                  :heights (butlast (state :heights))})\n               {:out     '()\n                :heights (map #(if (= (:kind %) :circle)\n                                 (:r %)\n                                 (:height %))\n                              (map shape-bounds (butlast shapes)))})\n       :out\n       (apply layer)))\n\n;;;; from Henderson's functional geometry\n;; flip   : picture \u2192 picture (Flip a picture along its vertical center axis)\n;; rot    : picture \u2192 picture (Rotate a picture anti-clockwise by 90\u00b0)\n;; rot45  : picture \u2192 picture (rotate the picture anti-clockwise by 45\u00b0)\n\n;;;; from \"Creative Scala\" intro:\n;; \"click to reveal\" solutions are a good idea\n;; stroke vs fill? more complicated, but useful.\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; color helpers and scaling fn\n\n(defn opacity\n  \"Set the opacity of the shape to `o`, which should be a decimal number between 0 and 1.0\"\n  [o shape]\n  (assert-number-range \"opacity must be a number between 0 and 1.0!\" 0 1.0 o)\n  (assoc shape :opacity (str o)))\n\n(defn rgb [red green blue]\n  \"Returns a color of `red`, `green`, `blue`, each represented as a number from (0-255).\"\n  (assert-number-range \"red must be a number between 0 and 255!\" 0 255 red)\n  (assert-number-range \"green must be a number between 0 and 255!\" 0 255 green)\n  (assert-number-range \"blue must be a number between 0 and 255!\" 0 255 blue)\n  (apply str \"rgb(\" red \",\" green \",\" blue \")\"))\n\n(defn rgba [red green blue alpha]\n  \"Returns a color of `red`, `green`, `blue`, each represented as a number from (0-255), with an opacity of `alpha` (0.0-1.0).\"\n  (assert-number-range \"red must be a number between 0 and 255!\" 0 255 red)\n  (assert-number-range \"green must be a number between 0 and 255!\" 0 255 green)\n  (assert-number-range \"blue must be a number between 0 and 255!\" 0 255 blue)\n  (assert-number-range \"alpha must be a number between 0 and 1.0!\" 0 1.0 alpha)\n  (apply str \"rgba(\" red \",\" green \",\" blue \",\" alpha \")\"))\n\n(defn hsl\n  \"Returns a color of `hue` (a number between 0-359 representing an angle on the color wheel), `saturation` percentage and `lightness` percentage.\"\n  [hue saturation lightness]\n  (assert-number-range \"hue must be a number between 0 and 359!\" 0 359 hue)\n  (assert-number-range \"saturation must be a number between 0 and 100!\" 0 100 saturation)\n  (assert-number-range \"lightness must be a number between 0 and 100!\" 0 100 lightness)\n  (apply str \"hsl(\" hue \",\" saturation \"%,\" lightness \"%)\"))\n\n(defn hsla\n  \"Returns a color of `hue` (a number between 0-359 representing an angle on the color wheel)/`saturation` (percentage)/`lightness` (percentage)/`alpha` (0.0-1.0).\"\n  [hue saturation lightness alpha]\n  (assert-number-range \"hue must be a number between 0 and 359!\" 0 359 hue)\n  (assert-number-range \"saturation must be a number between 0 and 100!\" 0 100 saturation)\n  (assert-number-range \"lightness must be a number between 0 and 100!\" 0 100 lightness)\n  (assert-number-range \"alpha must be a number between 0 and 1.0!\" 0 1.0 alpha)\n  (apply str \"hsla(\" hue \",\" saturation \"%,\" lightness \"%, \" alpha \")\"))\n\n(defn rescale \n  \"Rescales value from range [old-min, old-max] to [new-min, new-max]\"\n  [value old-min old-max new-min new-max]\n  (assert-number \"value must be a number!\" value)\n  (assert-number \"old-min must be a number!\" old-min)\n  (assert-number \"old-max must be a number!\" old-max)\n  (assert-number \"new-min must be a number!\" new-min)\n  (assert-number \"new-max must be a number!\" new-max)\n  (let [old-spread (- old-max old-min)\n        new-spread (- new-max new-min)]\n    (+ (* (- value old-min) (/ new-spread old-spread))\n       new-min)))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; color name dictionary\n\n(def color-names\n  \"Recognized SVG color keyword names, mapped to their RGB value.\"\n  (mapv (fn [[color-name _]]\n          [color-name (colorize color-name (square 25))])\n        {\"aliceblue\"            [240, 248, 255]\n         \"antiquewhite\"         [250, 235, 215]\n         \"aqua\"                 [0, 255, 255]\n         \"aquamarine\"           [127, 255, 212]\n         \"azure\"                [240, 255, 255]\n         \"beige\"                [245, 245, 220]\n         \"bisque\"               [255, 228, 196]\n         \"black\"                [0, 0, 0]\n         \"blanchedalmond\"       [255, 235, 205]\n         \"blue\"                 [0, 0, 255]\n         \"blueviolet\"           [138, 43, 226]\n         \"brown\"                [165, 42, 42]\n         \"burlywood\"            [222, 184, 135]\n         \"cadetblue\"            [95, 158, 160]\n         \"chartreuse\"           [127, 255, 0]\n         \"chocolate\"            [210, 105, 30]\n         \"coral\"                [255, 127, 80]\n         \"cornflowerblue\"       [100, 149, 237]\n         \"cornsilk\"             [255, 248, 220]\n         \"crimson\"              [220, 20, 60]\n\n         \"cyan\"                 [0, 255, 255]\n         \"darkblue\"             [0, 0, 139]\n         \"darkcyan\"             [0, 139, 139]\n         \"darkgoldenrod\"        [184, 134, 11]\n         \"darkgray\"             [169, 169, 169]\n         \"darkgreen\"            [0, 100, 0]\n         \"darkgrey\"             [169, 169, 169]\n         \"darkkhaki\"            [189, 183, 107]\n         \"darkmagenta\"          [139, 0, 139]\n         \"darkolivegreen\"       [85, 107, 47]\n         \"darkorange\"           [255, 140, 0]\n         \"darkorchid\"           [153, 50, 204]\n         \"darkred\"              [139, 0, 0]\n         \"darksalmon\"           [233, 150, 122]\n         \"darkseagreen\"         [143, 188, 143]\n         \"darkslateblue\"        [72, 61, 139]\n         \"darkslategray\"        [47, 79, 79]\n         \"darkslategrey\"        [47, 79, 79]\n         \"darkturquoise\"        [0, 206, 209]\n\n         \"darkviolet\"           [148, 0, 211]\n         \"deeppink\"             [255, 20, 147]\n         \"deepskyblue\"          [0, 191, 255]\n         \"dimgray\"              [105, 105, 105]\n         \"dimgrey\"              [105, 105, 105]\n         \"dodgerblue\"           [30, 144, 255]\n         \"firebrick\"            [178, 34, 34]\n         \"floralwhite\"          [255, 250, 240]\n         \"forestgreen\"          [34, 139, 34]\n         \"fuchsia\"              [255, 0, 255]\n         \"gainsboro\"            [220, 220, 220]\n         \"ghostwhite\"           [248, 248, 255]\n         \"gold\"                 [255, 215, 0]\n         \"goldenrod\"            [218, 165, 32]\n         \"gray\"                 [128, 128, 128]\n         \"grey\"                 [128, 128, 128]\n         \"green\"                [0, 128, 0]\n         \"greenyellow\"          [173, 255, 47]\n         \"honeydew\"             [240, 255, 240]\n\n         \"hotpink\"              [255, 105, 180]\n         \"indianred\"            [205, 92, 92]\n         \"indigo\"               [75, 0, 130]\n         \"ivory\"                [255, 255, 240]\n         \"khaki\"                [240, 230, 140]\n         \"lavender\"             [230, 230, 250]\n         \"lavenderblush\"        [255, 240, 245]\n         \"lawngreen\"            [124, 252, 0]\n         \"lemonchiffon\"         [255, 250, 205]\n         \"lightblue\"            [173, 216, 230]\n         \"lightcoral\"           [240, 128, 128]\n         \"lightcyan\"            [224, 255, 255]\n         \"lightgoldenrodyellow\" [250, 250, 210]\n         \"lightgray\"            [211, 211, 211]\n         \"lightgreen\"           [144, 238, 144]\n         \"lightgrey\"            [211, 211, 211]\n         \"lightpink\"            [255, 182, 193]\n         \"lightsalmon\"          [255, 160, 122]\n         \"lightseagreen\"        [32, 178, 170]\n         \"lightskyblue\"         [135, 206, 250]\n         \"lightslategray\"       [119, 136, 153]\n\n         \"lightslategrey\"       [119, 136, 153]\n         \"lightsteelblue\"       [176, 196, 222]\n         \"lightyellow\"          [255, 255, 224]\n         \"lime\"                 [0, 255, 0]\n         \"limegreen\"            [50, 205, 50]\n         \"linen\"                [250, 240, 230]\n         \"magenta\"              [255, 0, 255]\n         \"maroon\"               [128, 0, 0]\n         \"mediumaquamarine\"     [102, 205, 170]\n         \"mediumblue\"           [0, 0, 205]\n         \"mediumorchid\"         [186, 85, 211]\n         \"mediumpurple\"         [147, 112, 219]\n         \"mediumseagreen\"       [60, 179, 113]\n         \"mediumslateblue\"      [123, 104, 238]\n         \"mediumspringgreen\"    [0, 250, 154]\n         \"mediumturquoise\"      [72, 209, 204]\n         \"mediumvioletred\"      [199, 21, 133]\n         \"midnightblue\"         [25, 25, 112]\n         \"mintcream\"            [245, 255, 250]\n         \"mistyrose\"            [255, 228, 225]\n         \"moccasin\"             [255, 228, 181]\n         \"navajowhite\"          [255, 222, 173]\n         \"navy\"                 [0, 0, 128]\n\n         \"oldlace\"              [253, 245, 230]\n         \"olive\"                [128, 128, 0]\n         \"olivedrab\"            [107, 142, 35]\n         \"orange\"               [255, 165, 0]\n         \"orangered\"            [255, 69, 0]\n         \"orchid\"               [218, 112, 214]\n         \"palegoldenrod\"        [238, 232, 170]\n         \"palegreen\"            [152, 251, 152]\n         \"paleturquoise\"        [175, 238, 238]\n         \"palevioletred\"        [219, 112, 147]\n         \"papayawhip\"           [255, 239, 213]\n         \"peachpuff\"            [255, 218, 185]\n         \"peru\"                 [205, 133, 63]\n         \"pink\"                 [255, 192, 203]\n         \"plum\"                 [221, 160, 221]\n         \"powderblue\"           [176, 224, 230]\n         \"purple\"               [128, 0, 128]\n         \"red\"                  [255, 0, 0]\n         \"rosybrown\"            [188, 143, 143]\n         \"royalblue\"            [65, 105, 225]\n         \"saddlebrown\"          [139, 69, 19]\n         \"salmon\"               [250, 128, 114]\n         \"sandybrown\"           [244, 164, 96]\n         \"seagreen\"             [46, 139, 87]\n         \"seashell\"             [255, 245, 238]\n         \"sienna\"               [160, 82, 45]\n\n         \"silver\"               [192, 192, 192]\n         \"skyblue\"              [135, 206, 235]\n         \"slateblue\"            [106, 90, 205]\n         \"slategray\"            [112, 128, 144]\n         \"slategrey\"            [112, 128, 144]\n         \"snow\"                 [255, 250, 250]\n         \"springgreen\"          [0, 255, 127]\n         \"steelblue\"            [70, 130, 180]\n         \"tan\"                  [210, 180, 140]\n         \"teal\"                 [0, 128, 128]\n         \"thistle\"              [216, 191, 216]\n         \"tomato\"               [255, 99, 71]\n         \"turquoise\"            [64, 224, 208]\n         \"violet\"               [238, 130, 238]\n         \"wheat\"                [245, 222, 179]\n         \"white\"                [255, 255, 255]\n         \"whitesmoke\"           [245, 245, 245]\n         \"yellow\"               [255, 255, 0]\n         \"yellowgreen\"          [154, 205, 50]}))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; pre-cooked SVG shapes\n\n;; (def fish\n;;   \"An Escher-style fish.\"\n;;   {:is-a   :shape\n;;    :kind   :path\n;;    :width  100\n;;    :height 100\n;;    :d      [:M 9.67 40.17 :C 6.86 37.67 4.49 35.56 2.63 32.93 :c 0 -0.12 0.17 -0.54 0.37 -0.94 :c 1.15 -2.28 2.17 -3.75 4.73 -6.83 :l 1.37 -1.64 :l -0.07 -0.7 :C 8.65 18.39 8.87 15.11 9.97 10.9 :C 10.11 9.63 10.41 10.28 12.04 11.5 :C 13.89 12.99 15.6 13.84 17.34 16.64 :l 2.17 0.09 :c 2.46 0.11 3.46 0.27 4.87 0.72 :l 1.06 0.34 :c 0.01 1.38 0.02 2.76 0.03 4.15 :c 0.01 1.19 0.02 2.38 0.03 3.57 :c -1.23 1.23 -2.53 2.71 -3.76 3.94 :c 1.65 2.68 6.11 4.18 9.99 4.57 :l 1.6 0.14 :l 1.12 1.32 :c 1.26 1.48 2.04 2.15 4.23 3.65 :l 1.52 1.04 :c 0.16 0.09 0.97 0.57 -0.18 0.46 :l -2.26 -0.43 :c -3.09 -0.59 -4.51 -0.78 -5.89 -0.78 :c -1.1 -0 -3.28 0.14 -4.34 0.29 :c -0.45 0.06 -0.52 0.03 -1.64 -0.91 :c -3.5 -2.93 -4.67 -3.77 -6.86 -4.93 :l -1.23 -0.66 :c -2.44 2.44 -4.88 4.88 -7.32 7.32 :c -0.26 0.37 -0.82 -0.35 -0.82 -0.35 :z :M 17.41 33.02 :C 16.08 32.32 14.9 31.64 13.36 30.72 :l -0.79 0.76 :c -0.41 0.4 -1.24 0.97 -1.7 1.43 :c -0.74 0.73 -0.93 1.02 -1.58 2.38 :c -0.68 1.41 -1.04 1.88 -1.03 1.34 :c 0 -0.35 1.35 -2.99 1.85 -3.62 :C 10.36 32.68 11.14 32.01 11.81 31.49 :l 1.26 -0.97 :c -0.49 -0.45 -0.94 -0.85 -1.33 -1.29 :c -0.15 -0.06 -2 1.44 -2.65 2.15 :c -0.34 0.37 -1.01 1.32 -1.51 2.12 :c -0.83 1.34 -1.21 1.74 -1.21 1.27 :c 0 -0.24 1.41 -2.49 2.13 -3.41 :c 0.31 -0.39 0.99 -1.05 1.52 -1.47 :c 0.53 -0.41 1.34 -0.98 1.48 -1.09 :C 10.33 26.87 9.96 25.63 9.24 24.03 :l -1.64 2 :c -2.16 2.63 -2.79 3.52 -3.79 5.35 :l -0.83 1.52 :c 0.7 0.58 4.85 5.64 7.26 7.21 :C 12.8 37.65 14.7 35.72 17.41 33.02 :z :M 9.31 38.59 :C 10.54 36.67 13.23 32.93 14.9 31.91 :c -1.08 1.8 -3.52 3.88 -4.84 6.19 :c -0.21 0.37 -0.42 0.61 -0.55 0.61 :c -0.11 0 -0.21 -0.05 -0.21 -0.12 :z :M 4.85 33.31 :c 0 -0.24 1.31 -2.7 1.75 -3.28 :c 0.74 -0.92 3.91 -4.13 4.01 -3.17 :c -1.95 1.23 -4.25 3.78 -5.05 5.85 :c -0.2 0.4 -0.45 0.73 -0.54 0.73 :c -0.1 0 -0.17 -0.06 -0.17 -0.13 :z :m 32.97 5.78 :c -1.94 -1.35 -3.1 -2.45 -4.44 -4.17 :c -0.25 -0.32 -0.31 -0.33 -2.4 -0.55 :c -4.84 -0.43 -9.35 -2.98 -10.59 -6.68 :c -2.28 -5.68 -0.94 -9.92 -6.21 -14.17 :c -0.45 -0.37 -1.49 -1.13 -2.3 -1.69 :L 10.39 10.81 :C 9.03 15.59 8.84 20.53 9.71 23.84 :c 0.58 2.22 1.63 4.4 3.24 5.81 :c 2.36 2.07 8.78 4.31 14.24 9.65 :l 0.64 -0.06 :c 4.11 -0.38 5.35 -0.34 8.91 0.34 :c 1.13 0.21 2.13 0.4 2.22 0.4 :c 0.09 0.01 -0.42 -0.39 -1.14 -0.89 :z :m -6.77 -2.06 :C 23.62 34.03 21.59 33.07 19.55 31.02 :C 16.84 27.84 15.3 24.33 13.75 20.48 :c -0.78 -2.92 0.56 0.34 0.97 1.38 :c 0.96 2.41 2.05 4.09 2.89 5.63 :c 2.35 4.33 5.52 5.98 14.71 9.58 :c 1.52 0.6 2.43 1.03 2.43 1.13 :c 0 0.09 -0.09 0.16 -0.21 0.16 :c -0.11 -0 -1.68 -0.6 -3.49 -1.33 :z :M 10.68 20.22 :C 10.61 19.64 10.41 15.52 11.2 15.35 :c 0.18 -0.03 0.37 0.24 0.55 0.63 :c 0.35 0.75 0.66 1.92 0.74 2.18 :l 0.25 1.01 :C 11.86 19.74 11.2 20.55 10.95 20.52 :C 10.81 20.53 10.73 20.43 10.68 20.22 :z :M 10.97 20.02 :C 11.43 19.57 12.15 19.2 12.4 18.97 :C 11.85 16.61 11.44 15.7 11.24 15.8 :C 10.92 16.97 10.89 18.45 10.97 20.02 :z :M 12.82 14.72 :c 0.33 -0.29 3.16 2.32 3.16 2.63 :c 0 0.06 -0.51 0.36 -1.08 0.63 :c -0.41 0.19 -1 0.47 -1.1 0.47 :c -0.28 -0.27 -1.11 -3.56 -0.98 -3.73 :z :m 0.39 0.5 :c -0.22 -0.15 0.41 2.12 0.67 2.84 :c 0.94 -0.27 1.68 -0.82 1.67 -0.86 :C 14.96 16.6 13.62 15.41 13.2 15.22 :z :m 7.37 10.36 :c -0.29 0 -0.08 -0.36 0.57 -0.98 :c 0.27 -0.25 0.5 -0.46 0.73 -0.61 :c 0.59 -0.4 1.13 -0.53 2.08 -0.55 :l 1.06 -0.02 :c -0.01 -0.49 0.04 -1.15 -0.09 -1.54 :c -0.05 0.03 -0.65 -0.17 -1.07 -0.25 :c -1.23 -0.26 -1.58 -0.14 -2.54 0.32 :c -0.92 0.44 -1.11 0.57 -1.11 0.33 :c 0 -0.08 0.43 -0.36 0.95 -0.62 :c 0.86 -0.42 1.03 -0.46 1.79 -0.44 :c 0.46 0.01 1.11 0.13 1.45 0.19 :l 0.68 0.12 :c 0.01 -0.14 0.02 -0.4 0.04 -0.67 :c 0.02 -0.42 0.03 -0.87 -0 -1 :c -0.99 -0.46 -2.15 -0.84 -3.07 -0.85 :c -0.97 -0.01 -1.86 0 -2.58 0.3 :c -0.32 0.13 -0.5 0.35 -0.75 0.62 :c 0.41 1.7 1.43 7.99 2.76 9.21 :c 1.16 -1.16 2.37 -2.56 3.53 -3.72 :c 0.23 -0.8 0.08 -1.62 -0.06 -1.65 :c -2.29 -0.53 -3.69 0.99 -4.39 1.82 :z :m 4.44 -7.47 :m -0.63 -0.22 :m -1.18 -0.42 :C 22.66 17.28 22.13 17.18 21.55 17.12 :C 20.88 17.06 20.14 17.04 19.22 16.96 :C 18.7 16.92 17.65 16.91 17.5 16.88 :c 0.15 0.31 0.32 0.65 0.49 1.01 :c 0.26 0.54 0.51 1.11 0.62 1.62 :c 0.81 -0.55 1.58 -0.71 2.31 -0.77 :c 0.87 -0.08 1.89 0.1 2.69 0.3 :c 0.69 0.17 1.21 0.35 1.32 0.38 :c 0.13 0.04 0.15 -0.14 0.14 -0.42 :c -0.01 -0.25 -0.05 -0.59 -0.05 -0.89 :z :m 1.48 13.43 :c -0.34 -0.09 -0.81 -0.37 -1.21 -0.71 :c -0.22 -0.19 -0.43 -0.41 -0.57 -0.62 :c -0.12 -0.18 -0.2 -0.35 -0.21 -0.51 :c -0.03 -0.38 0.5 0.46 0.88 0.85 :c 0.13 0.13 0.3 0.25 0.48 0.36 :c 0.36 0.21 0.77 0.39 0.98 0.58 :c -0.01 0.09 -0.14 0.15 -0.36 0.05 :z :m -0.18 -2.17 :c -0.12 -0.08 -0.23 -0.13 -0.33 -0.27 :c -0.13 -0.16 -0.23 -0.36 -0.31 -0.55 :c -0.17 -0.42 -0.28 -0.79 -0.05 -0.79 :c 0.06 0 0.15 0.23 0.24 0.46 :c 0.06 0.16 0.12 0.31 0.16 0.39 :c 0.1 0.19 0.34 0.43 0.53 0.53 :c 0.09 0.46 -0.16 0.28 -0.24 0.23 :z]\n;;    :stroke \"black\"\n;;    :fill   \"none\"})\n"]}