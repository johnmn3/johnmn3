{"version":3,"file":"shapes.core.js","sources":["shapes/core.cljs"],"mappings":"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,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,IAAA,MAAA,cAAA,mFAAA,KAAA,MAAA,cAAA,mFAAA,KAAA,KAAA,cAAA,mFAAA,MAAA,MAAA,YAAA,mFAAA,MAAA,KAAA,aAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,IAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,KAAA,KAAA,cAAA,mFAAA,MAAA,IAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,KAAA,cAAA,mFAAA,MAAA,MAAA,YAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,KAAA,MAAA,aAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,KAAA,aAAA,mFAAA,IAAA,MAAA,cAAA,mFAAA,KAAA,MAAA,cAAA,mFAAA,MAAA,KAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,aAAA,mFAAA,MAAA,MAAA,YAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,IAAA,MAAA,YAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,IAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,IAAA,YAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,aAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,IAAA,cAAA,mFAAA,MAAA,IAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,IAAA,MAAA,YAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,KAAA,aAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,aAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,KAAA,MAAA,aAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,YAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,IAAA,cAAA,mFAAA,IAAA,MAAA,cAAA,mFAAA,KAAA,MAAA,cAAA,mFAAA,KAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,IAAA,IAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,IAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,YAAA,mFAAA,IAAA,IAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,IAAA,MAAA,YAAA,mFAAA,IAAA,IAAA,cAAA,mFAAA,MAAA,IAAA,YAAA,mFAAA,MAAA,IAAA,YAAA,mFAAA,KAAA,MAAA,aAAA,mFAAA,MAAA,KAAA,aAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,aAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,KAAA,MAAA,aAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,IAAA,IAAA,YAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,KAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,KAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,KAAA,cAAA,mFAAA,KAAA,MAAA,cAAA,mFAAA,MAAA,KAAA,cAAA,mFAAA,IAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,KAAA,aAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,KAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,aAAA,mFAAA,MAAA,KAAA,YAAA,mFAAA,KAAA,KAAA,aAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,KAAA,aAAA,mFAAA,MAAA,KAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,aAAA,mFAAA,MAAA,MAAA,YAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,KAAA,aAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,KAAA,KAAA,aAAA,mFAAA,KAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,KAAA,IAAA,cAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA,YAAA,mFAAA,MAAA,MAAA,aAAA,mFAAA,MAAA,MAAA,cAAA,mFAAA,MAAA,MAAA","names":["x__4243__auto__","m__4244__auto__","shapes/core.-listen","goog/typeOf","cljs.core/missing-protocol","shapes.core/IListen","shapes.core/-listen","this","listeners","var_args","G__33791","shapes.core/listen","args-arr__4546__auto__","len__4531__auto__","i__4532__auto__","argseq__4547__auto__","cljs.core/IndexedSeq","seq33786","G__33787","cljs.core/first","cljs.core/next","G__33788","G__33789","G__33790","self__4518__auto__","event","listener","shape","event-1","listener-1","event-2","listener-2","args","cljs.core/last","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/butlast","cljs.core/PROTOCOL_SENTINEL","this__4192__auto__","writer__4193__auto__","opt__4194__auto__","cljs.core/-write","shapes.core/Shape","shapes.core/->Shape","attrs","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__33818","vec__33819","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core/name","cljs.core.partition.cljs$core$IFn$_invoke$arity$2","k","cljs.core.get.cljs$core$IFn$_invoke$arity$2","not-found","cljs.core.get.cljs$core$IFn$_invoke$arity$3","key","val","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/seq","writer","_","cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","shapes.core/assert-number","message","x","js/isNaN","js/Error","js/parseFloat","shapes.core/assert-number-range","x-min","x-max","x-parsed","shapes.core/circle","radius","shapes.core/rectangle","width","height","shapes.core/square","side","shapes.core/triangle","size","h","G__33860","shapes.core/image","src","shapes.core.image.cljs$core$IFn$_invoke$arity$3","shapes.core/text","the-text","cljs.core/count","args__4534__auto__","argseq__4535__auto__","shapes.core/path","seq33892","self__4519__auto__","points","shapes.core/assure-shape-seq","shape-or-shapes","G__33916","shapes.core/scale-points","factor","p1__33921#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","shapes.core/points-bounds","pts","p__33933","p__33934","vec__33935","vec__33938","y-min","y-max","y","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/number?","shapes.core/shape-bounds","or__3949__auto__","temp__5455__auto__","vec__33946","vec__33949","shapes.core/center-point","bounds","shapes.core/bounds","shapes","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/max-key","shapes.core/points->string","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/interpose","cljs.core.interpose.cljs$core$IFn$_invoke$arity$2","cljs.core/flatten","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/str","shapes.core/path-points->string","p1__33978#","cljs.core/Keyword","shapes.core/shape->vector","map__33992","cljs.core/deref","cljs.core/hash-map","kind","children","d","text","unkinded","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","p__34001","vec__34002","m","v","G__34008","cljs.core.update.cljs$core$IFn$_invoke$arity$3","G__34015","vec__34024","p1__33987#","vec__34035","p1__33989#","p1__33990#","p1__33991#","cljs.core/select-keys","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","shapes.core/to-hiccup","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","shapes.core/stroke","color","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","shapes.core/no-stroke","shapes.core/fill","shapes.core/no-fill","shapes.core/colorize","shapes.core/scale","amount","G__34101","cljs.core.update.cljs$core$IFn$_invoke$arity$4","shapes.core/rotate","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","shapes.core/move-points","new-x","new-y","old-x","old-y","p__34118","vec__34121","shapes.core/position","G__34136","shapes.core/layer","seq34150","shapes.core/beside","seq34160","cljs.core/reverse","state","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","G__34165","cljs.core/+","G__34166","p1__34158#","shapes.core/above","seq34184","G__34190","G__34191","p1__34181#","shapes.core/opacity","o","shapes.core/rgb","red","green","blue","cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic","shapes.core/rgba","alpha","shapes.core/hsl","hue","saturation","lightness","shapes.core/hsla","shapes.core/rescale","value","old-min","old-max","new-min","new-max","old-spread","new-spread","shapes.core/color-names","p__34307","vec__34308","color-name"],"sourcesContent":["(ns shapes.core)\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Support for _An Introduction to Racket with Pictures_-style pedagogy\n\n(defprotocol IListen\n  (-listen [this listeners]\n           \"Attach event listeners to shape.\"))\n\n(defn listen\n  ([event listener shape]\n   (-listen shape [event listener]))\n  ([event-1 listener-1\n    event-2 listener-2 & args]\n   (-listen (last args)\n            (into [event-1 listener-1\n                   event-2 listener-2]\n                  (butlast args)))))\n\n(deftype Shape [attrs]\n  IListen\n  (-listen [this listeners]\n    (new Shape (reduce (fn [attrs [event listener]]\n                         (assoc attrs (keyword (str \"on-\" (name event))) listener))\n                       attrs\n                       (partition 2 listeners))))\n  IDeref\n  (-deref [this] attrs)\n  ILookup\n  (-lookup [this k]\n    (get attrs k))\n  (-lookup [this k not-found]\n    (get attrs k not-found))\n  IAssociative\n  (-assoc [this key val]\n    (new Shape (assoc attrs key val)))\n  (-contains-key? [this key]\n    (contains? attrs key))\n  IMap\n  (-dissoc [this key]\n    (new Shape (dissoc attrs key)))\n  ISeqable\n  (-seq [this] (seq attrs))\n  IPrintWithWriter\n  (-pr-writer [this writer _]\n    (write-all writer (pr-str attrs))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; helpers for param checks\n\n(defn assert-number [message x]\n  (if (js/isNaN x)\n    (throw (js/Error. message))\n    (js/parseFloat x)))\n\n(defn assert-number-range [message x-min x-max x]\n  (let [x-parsed (assert-number message x)]\n    (if (<= x-min x-parsed x-max)\n      x-parsed\n      (throw (js/Error. message)))))\n\n(defn circle\n  \"Returns a circle of `radius`.\"\n  [radius]\n  (assert-number \"radius must be a number!\" radius)\n  (->Shape {:is-a   :shape\n            :kind   :circle\n            :r      radius\n            :cx     radius\n            :cy     radius\n            :stroke \"none\"\n            :fill   \"black\"}))\n\n(defn rectangle\n  \"Returns a rectangle of `width` and `height`.\"\n  [width height]\n  (assert-number \"width must be a number!\" width)\n  (assert-number \"height must be a number!\" height)\n  (->Shape {:is-a   :shape\n            :kind   :rect\n            :x      0\n            :y      0\n            :width  width\n            :height height\n            :stroke \"none\"\n            :fill   \"black\"}))\n\n(defn square\n  \"Returns a square of dimension `side`.\"\n  [side]\n  (assert-number \"side must be a number!\" side)\n  (rectangle side side))\n\n(defn triangle\n  \"Returns an equilateral triangle with sides of `size`.\"\n  [size]\n  (assert-number \"size must be a number!\" size)\n  (->Shape (let [h (* 0.8660259 size)]\n             {:is-a   :shape\n              :kind   :polygon\n              :x      0\n              :y      0\n              :width  size\n              :height size\n              :points [[0 size]\n                       [(/ size 2) (- size h)]\n                       [size size]]\n              :stroke \"none\"\n              :fill   \"black\"})))\n\n(defn image\n  \"Add an image to the drawing\"\n  ([src] (image 200 200 src))\n  ([size src]\n   (assert-number \"size must be a number!\" size)\n   (image size size src))\n  ([width height src]\n  (assert-number \"width must be a number!\" width)\n  (assert-number \"height must be a number!\" height)  \n   (->Shape {:kind   :image\n             :href   src\n             :width  width\n             :height height})))\n\n(defn text\n  \"Add a label containing `the-text` to a drawing.\"\n  [the-text]\n  (->Shape {:is-a        :shape\n            :kind        :text\n            :text        the-text\n            :x           0\n            :y           18\n            :font-family \"Fira Code\"\n            :font-size   15\n            :font-weight \"normal\"\n            :width       (* 9 (count the-text))\n            :height      18\n            :fill        \"#3f4245\"}))\n\n;; XXX no verification yet, too complicated for the moment\n(defn path\n  \"Create an arbitrary path from a set of points.\"\n  [& points]\n  (->Shape {:is-a   :shape\n            :kind   :path\n            :width  100\n            :height 100\n            :d      points\n            :stroke \"black\"\n            :fill   \"none\"}))\n\n;; TODO add general polygon fn\n;; TODO add spec annotations!\n\n(defn assure-shape-seq\n  \"Returns `shape-or-shapes` wrapped in a vector if it appears to be a single shape.\"\n  [shape-or-shapes]\n  (cond (instance? Shape shape-or-shapes) [shape-or-shapes]\n        (instance? Shape (first shape-or-shapes)) shape-or-shapes\n        :else (assure-shape-seq (first shape-or-shapes))))\n\n(defn scale-points\n  \"Scale a set of `points` by `factor`.\"\n  [points factor]\n  (map #(if (number? %) (* factor %) %) points))\n\n(defn points-bounds [pts]\n  (reduce (fn [[x-min y-min x-max y-max] [x y]]\n            [(if (< x x-min) x x-min)\n             (if (< y y-min) y y-min)\n             (if (> x x-max) x x-max)\n             (if (> y y-max) y y-max)])\n          [100000 100000 -100000 -100000]                   ;; buggy because not max positive/negative\n          (partition 2 (filter number? pts))))\n\n(defn shape-bounds\n  \"Returns a map containing :height :width keys that represent the outer (i.e. highest) x/y position for this shape.\"\n  [shape]\n  {:width  (+ (or (:x shape) 0)\n              (or (:cx shape) 0)\n              (or (:width shape) 0)\n              (or (:r shape) 0)\n              (if-let [pts (:d shape)]\n                (let [[x-min y-min x-max y-max] (points-bounds pts)]\n                  x-max)\n                0))\n   :height (+ (or (:y shape) 0)\n              (or (:cy shape) 0)\n              (or (:height shape) 0)\n              (or (:r shape) 0)\n              (if-let [pts (:d shape)]\n                (let [[x-min y-min x-max y-max] (points-bounds pts)]\n                  y-max)\n                0))})\n\n(defn center-point [shape]\n  (let [bounds (shape-bounds shape)]\n    [(+ (/ (- (:width bounds) (or (:x shape) 0)) 2) (or (:x shape) 0))\n     (+ (/ (- (:height bounds) (or (:y shape) 0)) 2) (or (:y shape) 0))]))\n\n(defn bounds\n  \"Returns a map containing :height :width keys that represent the outer (i.e. highest) x/y position for this group of shapes.\"\n  [shapes]\n  (let [shapes (assure-shape-seq shapes)\n        bounds (map shape-bounds shapes)]\n    {:width  (:width (apply max-key :width bounds))\n     :height (:height (apply max-key :height bounds))}))\n\n(defn points->string [pts]\n  (->> (map (partial interpose \",\") pts)\n       (interpose \" \")\n       flatten\n       (apply str)))\n\n(defn path-points->string [pts]\n  (->> (map #(if (keyword? %) (str (name %)) %) pts)\n       (interpose \" \")\n       (apply str)))\n\n;; TODO rotate can take two more numbers for the centrum, would\n;; probably be better for each thing to rotate around itself\n;; TODO SVG translation/rotation causes slipping, may need to re-calc bounds\n;; TODO re-implement this mess using a transform matrix\n(defn shape->vector [shape]\n  (let [{:keys [kind children d text] :as attrs} @shape\n        unkinded (dissoc attrs :is-a :kind)]\n    (into [kind (reduce                                     ;; clean up/preprocess the string-y bits of the SVG element\n                  (fn [m [k v]]\n                    (case k\n                      :d (update m :d path-points->string)\n                      :points (update m :points points->string)\n                      :rotate (case kind\n                                :path (let [[x-min y-min x-max y-max] (points-bounds d)]\n                                        (update m :transform #(str (or % \"\") \" rotate(\" (:rotate m) \",\" (- x-max x-min) \",\" (- y-max y-min) \")\")))\n                                #_(update m :transform #(str (or % \"\") \" rotate(\" (:rotate m) \",\" (:x attrs) \",\" (:y attrs) \")\"))\n                                (let [[x y] (center-point m)]\n                                  (update m :transform #(str (or % \"\") \" rotate(\" (:rotate m) \",\" x \",\" y \")\"))))\n                      :translate (update m :transform #(str (or % \"\") \" translate(\" (apply str (interpose \",\" (:translate m))) \")\"))\n                      :scale (update m :transform #(str (or % \"\") \" scale(\" (:scale m) \")\"))\n                      m))\n                  unkinded\n                  (select-keys unkinded [:d :points :rotate :translate :scale]))\n           text]\n          (mapv shape->vector children))))\n\n(defn to-hiccup [shape]\n  [:svg (assoc (bounds shape) :x 0 :y 0)\n   (shape->vector shape)])\n\n(defn stroke\n  \"Return `shape` with its stroke set to `color`.\"\n  [color shape]\n  (if (= :svg (:kind shape))\n    (assoc shape :children (mapv (partial stroke color) (:children shape)))\n    (assoc shape :stroke color)))\n\n(defn no-stroke\n  \"Return `shape` with its stroke color turned off.\"\n  [shape]\n  (if (= :svg (:kind shape))\n    (assoc shape :children (mapv no-stroke (:children shape)))\n    (assoc shape :stroke \"none\")))\n\n(defn fill\n  \"Return `shape` with its fill set to `color`.\"\n  [color shape]\n  (if (= :svg (:kind shape))\n    (assoc shape :children (mapv (partial fill color) (:children shape)))\n    (assoc shape :fill color)))\n\n(defn no-fill\n  \"Return `shape` with its fill color turned off.\"\n  [shape]\n  (if (= :svg (:kind shape))\n    (assoc shape :children (mapv no-fill (:children shape)))\n    (assoc shape :fill \"none\")))\n\n(defn colorize\n  \"Return `shape` with its color set to `color`.\"\n  [color shape]\n  (stroke color shape)\n  (fill color shape))\n\n;; XXX SVG transforms are a fucking mess, so this needs to be fixed\n(defn scale\n  \"Return `shape` with rotated by `amount`.\"\n  [amount shape]\n  (assert-number \"amount must be a number!\" amount)\n  (case (:kind shape)\n    :path (update shape :d scale-points amount)\n    (assoc shape :scale amount)))\n\n;; XXX SVG transforms are a fucking mess, so this needs to be fixed\n(defn rotate\n  \"Return `shape` with rotated by `amount`.\"\n  [amount shape]\n  (assert-number \"amount must be a number!\" amount)\n  (if (not= :circle (:kind shape))\n    (assoc shape :rotate amount)))\n\n(defn move-points [m new-x new-y]\n  (let [old-x (:x m)\n        old-y (:y m)]\n    (assoc m :points (mapv (fn [[x y]]\n                             [(+ new-x (- x old-x))\n                              (+ new-y (- y old-y))])\n                           (:points m)))))\n\n(defn position\n  \"Return `shape` with its x and y positions set to `x` and `y`.\"\n  [x y shape]\n  (assert-number \"x must be a number!\" x)\n  (assert-number \"y must be a number!\" y)\n  (case (:kind shape)\n    :circle (-> shape\n                (assoc :cx x)\n                (assoc :cy y))\n    :polygon (-> (move-points shape x y)\n                 (assoc :x x)\n                 (assoc :y y))\n    :path (-> (assoc shape :translate [x y])\n              (assoc :x x)\n              (assoc :y y))\n    (-> shape\n        (assoc :x x)\n        (assoc :y y))))\n\n(defn layer\n  \"Returns a new shape with these `shapes` layered over each other.\"\n  [& shapes]\n  (->Shape (assoc (bounds shapes)\n             :is-a :shape\n             :kind :svg\n             :x 0\n             :y 0\n             :children shapes)))\n\n;; XXX broken for triangles!\n(defn beside\n  \"Return `shapes` with their positions adjusted so they're lined up beside one another.\"\n  [& shapes]\n  (->> (assure-shape-seq shapes)\n       reverse\n       (reduce (fn [state shape]\n                 {:out    (conj (state :out)\n                                (update shape (if (= (:kind shape) :circle)\n                                                :cx\n                                                :x) + (apply + (:widths state))))\n                  :widths (butlast (state :widths))})\n               {:out    '()\n                :widths (map #(if (= (:kind %) :circle)\n                                (:r %)\n                                (:width %))\n                             (map shape-bounds (butlast shapes)))})\n       :out\n       (apply layer)))\n\n(defn above\n  \"Return `shapes` with their positions adjusted so they're stacked above one another.\"\n  [& shapes]\n  (->> (assure-shape-seq shapes)\n       reverse\n       (reduce (fn [state shape]\n                 {:out     (conj (state :out)\n                                 (update shape (if (= (:kind shape) :circle)\n                                                 :cy\n                                                 :y) + (apply + (:heights state))))\n                  :heights (butlast (state :heights))})\n               {:out     '()\n                :heights (map #(if (= (:kind %) :circle)\n                                 (:r %)\n                                 (:height %))\n                              (map shape-bounds (butlast shapes)))})\n       :out\n       (apply layer)))\n\n;;;; from Henderson's functional geometry\n;; flip   : picture \u2192 picture (Flip a picture along its vertical center axis)\n;; rot    : picture \u2192 picture (Rotate a picture anti-clockwise by 90\u00b0)\n;; rot45  : picture \u2192 picture (rotate the picture anti-clockwise by 45\u00b0)\n\n;;;; from \"Creative Scala\" intro:\n;; \"click to reveal\" solutions are a good idea\n;; stroke vs fill? more complicated, but useful.\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; color helpers and scaling fn\n\n(defn opacity\n  \"Set the opacity of the shape to `o`, which should be a decimal number between 0 and 1.0\"\n  [o shape]\n  (assert-number-range \"opacity must be a number between 0 and 1.0!\" 0 1.0 o)\n  (assoc shape :opacity (str o)))\n\n(defn rgb [red green blue]\n  \"Returns a color of `red`, `green`, `blue`, each represented as a number from (0-255).\"\n  (assert-number-range \"red must be a number between 0 and 255!\" 0 255 red)\n  (assert-number-range \"green must be a number between 0 and 255!\" 0 255 green)\n  (assert-number-range \"blue must be a number between 0 and 255!\" 0 255 blue)\n  (apply str \"rgb(\" red \",\" green \",\" blue \")\"))\n\n(defn rgba [red green blue alpha]\n  \"Returns a color of `red`, `green`, `blue`, each represented as a number from (0-255), with an opacity of `alpha` (0.0-1.0).\"\n  (assert-number-range \"red must be a number between 0 and 255!\" 0 255 red)\n  (assert-number-range \"green must be a number between 0 and 255!\" 0 255 green)\n  (assert-number-range \"blue must be a number between 0 and 255!\" 0 255 blue)\n  (assert-number-range \"alpha must be a number between 0 and 1.0!\" 0 1.0 alpha)\n  (apply str \"rgba(\" red \",\" green \",\" blue \",\" alpha \")\"))\n\n(defn hsl\n  \"Returns a color of `hue` (a number between 0-359 representing an angle on the color wheel), `saturation` percentage and `lightness` percentage.\"\n  [hue saturation lightness]\n  (assert-number-range \"hue must be a number between 0 and 359!\" 0 359 hue)\n  (assert-number-range \"saturation must be a number between 0 and 100!\" 0 100 saturation)\n  (assert-number-range \"lightness must be a number between 0 and 100!\" 0 100 lightness)\n  (apply str \"hsl(\" hue \",\" saturation \"%,\" lightness \"%)\"))\n\n(defn hsla\n  \"Returns a color of `hue` (a number between 0-359 representing an angle on the color wheel)/`saturation` (percentage)/`lightness` (percentage)/`alpha` (0.0-1.0).\"\n  [hue saturation lightness alpha]\n  (assert-number-range \"hue must be a number between 0 and 359!\" 0 359 hue)\n  (assert-number-range \"saturation must be a number between 0 and 100!\" 0 100 saturation)\n  (assert-number-range \"lightness must be a number between 0 and 100!\" 0 100 lightness)\n  (assert-number-range \"alpha must be a number between 0 and 1.0!\" 0 1.0 alpha)\n  (apply str \"hsla(\" hue \",\" saturation \"%,\" lightness \"%, \" alpha \")\"))\n\n(defn rescale \n  \"Rescales value from range [old-min, old-max] to [new-min, new-max]\"\n  [value old-min old-max new-min new-max]\n  (assert-number \"value must be a number!\" value)\n  (assert-number \"old-min must be a number!\" old-min)\n  (assert-number \"old-max must be a number!\" old-max)\n  (assert-number \"new-min must be a number!\" new-min)\n  (assert-number \"new-max must be a number!\" new-max)\n  (let [old-spread (- old-max old-min)\n        new-spread (- new-max new-min)]\n    (+ (* (- value old-min) (/ new-spread old-spread))\n       new-min)))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; color name dictionary\n\n(def color-names\n  \"Recognized SVG color keyword names, mapped to their RGB value.\"\n  (mapv (fn [[color-name _]]\n          [color-name (colorize color-name (square 25))])\n        {\"aliceblue\"            [240, 248, 255]\n         \"antiquewhite\"         [250, 235, 215]\n         \"aqua\"                 [0, 255, 255]\n         \"aquamarine\"           [127, 255, 212]\n         \"azure\"                [240, 255, 255]\n         \"beige\"                [245, 245, 220]\n         \"bisque\"               [255, 228, 196]\n         \"black\"                [0, 0, 0]\n         \"blanchedalmond\"       [255, 235, 205]\n         \"blue\"                 [0, 0, 255]\n         \"blueviolet\"           [138, 43, 226]\n         \"brown\"                [165, 42, 42]\n         \"burlywood\"            [222, 184, 135]\n         \"cadetblue\"            [95, 158, 160]\n         \"chartreuse\"           [127, 255, 0]\n         \"chocolate\"            [210, 105, 30]\n         \"coral\"                [255, 127, 80]\n         \"cornflowerblue\"       [100, 149, 237]\n         \"cornsilk\"             [255, 248, 220]\n         \"crimson\"              [220, 20, 60]\n\n         \"cyan\"                 [0, 255, 255]\n         \"darkblue\"             [0, 0, 139]\n         \"darkcyan\"             [0, 139, 139]\n         \"darkgoldenrod\"        [184, 134, 11]\n         \"darkgray\"             [169, 169, 169]\n         \"darkgreen\"            [0, 100, 0]\n         \"darkgrey\"             [169, 169, 169]\n         \"darkkhaki\"            [189, 183, 107]\n         \"darkmagenta\"          [139, 0, 139]\n         \"darkolivegreen\"       [85, 107, 47]\n         \"darkorange\"           [255, 140, 0]\n         \"darkorchid\"           [153, 50, 204]\n         \"darkred\"              [139, 0, 0]\n         \"darksalmon\"           [233, 150, 122]\n         \"darkseagreen\"         [143, 188, 143]\n         \"darkslateblue\"        [72, 61, 139]\n         \"darkslategray\"        [47, 79, 79]\n         \"darkslategrey\"        [47, 79, 79]\n         \"darkturquoise\"        [0, 206, 209]\n\n         \"darkviolet\"           [148, 0, 211]\n         \"deeppink\"             [255, 20, 147]\n         \"deepskyblue\"          [0, 191, 255]\n         \"dimgray\"              [105, 105, 105]\n         \"dimgrey\"              [105, 105, 105]\n         \"dodgerblue\"           [30, 144, 255]\n         \"firebrick\"            [178, 34, 34]\n         \"floralwhite\"          [255, 250, 240]\n         \"forestgreen\"          [34, 139, 34]\n         \"fuchsia\"              [255, 0, 255]\n         \"gainsboro\"            [220, 220, 220]\n         \"ghostwhite\"           [248, 248, 255]\n         \"gold\"                 [255, 215, 0]\n         \"goldenrod\"            [218, 165, 32]\n         \"gray\"                 [128, 128, 128]\n         \"grey\"                 [128, 128, 128]\n         \"green\"                [0, 128, 0]\n         \"greenyellow\"          [173, 255, 47]\n         \"honeydew\"             [240, 255, 240]\n\n         \"hotpink\"              [255, 105, 180]\n         \"indianred\"            [205, 92, 92]\n         \"indigo\"               [75, 0, 130]\n         \"ivory\"                [255, 255, 240]\n         \"khaki\"                [240, 230, 140]\n         \"lavender\"             [230, 230, 250]\n         \"lavenderblush\"        [255, 240, 245]\n         \"lawngreen\"            [124, 252, 0]\n         \"lemonchiffon\"         [255, 250, 205]\n         \"lightblue\"            [173, 216, 230]\n         \"lightcoral\"           [240, 128, 128]\n         \"lightcyan\"            [224, 255, 255]\n         \"lightgoldenrodyellow\" [250, 250, 210]\n         \"lightgray\"            [211, 211, 211]\n         \"lightgreen\"           [144, 238, 144]\n         \"lightgrey\"            [211, 211, 211]\n         \"lightpink\"            [255, 182, 193]\n         \"lightsalmon\"          [255, 160, 122]\n         \"lightseagreen\"        [32, 178, 170]\n         \"lightskyblue\"         [135, 206, 250]\n         \"lightslategray\"       [119, 136, 153]\n\n         \"lightslategrey\"       [119, 136, 153]\n         \"lightsteelblue\"       [176, 196, 222]\n         \"lightyellow\"          [255, 255, 224]\n         \"lime\"                 [0, 255, 0]\n         \"limegreen\"            [50, 205, 50]\n         \"linen\"                [250, 240, 230]\n         \"magenta\"              [255, 0, 255]\n         \"maroon\"               [128, 0, 0]\n         \"mediumaquamarine\"     [102, 205, 170]\n         \"mediumblue\"           [0, 0, 205]\n         \"mediumorchid\"         [186, 85, 211]\n         \"mediumpurple\"         [147, 112, 219]\n         \"mediumseagreen\"       [60, 179, 113]\n         \"mediumslateblue\"      [123, 104, 238]\n         \"mediumspringgreen\"    [0, 250, 154]\n         \"mediumturquoise\"      [72, 209, 204]\n         \"mediumvioletred\"      [199, 21, 133]\n         \"midnightblue\"         [25, 25, 112]\n         \"mintcream\"            [245, 255, 250]\n         \"mistyrose\"            [255, 228, 225]\n         \"moccasin\"             [255, 228, 181]\n         \"navajowhite\"          [255, 222, 173]\n         \"navy\"                 [0, 0, 128]\n\n         \"oldlace\"              [253, 245, 230]\n         \"olive\"                [128, 128, 0]\n         \"olivedrab\"            [107, 142, 35]\n         \"orange\"               [255, 165, 0]\n         \"orangered\"            [255, 69, 0]\n         \"orchid\"               [218, 112, 214]\n         \"palegoldenrod\"        [238, 232, 170]\n         \"palegreen\"            [152, 251, 152]\n         \"paleturquoise\"        [175, 238, 238]\n         \"palevioletred\"        [219, 112, 147]\n         \"papayawhip\"           [255, 239, 213]\n         \"peachpuff\"            [255, 218, 185]\n         \"peru\"                 [205, 133, 63]\n         \"pink\"                 [255, 192, 203]\n         \"plum\"                 [221, 160, 221]\n         \"powderblue\"           [176, 224, 230]\n         \"purple\"               [128, 0, 128]\n         \"red\"                  [255, 0, 0]\n         \"rosybrown\"            [188, 143, 143]\n         \"royalblue\"            [65, 105, 225]\n         \"saddlebrown\"          [139, 69, 19]\n         \"salmon\"               [250, 128, 114]\n         \"sandybrown\"           [244, 164, 96]\n         \"seagreen\"             [46, 139, 87]\n         \"seashell\"             [255, 245, 238]\n         \"sienna\"               [160, 82, 45]\n\n         \"silver\"               [192, 192, 192]\n         \"skyblue\"              [135, 206, 235]\n         \"slateblue\"            [106, 90, 205]\n         \"slategray\"            [112, 128, 144]\n         \"slategrey\"            [112, 128, 144]\n         \"snow\"                 [255, 250, 250]\n         \"springgreen\"          [0, 255, 127]\n         \"steelblue\"            [70, 130, 180]\n         \"tan\"                  [210, 180, 140]\n         \"teal\"                 [0, 128, 128]\n         \"thistle\"              [216, 191, 216]\n         \"tomato\"               [255, 99, 71]\n         \"turquoise\"            [64, 224, 208]\n         \"violet\"               [238, 130, 238]\n         \"wheat\"                [245, 222, 179]\n         \"white\"                [255, 255, 255]\n         \"whitesmoke\"           [245, 245, 245]\n         \"yellow\"               [255, 255, 0]\n         \"yellowgreen\"          [154, 205, 50]}))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; pre-cooked SVG shapes\n\n;; (def fish\n;;   \"An Escher-style fish.\"\n;;   {:is-a   :shape\n;;    :kind   :path\n;;    :width  100\n;;    :height 100\n;;    :d      [:M 9.67 40.17 :C 6.86 37.67 4.49 35.56 2.63 32.93 :c 0 -0.12 0.17 -0.54 0.37 -0.94 :c 1.15 -2.28 2.17 -3.75 4.73 -6.83 :l 1.37 -1.64 :l -0.07 -0.7 :C 8.65 18.39 8.87 15.11 9.97 10.9 :C 10.11 9.63 10.41 10.28 12.04 11.5 :C 13.89 12.99 15.6 13.84 17.34 16.64 :l 2.17 0.09 :c 2.46 0.11 3.46 0.27 4.87 0.72 :l 1.06 0.34 :c 0.01 1.38 0.02 2.76 0.03 4.15 :c 0.01 1.19 0.02 2.38 0.03 3.57 :c -1.23 1.23 -2.53 2.71 -3.76 3.94 :c 1.65 2.68 6.11 4.18 9.99 4.57 :l 1.6 0.14 :l 1.12 1.32 :c 1.26 1.48 2.04 2.15 4.23 3.65 :l 1.52 1.04 :c 0.16 0.09 0.97 0.57 -0.18 0.46 :l -2.26 -0.43 :c -3.09 -0.59 -4.51 -0.78 -5.89 -0.78 :c -1.1 -0 -3.28 0.14 -4.34 0.29 :c -0.45 0.06 -0.52 0.03 -1.64 -0.91 :c -3.5 -2.93 -4.67 -3.77 -6.86 -4.93 :l -1.23 -0.66 :c -2.44 2.44 -4.88 4.88 -7.32 7.32 :c -0.26 0.37 -0.82 -0.35 -0.82 -0.35 :z :M 17.41 33.02 :C 16.08 32.32 14.9 31.64 13.36 30.72 :l -0.79 0.76 :c -0.41 0.4 -1.24 0.97 -1.7 1.43 :c -0.74 0.73 -0.93 1.02 -1.58 2.38 :c -0.68 1.41 -1.04 1.88 -1.03 1.34 :c 0 -0.35 1.35 -2.99 1.85 -3.62 :C 10.36 32.68 11.14 32.01 11.81 31.49 :l 1.26 -0.97 :c -0.49 -0.45 -0.94 -0.85 -1.33 -1.29 :c -0.15 -0.06 -2 1.44 -2.65 2.15 :c -0.34 0.37 -1.01 1.32 -1.51 2.12 :c -0.83 1.34 -1.21 1.74 -1.21 1.27 :c 0 -0.24 1.41 -2.49 2.13 -3.41 :c 0.31 -0.39 0.99 -1.05 1.52 -1.47 :c 0.53 -0.41 1.34 -0.98 1.48 -1.09 :C 10.33 26.87 9.96 25.63 9.24 24.03 :l -1.64 2 :c -2.16 2.63 -2.79 3.52 -3.79 5.35 :l -0.83 1.52 :c 0.7 0.58 4.85 5.64 7.26 7.21 :C 12.8 37.65 14.7 35.72 17.41 33.02 :z :M 9.31 38.59 :C 10.54 36.67 13.23 32.93 14.9 31.91 :c -1.08 1.8 -3.52 3.88 -4.84 6.19 :c -0.21 0.37 -0.42 0.61 -0.55 0.61 :c -0.11 0 -0.21 -0.05 -0.21 -0.12 :z :M 4.85 33.31 :c 0 -0.24 1.31 -2.7 1.75 -3.28 :c 0.74 -0.92 3.91 -4.13 4.01 -3.17 :c -1.95 1.23 -4.25 3.78 -5.05 5.85 :c -0.2 0.4 -0.45 0.73 -0.54 0.73 :c -0.1 0 -0.17 -0.06 -0.17 -0.13 :z :m 32.97 5.78 :c -1.94 -1.35 -3.1 -2.45 -4.44 -4.17 :c -0.25 -0.32 -0.31 -0.33 -2.4 -0.55 :c -4.84 -0.43 -9.35 -2.98 -10.59 -6.68 :c -2.28 -5.68 -0.94 -9.92 -6.21 -14.17 :c -0.45 -0.37 -1.49 -1.13 -2.3 -1.69 :L 10.39 10.81 :C 9.03 15.59 8.84 20.53 9.71 23.84 :c 0.58 2.22 1.63 4.4 3.24 5.81 :c 2.36 2.07 8.78 4.31 14.24 9.65 :l 0.64 -0.06 :c 4.11 -0.38 5.35 -0.34 8.91 0.34 :c 1.13 0.21 2.13 0.4 2.22 0.4 :c 0.09 0.01 -0.42 -0.39 -1.14 -0.89 :z :m -6.77 -2.06 :C 23.62 34.03 21.59 33.07 19.55 31.02 :C 16.84 27.84 15.3 24.33 13.75 20.48 :c -0.78 -2.92 0.56 0.34 0.97 1.38 :c 0.96 2.41 2.05 4.09 2.89 5.63 :c 2.35 4.33 5.52 5.98 14.71 9.58 :c 1.52 0.6 2.43 1.03 2.43 1.13 :c 0 0.09 -0.09 0.16 -0.21 0.16 :c -0.11 -0 -1.68 -0.6 -3.49 -1.33 :z :M 10.68 20.22 :C 10.61 19.64 10.41 15.52 11.2 15.35 :c 0.18 -0.03 0.37 0.24 0.55 0.63 :c 0.35 0.75 0.66 1.92 0.74 2.18 :l 0.25 1.01 :C 11.86 19.74 11.2 20.55 10.95 20.52 :C 10.81 20.53 10.73 20.43 10.68 20.22 :z :M 10.97 20.02 :C 11.43 19.57 12.15 19.2 12.4 18.97 :C 11.85 16.61 11.44 15.7 11.24 15.8 :C 10.92 16.97 10.89 18.45 10.97 20.02 :z :M 12.82 14.72 :c 0.33 -0.29 3.16 2.32 3.16 2.63 :c 0 0.06 -0.51 0.36 -1.08 0.63 :c -0.41 0.19 -1 0.47 -1.1 0.47 :c -0.28 -0.27 -1.11 -3.56 -0.98 -3.73 :z :m 0.39 0.5 :c -0.22 -0.15 0.41 2.12 0.67 2.84 :c 0.94 -0.27 1.68 -0.82 1.67 -0.86 :C 14.96 16.6 13.62 15.41 13.2 15.22 :z :m 7.37 10.36 :c -0.29 0 -0.08 -0.36 0.57 -0.98 :c 0.27 -0.25 0.5 -0.46 0.73 -0.61 :c 0.59 -0.4 1.13 -0.53 2.08 -0.55 :l 1.06 -0.02 :c -0.01 -0.49 0.04 -1.15 -0.09 -1.54 :c -0.05 0.03 -0.65 -0.17 -1.07 -0.25 :c -1.23 -0.26 -1.58 -0.14 -2.54 0.32 :c -0.92 0.44 -1.11 0.57 -1.11 0.33 :c 0 -0.08 0.43 -0.36 0.95 -0.62 :c 0.86 -0.42 1.03 -0.46 1.79 -0.44 :c 0.46 0.01 1.11 0.13 1.45 0.19 :l 0.68 0.12 :c 0.01 -0.14 0.02 -0.4 0.04 -0.67 :c 0.02 -0.42 0.03 -0.87 -0 -1 :c -0.99 -0.46 -2.15 -0.84 -3.07 -0.85 :c -0.97 -0.01 -1.86 0 -2.58 0.3 :c -0.32 0.13 -0.5 0.35 -0.75 0.62 :c 0.41 1.7 1.43 7.99 2.76 9.21 :c 1.16 -1.16 2.37 -2.56 3.53 -3.72 :c 0.23 -0.8 0.08 -1.62 -0.06 -1.65 :c -2.29 -0.53 -3.69 0.99 -4.39 1.82 :z :m 4.44 -7.47 :m -0.63 -0.22 :m -1.18 -0.42 :C 22.66 17.28 22.13 17.18 21.55 17.12 :C 20.88 17.06 20.14 17.04 19.22 16.96 :C 18.7 16.92 17.65 16.91 17.5 16.88 :c 0.15 0.31 0.32 0.65 0.49 1.01 :c 0.26 0.54 0.51 1.11 0.62 1.62 :c 0.81 -0.55 1.58 -0.71 2.31 -0.77 :c 0.87 -0.08 1.89 0.1 2.69 0.3 :c 0.69 0.17 1.21 0.35 1.32 0.38 :c 0.13 0.04 0.15 -0.14 0.14 -0.42 :c -0.01 -0.25 -0.05 -0.59 -0.05 -0.89 :z :m 1.48 13.43 :c -0.34 -0.09 -0.81 -0.37 -1.21 -0.71 :c -0.22 -0.19 -0.43 -0.41 -0.57 -0.62 :c -0.12 -0.18 -0.2 -0.35 -0.21 -0.51 :c -0.03 -0.38 0.5 0.46 0.88 0.85 :c 0.13 0.13 0.3 0.25 0.48 0.36 :c 0.36 0.21 0.77 0.39 0.98 0.58 :c -0.01 0.09 -0.14 0.15 -0.36 0.05 :z :m -0.18 -2.17 :c -0.12 -0.08 -0.23 -0.13 -0.33 -0.27 :c -0.13 -0.16 -0.23 -0.36 -0.31 -0.55 :c -0.17 -0.42 -0.28 -0.79 -0.05 -0.79 :c 0.06 0 0.15 0.23 0.24 0.46 :c 0.06 0.16 0.12 0.31 0.16 0.39 :c 0.1 0.19 0.34 0.43 0.53 0.53 :c 0.09 0.46 -0.16 0.28 -0.24 0.23 :z]\n;;    :stroke \"black\"\n;;    :fill   \"none\"})\n"]}