{"version":3,"file":"re_view.util.js","sources":["re_view/util.cljc"],"mappings":"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","names":["re-view.util/camelCase","cljs.core/memoize","s","clojure.string/replace","cljs.core/name","p__33424","vec__33425","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","_","match","clojure.string/upper-case","var_args","args__4534__auto__","len__4531__auto__","i__4532__auto__","argseq__4535__auto__","cljs.core/IndexedSeq","re-view.util/update-attrs","seq33429","G__33430","cljs.core/first","cljs.core/next","G__33431","self__4518__auto__","el","f","args","cljs.core/vector?","attrs?","cljs.core/map?","cljs.core/second","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core.subvec.cljs$core$IFn$_invoke$arity$2","re-view.util/ensure-keys","forms","seen","p1__33444#","p2__33443#","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","re_view.util.update_attrs.cljs$core$IFn$_invoke$arity$variadic","cljs.core/update","k","cljs.core/contains?","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/conj","re-view.util/map-with-keys","seq33445","self__4519__auto__","cljs.core/seq","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/map","re-view.util/any-pred","seq33449","fns","this","cljs.core/empty?","or__3949__auto__","fexpr__33454","cljs.core/rest","re-view.util/is-react-element?","x","and__3938__auto__","js/module$node_modules$react$index.isValidElement","re-view.util/flatten-seqs","children","p1__33468#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/seq?","cljs.core/tree-seq","re-view.util/parse-opt-args","preds","out","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","match?","G__33474","fexpr__33473","G__33475"],"sourcesContent":["(ns re-view.util\n  (:refer-clojure :exclude [uuid])\n  (:require [clojure.string :as string]\n            #?@(:cljs [[\"react\" :as react]\n                       [re-db.d :as d]])))\n\n(def camelCase\n  \"Return camelCased string, eg. hello-there to helloThere. Does not modify existing case.\"\n  (memoize\n    (fn [s]\n      (string/replace (name s) #\"-(.)\" (fn [[_ match]] (string/upper-case match))))))\n\n\n(defn update-attrs [el f & args]\n  (if-not (vector? el)\n    el\n    (let [attrs? (map? (second el))]\n      (into [(el 0) (apply f (if attrs? (el 1) {}) args)]\n            (subvec el (if attrs? 2 1))))))\n\n(defn ensure-keys [forms]\n  (let [seen #{}]\n    (map-indexed #(update-attrs %2 update :key (fn [k]\n                                                       (if (or (nil? k) (contains? seen k))\n                                                         %1\n                                                         (do (swap! seen conj k)\n                                                             k)))) forms)))\n\n(defn map-with-keys [& args]\n  (ensure-keys (apply clojure.core/map args)))\n\n(defn any-pred\n  \"Evaluate fns sequentially, stopping if any return true.\"\n  [& fns]\n  (fn [this]\n    (loop [fns fns]\n      (if (empty? fns)\n        false\n        (or ((first fns) this)\n            (recur (rest fns)))))))\n\n#?(:cljs (defn is-react-element? [x]\n           (and x (react/isValidElement x))))\n\n(defn flatten-seqs\n  \"Flatten collection, only unwrap sequences\"\n  [children]\n  (filter #(not (seq? %))\n          (rest (tree-seq seq? seq children))))\n\n(defn parse-opt-args [preds args]\n  (loop [preds preds\n         args args\n         out []]\n    (if (empty? preds)\n      (conj out args)\n      (let [match? ((first preds) (first args))]\n        (recur (rest preds)\n               (cond-> args match? (rest))\n               (conj out (if match? (first args) nil)))))))"]}