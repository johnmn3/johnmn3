{"version":3,"file":"cells.lib.js","sources":["cells/lib.cljs"],"mappings":"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","names":["cells.lib/status!","cells.cell/status!","cells.lib/status","cells.cell/status","cells.lib/message","cells.cell/message","cells.lib/error?","cells.cell/error?","cells.lib/with-view","cells.cell/with-view","cells.lib/loading?","x","and__3938__auto__","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cells.cell/IStatus","cells.cell/loading?","cells.lib/dependencies","cells.cell/dependencies","cells.lib/dependents","cells.cell/dependents","cells.lib/unique-id","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core/str","cells.util/unique-id","cells.lib/query-string","query","goog/Uri","cljs.core/clj->js","var_args","G__19202","cells.lib/-on-frame","js/Error","f","cells.lib._on_frame.cljs$core$IFn$_invoke$arity$2","initial-value","self","cljs.core/first","cells.cell/*cell-stack*","stop?","cljs.core/volatile!","interval-f","the-cell__10769__auto__","context__10770__auto__","cells.cell/*eval-context*","args__10771__auto__","*cell-stack*19231","cljs.core/cons","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","e19233","error__10772__auto__","cells.eval-context/handle-error","cljs.core/reset!","G__19234","cljs.core/deref","js/window","frame-f","cells.eval-context/on-dispose","cljs.core/vreset!","G__19264","cells.lib/interval","n","cells.lib.interval.cljs$core$IFn$_invoke$arity$3","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","clear-key","_","G__19266","js/clearInterval","*cell-stack*19271","e19272","G__19273","js/setInterval","G__19280","cells.lib/timeout","cells.lib.timeout.cljs$core$IFn$_invoke$arity$3","cells.cell.status_BANG_.cljs$core$IFn$_invoke$arity$2","js/setTimeout","*cell-stack*19285","e19286","G__19287","js/clearTimeout","cells.lib/parse-fns","p1__19293#","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic","js/JSON.parse","cljs.core/identity","G__19326","cells.lib/fetch","p__19335","map__19336","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$3","cljs.core.get.cljs$core$IFn$_invoke$arity$2","url","cells.lib.fetch.cljs$core$IFn$_invoke$arity$2","format","options","G__19341","parse","G__19342","G__19343","goog.net.XhrIo/send","*cell-stack*19344","e19345","event","xhrio","cljs.core/not","G__19346","G__19347","G__19348","G__19349","goog.net.ErrorCode/getDebugMessage","formatted-value","G__19350","cells.lib/geo-location","js/navigator.geolocation.getCurrentPosition","*cell-stack*19361","e19362","location","*cell-stack*19367","e19368","error","cells.cell.status_BANG_.cljs$core$IFn$_invoke$arity$3"],"sourcesContent":["(ns cells.lib\n  (:require [cells.cell :as cell\n             :refer [*cell-stack*]\n             :refer-macros [cell-fn cell]\n             :include-macros true]\n            [cells.eval-context :refer [on-dispose handle-error]]\n            [goog.net.XhrIo :as xhr]\n            [goog.net.ErrorCode :as errors]\n            [cells.util :as util])\n  (:require-macros [cells.lib])\n  (:import [goog Uri]))\n\n(declare -on-frame\n         interval\n         timeout\n         fetch\n         geo-location)\n\n(def status!\n\n  cell/status!)\n\n(def status\n  \"Returns the cell's status (a keyword)\"\n  cell/status)\n\n(def message\n  \"Returns the cell's status message, if it exists.\"\n  cell/message)\n\n(def error?\n  \"Returns true if cell's status is :error\"\n  cell/error?)\n\n(def with-view\n  \"Wraps a cell with a view (as metadata)\"\n  cell/with-view)\n\n(defn loading?\n  \"Returns true if x has a status of :loading.\"\n  [x]\n  (and (satisfies? cell/IStatus x)\n       (cell/loading? x)))\n\n(def dependencies cell/dependencies)\n(def dependents cell/dependents)\n(def unique-id (comp str util/unique-id))\n\n#_(defn restricted-swap! [specified-name cell & args]\n    (if (instance? cell/Cell cell)\n      (do (assert (= specified-name (name cell)))\n          (apply cell/swap-cell! cell args))\n      (apply swap! cell args)))\n\n#_(defn restricted-reset! [specified-name cell newval]\n    (if (instance? cell/Cell cell)\n      (do (assert (= specified-name (name cell)))\n          (cell/reset-cell! cell newval))\n      (reset! cell newval)))\n\n(defn- query-string [query]\n  (-> Uri .-QueryData (.createFromMap (clj->js query)) (.toString)))\n\n(defn -on-frame\n  ([f] (-on-frame f nil))\n  ([f initial-value]\n   (let [self (first cell/*cell-stack*)\n         stop? (volatile! false)\n         interval-f (cell-fn frame-f []\n                             (reset! self (f @self))\n                             (when-not @stop?\n                               (.requestAnimationFrame js/window frame-f)))]\n     (on-dispose self #(vreset! stop? true))\n     (reset! self initial-value)\n     (.requestAnimationFrame js/window interval-f))))\n\n(defn interval\n  ([n f] (interval n f nil))\n  ([n f initial-value]\n   (if (= n :frame)\n     (-on-frame f initial-value)\n     (let [self (first cell/*cell-stack*)\n           clear-key (volatile! nil)\n           _ (on-dispose self #(some-> @clear-key (js/clearInterval)))\n           interval-f (cell-fn [] (reset! self (f @self)))]\n       (vreset! clear-key (js/setInterval interval-f n))\n       (reset! self (f initial-value))))))\n\n(defn- timeout\n  ([n f] (timeout n f nil))\n  ([n f initial-value]\n\n   (let [self (first cell/*cell-stack*)\n         _ (cell/status! self :loading)\n         clear-key (js/setTimeout (cell-fn []\n                                           (cell/status! self nil)\n                                           (reset! self (f @self))) n)]\n     (on-dispose self #(js/clearTimeout clear-key))\n     initial-value)))\n\n(def parse-fns {:json->clj (comp #(js->clj % :keywordize-keys true) js/JSON.parse)\n                :json      js/JSON.parse\n                :text      identity})\n\n(defn fetch\n  \"Fetch a resource from a url. By default, response is parsed as JSON and converted to Clojure via clj->js with :keywordize-keys true.\n  Accepts options :format, which may be :json or :text, and :query, a map which will be\n  appended to url as a query parameter string.\"\n  ([url]\n   (fetch url {}))\n  ([url {:keys [format query]\n         :or   {format :json->clj}\n         :as   options}]\n   [url options]\n   (let [self (first cell/*cell-stack*)\n         url (cond-> url\n                     query (str \"?\" (query-string query)))\n         parse (get parse-fns format)]\n     (cell/status! self :loading)\n     (xhr/send url (cell-fn [event]\n                            (let [xhrio (.-target event)]\n                              (if-not (.isSuccess xhrio)\n                                (status! self :error {:message         (-> xhrio .getLastErrorCode (errors/getDebugMessage))\n                                                                :xhrio xhrio})\n                                (let [formatted-value (-> xhrio (.getResponseText) (parse))]\n                                  (status! self nil)\n                                  (reset! self formatted-value))))))\n     @self)))\n\n(defn geo-location\n  []\n  (let [self (first *cell-stack*)]\n    (cell/status! self :loading)\n    (js/navigator.geolocation.getCurrentPosition\n      (cell-fn [location]\n               (cell/status! self nil)\n               (->> {:latitude  (.. location -coords -latitude)\n                     :longitude (.. location -coords -longitude)}\n                    (reset! self)))\n      (cell-fn [error]\n               (cell/status! self :error (str error))))))\n"]}