{"version":3,"file":"shadow_eval.hiccups.js","sources":["shadow_eval/hiccups.cljc"],"mappings":"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","names":["tag","cljs.core/Symbol","cljs.core/Keyword","map-attrs","cljs.core/first","content","p__7422","vec__7423","seq__7424","cljs.core/seq","first__7425","cljs.core/next","shadow-eval.hiccups/normalize-element","shadow-eval.hiccups/character-escapes","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/str","shadow-eval.hiccups/*html-mode*","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","tag-attrs","shadow-eval.hiccups/render-attr-map","attrs","cljs.core.sort.cljs$core$IFn$_invoke$arity$1","cljs.core.map.cljs$core$IFn$_invoke$arity$2","shadow-eval.hiccups/render-attribute","f","class","clojure.string/replace","shadow-eval.hiccups/end-tag","shadow-eval.hiccups/re-tag","shadow-eval.hiccups/render-element","x","shadow-eval.hiccups/render-html","cljs.core/seq?","shadow-eval.hiccups/as-str","shadow-eval.hiccups/xml-mode?","text","var_args","G__7199","shadow-eval.hiccups/xml-attribute","js/Error","cljs.core/vector?","value","cljs.core/map?","name","shadow_eval.hiccups.xml_attribute.cljs$core$IFn$_invoke$arity$3","clojure.string/escape","escape?","shadow-eval.hiccups/escape-html","shadow_eval.hiccups.xml_attribute.cljs$core$IFn$_invoke$arity$2","shadow-eval.hiccups/in-mode","mode","cljs.core/name","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","p__7201","vec__7202","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","shadow-eval.hiccups/h","id","cljs.core/not","*html-mode*7167","or__3949__auto__","shadow-eval.hiccups/container-tags","element","vec__7427","_","cljs.core/re-matches","vec__7447"],"sourcesContent":["(ns shadow-eval.hiccups\n  (:require [clojure.string :as cstring]))\n\n(def ^{:doc \"Regular expression that parses a CSS-style id and class from a tag name.\" :private true}\n  re-tag #\"([^\\s\\.#]+)(?:#([^\\s\\.#]+))?(?:\\.([^\\s#]+))?\")\n\n(def ^{:doc \"Characters to replace when escaping HTML\" :private true}\n  character-escapes {\\& \"&amp;\", \\< \"&lt;\", \\> \"&gt;\", \\\" \"&quot;\"})\n\n(def ^{:doc \"A list of tags that need an explicit ending tag when rendered.\"}\n  container-tags\n  #{\"a\" \"b\" \"body\" \"canvas\" \"dd\" \"div\" \"dl\" \"dt\" \"em\" \"fieldset\" \"form\" \"h1\" \"h2\" \"h3\"\n    \"h4\" \"h5\" \"h6\" \"head\" \"html\" \"i\" \"iframe\" \"label\" \"li\" \"ol\" \"option\" \"pre\"\n    \"script\" \"span\" \"strong\" \"style\" \"table\" \"textarea\" \"ul\"})\n\n(defn as-str [x]\n  (if (or (keyword? x) (symbol? x))\n    (name x)\n    (str x)))\n\n(def ^:dynamic *html-mode* :xml)\n\n(defn- xml-mode? []\n  (= *html-mode* :xml))\n\n(defn in-mode [mode f]\n  (binding [*html-mode* mode]\n    (f)))\n\n(defn escape-html\n  \"Change special characters into HTML character entities.\"\n  [text]\n  (-> (as-str text)\n      (cstring/escape character-escapes)))\n\n(def h escape-html) ; alias for escape-html\n\n(defn end-tag []\n  (if (xml-mode?) \" />\" \">\"))\n\n(defn xml-attribute\n  ([name value] (xml-attribute name value true))\n  ([name value escape?]\n   (str \" \" (as-str name) \"=\\\"\" (if escape? (escape-html value) value) \"\\\"\")))\n\n(declare render-attr-map)\n\n(defn render-attribute [[name value]]\n  (cond\n    (true? value)\n    (if (xml-mode?)\n        (xml-attribute name name)\n        (str \" \" (as-str name)))\n    (not value)\n    \"\"\n    :else\n    (xml-attribute name (if (map? value) (render-attr-map value) value) false)))\n\n(defn render-attr-map [attrs]\n  (apply str\n    (sort (map render-attribute attrs))))\n\n(defn normalize-element\n  \"Ensure a tag vector is of the form [tag-name attrs content].\"\n  [[tag & content]]\n  (when (not (or (keyword? tag) (symbol? tag) (string? tag)))\n    (throw (str tag \" is not a valid tag name\")))\n  (let [[_ tag id class] (re-matches re-tag (as-str tag))\n        tag-attrs        {:id id\n                          :class (if class (cstring/replace class \".\" \" \"))}\n        map-attrs        (first content)]\n    (if (map? map-attrs)\n      [tag (merge tag-attrs map-attrs) (next content)]\n      [tag tag-attrs content])))\n\n(declare render-html)\n\n(defn render-element\n  \"Render a tag vector as a HTML element.\"\n  [element]\n  (let [[tag attrs content] (normalize-element element)]\n    (if (or content (container-tags tag))\n      (str \"<\" tag (render-attr-map attrs) \">\"\n           (render-html content)\n           \"</\" tag \">\")\n      (str \"<\" tag (render-attr-map attrs) (end-tag)))))\n\n(defn render-html\n  \"Turn a Clojure data type into a string of HTML.\"\n  [x]\n  (cond\n    (vector? x) (render-element x)\n    (seq? x) (apply str (map render-html x))\n    :else (as-str x)))\n"]}