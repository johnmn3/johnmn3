{"version":3,"file":"re_db.patterns.js","sources":["re_db/patterns.cljs"],"mappings":"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","names":["cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__15431","vec__15448","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","pattern-map","e","a","v","pv","lookup-target","map__15405","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","lookup-cb","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","listeners","pattern","f","cljs.core/deref","G__15394","re-db.patterns/add-value","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","G__15425","ks","cljs.core/contains?","pattern-keys","G__15451","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/conj","seq__15472","cljs.core/seq","chunk__15473","count__15474","i__15475","temp__5457__auto__","cljs.core/chunked-seq?","c__4351__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","db","pattern-key","re-db.patterns/empty-pattern-map","cljs.core/reset!","next-lookup-target","re-db.patterns/listen","G__15407","re-db.patterns/remove-value","kind","cljs.core/second","tx-report","lookup-ref","multiple?","temp__5455__auto__","re-db.patterns/lookup-ref?","patterns","value","p__15353","vec__15358","re-db.patterns/listen-lookup-ref","re-db.patterns/reaction","this","re-db.patterns/non-empty-keys","datoms","many?","G__15372","G__15373","G__15374","re-db.patterns/unlisten","G__15377","cljs.core/Keyword","js/Error","value-map","values","cljs.core.into.cljs$core$IFn$_invoke$arity$2","lookup-val","re-db.patterns/resolve-id","lookup-attr","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","re-db.patterns/conj-set","var_args","G__15427","re-db.patterns/datom-patterns","cljs.core/reduce-kv","m","x__4243__auto__","m__4244__auto__","re-db/patterns.reaction","goog/typeOf","cljs.core/missing-protocol","re-db/patterns.patterns","re-db.patterns/IPatternListen","re-db.patterns/*pattern-log*","k","re-db.patterns/datom-values","cljs.core/disj","re_db.patterns.datom_patterns.cljs$core$IFn$_invoke$arity$3","re-db.patterns/invalidate!","cljs.core/select-keys","re_db.patterns.log_read.cljs$core$IFn$_invoke$arity$2","attr","val","db-snap","cljs.core/empty?","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core/assoc-in","re-db.patterns/unlisten-lookup-ref","p__15365","map__15366","db-after","active-keys","cljs.core/into","re-db.patterns/pattern-values","re-db.patterns/into-set","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2","re-db.patterns/patterns","and__3938__auto__","cljs.core/keyword-identical?","G__15312","re-db.patterns/log-read","G__15386","G__15387","G__15388","G__15389","cljs.core/vector?","re-db.patterns/supported-pattern-keys","cljs.core/set","cljs.core/keys","or__3949__auto__"],"sourcesContent":["(ns re-db.patterns)\n\n(def ^:dynamic *pattern-log*\n  \"Dynamic var used in conjunction with re-db.patterns/capture-patterns macro to\n  identify patterns read by a block of code.\"\n  nil)\n\n(def ^:private empty-pattern-map\n  \"Map for building sets of patterns.\"\n  {:e__ #{}                                                 ;; <entity id>\n   :_a_ #{}                                                 ;; <attribute>\n   :_av #{}                                                 ;; [<attribute>, <value>]\n   :ea_ #{}})                                               ;; [<entity id>, <attribute>]\n\n(def supported-pattern-keys (set (keys empty-pattern-map)))\n\n(def conj-set (fnil conj #{}))\n(def into-set (fnil into #{}))\n\n(defn log-read\n  \"Record pattern to *pattern-log*.\"\n  ([kind pattern]\n   (when-not (nil? *pattern-log*)\n     (set! *pattern-log* (update *pattern-log* kind conj-set pattern))))\n  ([kind pattern multiple?]\n   (when-not (nil? *pattern-log*)\n     (set! *pattern-log* (update *pattern-log* kind (if multiple? into-set conj-set) pattern)))))\n\n(defn add-value\n  \"Associates value with pattern in value-map.\"\n  [value-map pattern-key pattern value]\n  (update-in value-map [pattern-key pattern] conj-set value))\n\n(defn remove-value\n  \"Removes value associated with pattern in value-map.\"\n  [value-map pattern-key pattern value]\n  (update-in value-map [pattern-key pattern] disj value))\n\n(declare listen unlisten)\n\n(defn resolve-id\n  \"Copied from re-db.core.\"\n  [db-snap attr val]\n  (log-read :_av [attr val])\n  (first (get-in db-snap [:ave attr val])))\n\n(defn listen-lookup-ref\n  \"Adds lookup ref listener, which uses an intermediate listener to update when\n  the target of a lookup ref changes.\"\n  [[lookup-attr lookup-val :as lookup-ref] kind pattern listeners db f]\n  (let [lookup-target (atom (resolve-id @db lookup-attr lookup-val))\n        lookup-cb (fn [{:keys [db-after] :as tx-report}]\n                    (let [next-lookup-target (resolve-id db-after lookup-attr lookup-val)]\n                      (when @lookup-target\n                        (unlisten db {kind (case kind :e__ [@lookup-target]\n                                                      :ea_ [[lookup-target (second pattern)]])} f))\n                      (when-not (nil? next-lookup-target)\n                        (listen db {kind (case kind :e__ [next-lookup-target]\n                                                    :ea_ [[next-lookup-target (second pattern)]])} f))\n                      (reset! lookup-target next-lookup-target)\n                      (f tx-report)))]\n    (-> (cond-> listeners\n                (not (nil? @lookup-target)) (add-value :e__ @lookup-target f))\n        (add-value :_av lookup-ref lookup-cb)\n        (assoc-in [:lookup-refs [pattern f]] {:lookup-cb     lookup-cb\n                                              :lookup-target lookup-target}))))\n\n(defn unlisten-lookup-ref\n  \"Removes lookup ref listener.\"\n  [lookup-ref kind pattern listeners db f]\n  (let [{:keys [lookup-cb lookup-target]} (get-in listeners [:lookup-refs [pattern f]])]\n    (-> (cond-> listeners\n                @lookup-target (remove-value kind pattern f))\n        (remove-value :_av lookup-ref lookup-cb)\n        (dissoc [:lookup-refs [pattern f]]))))\n\n(defn lookup-ref?\n  \"Returns true if pattern has lookup ref in id position.\"\n  [kind pattern]\n  (or (and (keyword-identical? kind :e__)\n           (vector? pattern)\n           pattern)\n      (and (keyword-identical? kind :ea_)\n           (vector? (first pattern))\n           (first pattern))))\n\n(defn listen\n  \"Adds pattern listener.\"\n  [db patterns value]\n  (swap! db assoc :listeners\n         (reduce-kv (fn [listeners kind patterns]\n                      (reduce (fn [listeners pattern]\n                                (if-let [lookup-ref (lookup-ref? kind pattern)]\n                                  (listen-lookup-ref lookup-ref kind pattern listeners db value)\n                                  (add-value listeners kind pattern value))) listeners patterns)) (get @db :listeners) patterns)))\n\n(defn unlisten\n  \"Removes pattern listener.\"\n  [db patterns value]\n  (swap! db assoc :listeners\n         (reduce-kv (fn [listeners kind patterns]\n                      (reduce (fn [listeners pattern]\n                                (if-let [lookup-ref (lookup-ref? kind pattern)]\n                                  (unlisten-lookup-ref lookup-ref kind pattern listeners db value)\n                                  (remove-value listeners kind pattern value))) listeners patterns)) (get @db :listeners) patterns)))\n\n(defn non-empty-keys\n  \"Returns list of keys for which map contains a non-empty value.\"\n  [m]\n  (reduce-kv (fn [ks k v]\n               (cond-> ks\n                       (not (empty? v)) (conj k))) #{} m))\n\n(defn datom-patterns\n  \"Returns a map of patterns matched by a list of datoms.\n  Limits patterns to those listed in pattern-keys.\n  many? should return true for attributes which have schema value :db.cardinality/many?.\"\n  ([datoms many?]\n   (datom-patterns datoms many? [:e__ :ea_ :_av :_a_]))\n  ([datoms many? pattern-keys]\n   (->> datoms\n        (reduce (fn [pattern-map [e a v pv]]\n                  (cond-> pattern-map\n                          (contains? pattern-keys :e__) (update :e__ conj e)\n                          (contains? pattern-keys :ea_) (update :ea_ conj [e a])\n                          (contains? pattern-keys :_av) (update :_av into (if (many? a)\n                                                                            (reduce\n                                                                              (fn [patterns v] (conj patterns [a v])) [] (into v pv))\n                                                                            [[a v]\n                                                                             [a pv]]))\n                          (contains? pattern-keys :_a_) (update :_a_ conj a)))\n                (select-keys empty-pattern-map pattern-keys)))))\n\n(defn pattern-values\n  \"Returns values associated with patterns.\n\n  value-map is of form {<pattern-key> {<pattern> #{...set of values...}}}.\n  pattern-map is of form {<pattern-key> #{...set of patterns...}}\"\n  [pattern-map value-map]\n  (reduce-kv (fn [values pattern-key patterns]\n               (reduce (fn [values pattern]\n                         (into values (get-in value-map [pattern-key pattern]))) values patterns)) #{} pattern-map))\n\n(defn datom-values\n  \"Returns the set of values in value-map associated with patterns matched by datoms.\"\n  [value-map datoms many?]\n  (let [active-keys (non-empty-keys value-map)]\n    (-> (datom-patterns datoms many? active-keys)\n        (pattern-values value-map))))\n\n(defn invalidate!\n  \"Invalidate a pattern, ie. invoke callbacks that match pattern\"\n  [db pattern-key pattern]\n  (doseq [f (get-in @db [:listeners pattern-key pattern])]\n    (f)))\n\n(defprotocol IPatternListen\n  (reaction [this] \"the action to take when a listened pattern matches\")\n  (patterns [this] \"Return the patterns currently listened to\"))\n\n(comment\n  (assert (= (datom-patterns [[\"e\" \"a\" \"v\" \"prev-v\"]]\n                             #{}\n                             supported-pattern-keys)\n             {:e__ #{\"e\"}\n              :ea_ #{[\"e\" \"a\"]}\n              :_av #{[\"e\" \"v\"] [\"e\" \"prev-v\"]}\n              :_a_ #{\"a\"}})))"]}