{"version":3,"file":"re_view.hiccup.core.js","sources":["re_view/hiccup/core.cljs"],"mappings":"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","names":["cljs.core/enable-console-print!","js/Symbol","cljs.core/PROTOCOL_SENTINEL","sym","writer","_","cljs.core/-write","x__4243__auto__","m__4244__auto__","re-view/hiccup.core.to-element","goog/typeOf","cljs.core/missing-protocol","re-view.hiccup.core/IElement","re-view.hiccup.core/to-element","this","re-view/hiccup.core.to-hiccup","re-view.hiccup.core/IEmitHiccup","re-view.hiccup.core/to-hiccup","re-view.hiccup.core/-to-element","form","cljs.core/vector?","e33276","vec__33278","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__33281","tag","id","classes","G__33284","re-view.hiccup.hiccup/parse-key-memoized","props","children","re-view.hiccup.hiccup/parse-args","args","re-view.hiccup.hiccup/reduce-flatten-seqs","re-view.hiccup.hiccup/props->js","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","re-view.hiccup.hiccup/*create-element*","js/Error","e","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","js/console","cljs.core/native-satisfies?","G__33292","cljs.core/list?","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","out","el","G__33303","var_args","G__33331","re-view.hiccup.core/element","p__33340","map__33341","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","wrap-props","create-element","*wrap-props*33351","*create-element*33352","re-view.hiccup.hiccup/*wrap-props*","or__3949__auto__"],"sourcesContent":["(ns re-view.hiccup.core\n  (:require [re-view.hiccup.hiccup :as hiccup]))\n\n(enable-console-print!)\n(set! *warn-on-infer* true)\n\n;; patch IPrintWithWriter to print javascript symbols without throwing errors\n(when (exists? js/Symbol)\n  (extend-protocol IPrintWithWriter\n    js/Symbol\n    (-pr-writer [sym writer _]\n      (-write writer (str \"\\\"\" (.toString sym) \"\\\"\")))))\n\n(defprotocol IElement\n  (to-element [this] \"Returns a React element representing `this`\"))\n\n(defprotocol IEmitHiccup\n  (to-hiccup [this] \"Returns a hiccup form representing `this`\"))\n\n(defn -to-element [form]\n  (cond (vector? form)\n        (try\n          (let [[_ tag id classes] (hiccup/parse-key-memoized (form 0))\n                [props children] (hiccup/parse-args form)\n                args (hiccup/reduce-flatten-seqs -to-element [tag (hiccup/props->js tag id classes props)] children)]\n            (apply hiccup/*create-element* args))\n\n          (catch js/Error e\n            (println \"Error in render-hiccup-node:\")\n            (println form)\n            (.error js/console e)))\n\n\n        (satisfies? IElement form)\n        (to-element form)\n\n        (satisfies? IEmitHiccup form)\n        (-to-element (to-hiccup form))\n\n        (list? form)\n        (reduce (fn [out el]\n                  (doto out (.push (-to-element el)))) #js [] form)\n\n        :else form))\n\n(defn element\n  \"Converts Hiccup form into a React element. If a non-vector form\n   is supplied, it is returned untouched. Attribute and style keys\n   are converted from `dashed-names` to `camelCase` as spec'd by React.\n\n   - optional -\n   :wrap-props (fn) is applied to all props maps during parsing.\n   :create-element (fn) overrides React.createElement.\"\n  ([form]\n   (-to-element form))\n  ([form {:keys [wrap-props\n                 create-element]}]\n   (binding [hiccup/*wrap-props* wrap-props\n             hiccup/*create-element* (or hiccup/*create-element* create-element)]\n     (-to-element form))))"]}