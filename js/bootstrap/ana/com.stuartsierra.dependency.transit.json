["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","com/stuartsierra/dependency.cljs","~:line",11,"~:column",3,"~:end-line",11,"~:end-column",30,"~:author","Stuart Sierra","~:doc","Directed acyclic graph for representing dependency relationships."],"~:shadow/protocol-prefixes",["~#set",["com$stuartsierra$dependency$DependencyGraphUpdate$","com$stuartsierra$dependency$DependencyGraph$"]],"~:use-macros",null,"~:excludes",["^;",[]],"~:name","~$com.stuartsierra.dependency","~:imports",null,"~:requires",["^ ","~$clojure.set","^B","~$set","^B","~$cljs.core","^D","~$goog","^E"],"~:seen",["^;",["~:require"]],"~:shadow/js-access-global",["^;",["Number","Error"]],"~:uses",null,"~:defs",["^ ","~$immediate-dependencies",["^ ","~:protocol-inline",null,"^2",["^ ","^3","com/stuartsierra/dependency.cljs","^4",15,"^5",4,"^6",15,"^7",26,"~:protocol","~$com.stuartsierra.dependency/DependencyGraph","^9","Returns the set of immediate dependencies of node.","~:arglists",["~#list",["~$quote",["^P",[["~$graph","~$node"]]]]]],"^M","^N","^>","~$com.stuartsierra.dependency/immediate-dependencies","~:variadic",false,"^3","com/stuartsierra/dependency.cljs","^7",26,"~:method-params",["^P",[["^R","^S"]]],"~:protocol-impl",null,"~:arglists-meta",["^P",[null,null]],"^5",1,"^4",14,"^6",15,"~:max-fixed-arity",2,"~:fn-var",true,"^O",["^P",["^Q",["^P",[["^R","^S"]]]]],"^9","Returns the set of immediate dependencies of node."],"~$remove-from-map",["^ ","^L",null,"^2",["^ ","^3","com/stuartsierra/dependency.cljs","^4",41,"^5",8,"^6",41,"^7",23,"~:private",true,"^O",["^P",["^Q",["^P",[["~$amap","~$x"]]]]]],"^10",true,"^>","~$com.stuartsierra.dependency/remove-from-map","^U",false,"^3","com/stuartsierra/dependency.cljs","^7",23,"^V",["^P",[["^11","~$x"]]],"^W",null,"^X",["^P",[null,null]],"^5",1,"^4",41,"^6",41,"^Y",2,"^Z",true,"^O",["^P",["^Q",["^P",[["^11","~$x"]]]]]],"~$remove-edge",["^ ","^L",null,"^2",["^ ","^3","com/stuartsierra/dependency.cljs","^4",32,"^5",4,"^6",32,"^7",15,"^M","~$com.stuartsierra.dependency/DependencyGraphUpdate","^9","Returns a new graph with the dependency from node to dep removed.","^O",["^P",["^Q",["^P",[["^R","^S","~$dep"]]]]]],"^M","^14","^>","~$com.stuartsierra.dependency/remove-edge","^U",false,"^3","com/stuartsierra/dependency.cljs","^7",15,"^V",["^P",[["^R","^S","^15"]]],"^W",null,"^X",["^P",[null,null]],"^5",1,"^4",28,"^6",32,"^Y",3,"^Z",true,"^O",["^P",["^Q",["^P",[["^R","^S","^15"]]]]],"^9","Returns a new graph with the dependency from node to dep removed."],"~$MapDependencyGraph",["^ ","~:num-fields",2,"~:protocols",["^;",["~$cljs.core/IRecord","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/ICounted","^N","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","^14","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^>","~$com.stuartsierra.dependency/MapDependencyGraph","^3","com/stuartsierra/dependency.cljs","^7",30,"~:type",true,"^5",12,"~:internal-ctor",true,"^4",59,"~:record",true,"^6",59,"~:tag","~$function","~:skip-protocol-flag",["^;",["^1:","^1;","^1<","^1=","^1>","^1?","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^1G"]]],"~$depends?",["^ ","^L",null,"^2",["^ ","^3","com/stuartsierra/dependency.cljs","^4",104,"^5",7,"^6",104,"^7",15,"^O",["^P",["^Q",["^P",[["^R","~$x","~$y"]]]]],"^9","True if x is directly or transitively dependent on y."],"^>","~$com.stuartsierra.dependency/depends?","^U",false,"^3","com/stuartsierra/dependency.cljs","^7",15,"^V",["^P",[["^R","~$x","~$y"]]],"^W",null,"^X",["^P",[null,null]],"^5",1,"^4",104,"^6",104,"^Y",3,"^Z",true,"^O",["^P",["^Q",["^P",[["^R","~$x","~$y"]]]]],"^9","True if x is directly or transitively dependent on y."],"~$depend",["^ ","^L",null,"^2",["^ ","^3","com/stuartsierra/dependency.cljs","^4",29,"^5",4,"^6",29,"^7",10,"^M","^14","^9","Returns a new graph with a dependency from node to dep (\"node depends\n    on dep\"). Forbids circular dependencies.","^O",["^P",["^Q",["^P",[["^R","^S","^15"]]]]]],"^M","^14","^>","~$com.stuartsierra.dependency/depend","^U",false,"^3","com/stuartsierra/dependency.cljs","^7",10,"^V",["^P",[["^R","^S","^15"]]],"^W",null,"^X",["^P",[null,null]],"^5",1,"^4",28,"^6",29,"^Y",3,"^Z",true,"^O",["^P",["^Q",["^P",[["^R","^S","^15"]]]]],"^9","Returns a new graph with a dependency from node to dep (\"node depends\n    on dep\"). Forbids circular dependencies."],"~$immediate-dependents",["^ ","^L",null,"^2",["^ ","^3","com/stuartsierra/dependency.cljs","^4",17,"^5",4,"^6",17,"^7",24,"^M","^N","^9","Returns the set of immediate dependents of node.","^O",["^P",["^Q",["^P",[["^R","^S"]]]]]],"^M","^N","^>","~$com.stuartsierra.dependency/immediate-dependents","^U",false,"^3","com/stuartsierra/dependency.cljs","^7",24,"^V",["^P",[["^R","^S"]]],"^W",null,"^X",["^P",[null,null]],"^5",1,"^4",14,"^6",17,"^Y",2,"^Z",true,"^O",["^P",["^Q",["^P",[["^R","^S"]]]]],"^9","Returns the set of immediate dependents of node."],"~$transitive",["^ ","^L",null,"^2",["^ ","^3","com/stuartsierra/dependency.cljs","^4",46,"^5",8,"^6",46,"^7",18,"^10",true,"^O",["^P",["^Q",["^P",[["~$m","~$x"]]]]],"^9","Recursively expands the set of dependency relationships starting\n  at (get m x)"],"^10",true,"^>","~$com.stuartsierra.dependency/transitive","^U",false,"^3","com/stuartsierra/dependency.cljs","^7",18,"^V",["^P",[["~$m","~$x"]]],"^W",null,"^X",["^P",[null,null]],"^5",1,"^4",46,"^6",46,"^Y",2,"^Z",true,"^O",["^P",["^Q",["^P",[["~$m","~$x"]]]]],"^9","Recursively expands the set of dependency relationships starting\n  at (get m x)"],"~$set-conj",["^ ","^2",["^ ","^3","com/stuartsierra/dependency.cljs","^4",56,"^5",16,"^6",56,"^7",24,"^10",true],"^10",true,"^>","~$com.stuartsierra.dependency/set-conj","^3","com/stuartsierra/dependency.cljs","^7",24,"^5",1,"^4",56,"^6",56,"^1L","~$any"],"~$remove-node",["^ ","^L",null,"^2",["^ ","^3","com/stuartsierra/dependency.cljs","^4",36,"^5",4,"^6",36,"^7",15,"^M","^14","^9","Removes the node from the dependency graph without removing it as a\n    dependency of other nodes. That is, removes all outgoing edges from\n    node.","^O",["^P",["^Q",["^P",[["^R","^S"]]]]]],"^M","^14","^>","~$com.stuartsierra.dependency/remove-node","^U",false,"^3","com/stuartsierra/dependency.cljs","^7",15,"^V",["^P",[["^R","^S"]]],"^W",null,"^X",["^P",[null,null]],"^5",1,"^4",28,"^6",36,"^Y",2,"^Z",true,"^O",["^P",["^Q",["^P",[["^R","^S"]]]]],"^9","Removes the node from the dependency graph without removing it as a\n    dependency of other nodes. That is, removes all outgoing edges from\n    node."],"~$->MapDependencyGraph",["^ ","^L",null,"^2",["^ ","^3","com/stuartsierra/dependency.cljs","^7",30,"^5",12,"^1J",true,"~:factory","~:positional","^4",59,"^6",59,"^O",["^P",["^Q",["^P",[["~$dependencies","~$dependents"]]]]],"^9","Positional factory function for com.stuartsierra.dependency/MapDependencyGraph."],"^>","~$com.stuartsierra.dependency/->MapDependencyGraph","^U",false,"^3","com/stuartsierra/dependency.cljs","^7",30,"^V",["^P",[["^23","^24"]]],"^W",null,"^X",["^P",[null,null]],"^5",1,"^1J",true,"^21","^22","^4",59,"^6",59,"^Y",2,"^Z",true,"^O",["^P",["^Q",["^P",[["^23","^24"]]]]],"^9","Positional factory function for com.stuartsierra.dependency/MapDependencyGraph."],"~$topo-comparator",["^ ","^L",null,"^2",["^ ","^3","com/stuartsierra/dependency.cljs","^4",139,"^5",7,"^6",139,"^7",22,"^O",["^P",["^Q",["^P",[["^R"]]]]],"^9","Returns a comparator fn which produces a topological sort based on\n  the dependencies in graph. Nodes not present in the graph will sort\n  after nodes in the graph."],"^>","~$com.stuartsierra.dependency/topo-comparator","^U",false,"^3","com/stuartsierra/dependency.cljs","^7",22,"^V",["^P",[["^R"]]],"^W",null,"^X",["^P",[null,null]],"^5",1,"^4",139,"^6",139,"^Y",1,"^Z",true,"^O",["^P",["^Q",["^P",[["^R"]]]]],"^9","Returns a comparator fn which produces a topological sort based on\n  the dependencies in graph. Nodes not present in the graph will sort\n  after nodes in the graph."],"~$transitive-dependencies",["^ ","^L",null,"^2",["^ ","^3","com/stuartsierra/dependency.cljs","^4",19,"^5",4,"^6",19,"^7",27,"^M","^N","^9","Returns the set of all things which node depends on, directly or\n    transitively.","^O",["^P",["^Q",["^P",[["^R","^S"]]]]]],"^M","^N","^>","~$com.stuartsierra.dependency/transitive-dependencies","^U",false,"^3","com/stuartsierra/dependency.cljs","^7",27,"^V",["^P",[["^R","^S"]]],"^W",null,"^X",["^P",[null,null]],"^5",1,"^4",14,"^6",19,"^Y",2,"^Z",true,"^O",["^P",["^Q",["^P",[["^R","^S"]]]]],"^9","Returns the set of all things which node depends on, directly or\n    transitively."],"~$map->MapDependencyGraph",["^ ","^L",null,"^2",["^ ","^3","com/stuartsierra/dependency.cljs","^7",30,"^5",12,"^1J",true,"^21","~:map","^4",59,"^6",59,"^O",["^P",["^Q",["^P",[["~$G__15296"]]]]],"^9","Factory function for com.stuartsierra.dependency/MapDependencyGraph, taking a map of keywords to field values."],"^>","~$com.stuartsierra.dependency/map->MapDependencyGraph","^U",false,"^3","com/stuartsierra/dependency.cljs","^7",30,"^V",["^P",[["^2<"]]],"^W",null,"^X",["^P",[null,null]],"^5",1,"^1J",true,"^21","^2;","^4",59,"^6",59,"^Y",1,"^Z",true,"^O",["^P",["^Q",["^P",[["^2<"]]]]],"^9","Factory function for com.stuartsierra.dependency/MapDependencyGraph, taking a map of keywords to field values."],"~$DependencyGraph",["^ ","^2",["^ ","~:protocol-symbol",true,"^3","com/stuartsierra/dependency.cljs","^7",29,"^5",14,"^4",14,"~:protocol-info",["^ ","~:methods",["^ ","^K",[["^R","^S"]],"^1S",[["^R","^S"]],"^28",[["^R","^S"]],"~$transitive-dependents",[["^R","^S"]],"~$nodes",[["^R"]]]],"^6",14,"^9",null,"~:jsdoc",["^P",["@interface"]]],"^2?",true,"^>","^N","^3","com/stuartsierra/dependency.cljs","^7",29,"^5",1,"^4",14,"^2@",["^ ","^2A",["^ ","^K",[["^R","^S"]],"^1S",[["^R","^S"]],"^28",[["^R","^S"]],"^2B",[["^R","^S"]],"^2C",[["^R"]]]],"~:info",null,"^6",14,"^1L","^1Y","~:impls",["^;",["^1H"]],"^9",null,"^2D",["^P",["@interface"]]],"~$topo-sort",["^ ","^L",null,"^2",["^ ","^3","com/stuartsierra/dependency.cljs","^4",114,"^5",7,"^6",114,"^7",16,"^O",["^P",["^Q",["^P",[["^R"]]]]],"^9","Returns a topologically-sorted list of nodes in graph."],"^>","~$com.stuartsierra.dependency/topo-sort","^U",false,"^3","com/stuartsierra/dependency.cljs","^7",16,"^V",["^P",[["^R"]]],"^W",null,"^X",["^P",[null,null]],"^5",1,"^4",114,"^6",114,"^Y",1,"^Z",true,"^O",["^P",["^Q",["^P",[["^R"]]]]],"^9","Returns a topologically-sorted list of nodes in graph."],"^2B",["^ ","^L",null,"^2",["^ ","^3","com/stuartsierra/dependency.cljs","^4",22,"^5",4,"^6",22,"^7",25,"^M","^N","^9","Returns the set of all things which depend upon node, directly or\n    transitively.","^O",["^P",["^Q",["^P",[["^R","^S"]]]]]],"^M","^N","^>","~$com.stuartsierra.dependency/transitive-dependents","^U",false,"^3","com/stuartsierra/dependency.cljs","^7",25,"^V",["^P",[["^R","^S"]]],"^W",null,"^X",["^P",[null,null]],"^5",1,"^4",14,"^6",22,"^Y",2,"^Z",true,"^O",["^P",["^Q",["^P",[["^R","^S"]]]]],"^9","Returns the set of all things which depend upon node, directly or\n    transitively."],"^2C",["^ ","^L",null,"^2",["^ ","^3","com/stuartsierra/dependency.cljs","^4",25,"^5",4,"^6",25,"^7",9,"^M","^N","^9","Returns the set of all nodes in graph.","^O",["^P",["^Q",["^P",[["^R"]]]]]],"^M","^N","^>","~$com.stuartsierra.dependency/nodes","^U",false,"^3","com/stuartsierra/dependency.cljs","^7",9,"^V",["^P",[["^R"]]],"^W",null,"^X",["^P",[null,null]],"^5",1,"^4",14,"^6",25,"^Y",1,"^Z",true,"^O",["^P",["^Q",["^P",[["^R"]]]]],"^9","Returns the set of all nodes in graph."],"^R",["^ ","^L",null,"^2",["^ ","^3","com/stuartsierra/dependency.cljs","^4",95,"^5",7,"^6",95,"^7",12,"^O",["^P",["^Q",["^P",[[]]]]],"^9","Returns a new, empty, dependency graph. A graph contains nodes,\n  which may be any type which supports Clojure's equality semantics.\n  Edges are represented as pairs of nodes. An edge between two nodes X\n  and Y indicates that X depends on Y or, conversely, that Y is a\n  dependent of X. A dependency graph may not have cycles."],"^>","~$com.stuartsierra.dependency/graph","^U",false,"^3","com/stuartsierra/dependency.cljs","^7",12,"^V",["^P",[[]]],"^W",null,"^X",["^P",[null,null]],"^5",1,"^4",95,"^6",95,"^Y",0,"^Z",true,"^O",["^P",["^Q",["^P",[[]]]]],"^9","Returns a new, empty, dependency graph. A graph contains nodes,\n  which may be any type which supports Clojure's equality semantics.\n  Edges are represented as pairs of nodes. An edge between two nodes X\n  and Y indicates that X depends on Y or, conversely, that Y is a\n  dependent of X. A dependency graph may not have cycles."],"~$DependencyGraphUpdate",["^ ","^2",["^ ","^2?",true,"^3","com/stuartsierra/dependency.cljs","^7",35,"^5",14,"^4",28,"^2@",["^ ","^2A",["^ ","^1Q",[["^R","^S","^15"]],"^13",[["^R","^S","^15"]],"~$remove-all",[["^R","^S"]],"^1Z",[["^R","^S"]]]],"^6",28,"^9",null,"^2D",["^P",["@interface"]]],"^2?",true,"^>","^14","^3","com/stuartsierra/dependency.cljs","^7",35,"^5",1,"^4",28,"^2@",["^ ","^2A",["^ ","^1Q",[["^R","^S","^15"]],"^13",[["^R","^S","^15"]],"^2M",[["^R","^S"]],"^1Z",[["^R","^S"]]]],"^2E",null,"^6",28,"^1L","^1Y","^2F",["^;",["^1H"]],"^9",null,"^2D",["^P",["@interface"]]],"^2M",["^ ","^L",null,"^2",["^ ","^3","com/stuartsierra/dependency.cljs","^4",34,"^5",4,"^6",34,"^7",14,"^M","^14","^9","Returns a new dependency graph with all references to node removed.","^O",["^P",["^Q",["^P",[["^R","^S"]]]]]],"^M","^14","^>","~$com.stuartsierra.dependency/remove-all","^U",false,"^3","com/stuartsierra/dependency.cljs","^7",14,"^V",["^P",[["^R","^S"]]],"^W",null,"^X",["^P",[null,null]],"^5",1,"^4",28,"^6",34,"^Y",2,"^Z",true,"^O",["^P",["^Q",["^P",[["^R","^S"]]]]],"^9","Returns a new dependency graph with all references to node removed."],"~$dependent?",["^ ","^L",null,"^2",["^ ","^3","com/stuartsierra/dependency.cljs","^4",109,"^5",7,"^6",109,"^7",17,"^O",["^P",["^Q",["^P",[["^R","~$x","~$y"]]]]],"^9","True if y is a direct or transitive dependent of x."],"^>","~$com.stuartsierra.dependency/dependent?","^U",false,"^3","com/stuartsierra/dependency.cljs","^7",17,"^V",["^P",[["^R","~$x","~$y"]]],"^W",null,"^X",["^P",[null,null]],"^5",1,"^4",109,"^6",109,"^Y",3,"^Z",true,"^O",["^P",["^Q",["^P",[["^R","~$x","~$y"]]]]],"^9","True if y is a direct or transitive dependent of x."]],"~:require-macros",["^ ","^D","^D"],"~:cljs.analyzer/constants",["^ ","^F",["^;",["^23","~:dependents","^24","~:dependencies"]],"~:order",["^2T","^2S","^23","^24"]],"~:flags",["^ ","^G",["^;",[]]],"~:js-deps",["^ "],"~:deps",["^E","^D","^B"]]