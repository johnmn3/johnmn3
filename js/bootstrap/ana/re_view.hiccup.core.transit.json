["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_view/hiccup/core.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",24],"~:shadow/protocol-prefixes",["~#set",["re-view$hiccup$core$IElement$","re-view$hiccup$core$IEmitHiccup$"]],"~:use-macros",null,"~:excludes",["^9",[]],"~:name","~$re-view.hiccup.core","~:imports",null,"~:requires",["^ ","~$re-view.hiccup.hiccup","^@","~$hiccup","^@","~$cljs.core","^B","~$goog","^C"],"~:seen",["^9",["~:require"]],"~:shadow/js-access-global",["^9",["Symbol","Error"]],"~:uses",null,"~:defs",["^ ","~$IElement",["^ ","^2",["^ ","~:protocol-symbol",true,"^3","re_view/hiccup/core.cljs","^7",22,"^5",14,"^4",14,"~:protocol-info",["^ ","~:methods",["^ ","~$to-element",[["~$this"]]]],"^6",14,"~:doc",null,"~:jsdoc",["~#list",["@interface"]]],"^J",true,"^<","~$re-view.hiccup.core/IElement","^3","re_view/hiccup/core.cljs","^7",22,"^5",1,"^4",14,"^K",["^ ","^L",["^ ","^M",[["^N"]]]],"~:info",null,"^6",14,"~:tag","~$any","~:impls",["^9",[]],"^O",null,"^P",["^Q",["@interface"]]],"^M",["^ ","~:protocol-inline",null,"^2",["^ ","^3","re_view/hiccup/core.cljs","^4",15,"^5",4,"^6",15,"^7",14,"~:protocol","^R","^O","Returns a React element representing `this`","~:arglists",["^Q",["~$quote",["^Q",[["^N"]]]]]],"^X","^R","^<","~$re-view.hiccup.core/to-element","~:variadic",false,"^3","re_view/hiccup/core.cljs","^7",14,"~:method-params",["^Q",[["^N"]]],"~:protocol-impl",null,"~:arglists-meta",["^Q",[null,null]],"^5",1,"^4",14,"^6",15,"~:max-fixed-arity",1,"~:fn-var",true,"^Y",["^Q",["^Z",["^Q",[["^N"]]]]],"^O","Returns a React element representing `this`"],"~$IEmitHiccup",["^ ","^2",["^ ","^J",true,"^3","re_view/hiccup/core.cljs","^7",25,"^5",14,"^4",17,"^K",["^ ","^L",["^ ","~$to-hiccup",[["^N"]]]],"^6",17,"^O",null,"^P",["^Q",["@interface"]]],"^J",true,"^<","~$re-view.hiccup.core/IEmitHiccup","^3","re_view/hiccup/core.cljs","^7",25,"^5",1,"^4",17,"^K",["^ ","^L",["^ ","^17",[["^N"]]]],"^S",null,"^6",17,"^T","^U","^V",["^9",[]],"^O",null,"^P",["^Q",["@interface"]]],"^17",["^ ","^W",null,"^2",["^ ","^3","re_view/hiccup/core.cljs","^4",18,"^5",4,"^6",18,"^7",13,"^X","^18","^O","Returns a hiccup form representing `this`","^Y",["^Q",["^Z",["^Q",[["^N"]]]]]],"^X","^18","^<","~$re-view.hiccup.core/to-hiccup","^10",false,"^3","re_view/hiccup/core.cljs","^7",13,"^11",["^Q",[["^N"]]],"^12",null,"^13",["^Q",[null,null]],"^5",1,"^4",17,"^6",18,"^14",1,"^15",true,"^Y",["^Q",["^Z",["^Q",[["^N"]]]]],"^O","Returns a hiccup form representing `this`"],"~$-to-element",["^ ","^W",null,"^2",["^ ","^3","re_view/hiccup/core.cljs","^4",20,"^5",7,"^6",20,"^7",18,"^Y",["^Q",["^Z",["^Q",[["~$form"]]]]]],"^<","~$re-view.hiccup.core/-to-element","^10",false,"^3","re_view/hiccup/core.cljs","^7",18,"^11",["^Q",[["^1;"]]],"^12",null,"^13",["^Q",[null,null]],"^5",1,"^4",20,"^6",20,"^14",1,"^15",true,"^Y",["^Q",["^Z",["^Q",[["^1;"]]]]]],"~$element",["^ ","^W",null,"^2",["^ ","^3","re_view/hiccup/core.cljs","^4",46,"^5",7,"^6",46,"^7",14,"^Y",["^Q",["^Z",["^Q",[["^1;"],["^1;",["^ ","~:keys",["~$wrap-props","~$create-element"]]]]]]],"^O","Converts Hiccup form into a React element. If a non-vector form\n   is supplied, it is returned untouched. Attribute and style keys\n   are converted from `dashed-names` to `camelCase` as spec'd by React.\n\n   - optional -\n   :wrap-props (fn) is applied to all props maps during parsing.\n   :create-element (fn) overrides React.createElement.","~:top-fn",["^ ","^10",false,"^14",2,"^11",["^Q",[["^1;"],["^1;",["^ ","^1>",["^1?","^1@"]]]]],"^Y",["^Q",[["^1;"],["^1;",["^ ","^1>",["^1?","^1@"]]]]],"^13",["^Q",[null,null]]]],"^<","~$re-view.hiccup.core/element","^10",false,"^3","re_view/hiccup/core.cljs","^7",14,"^1A",["^ ","^10",false,"^14",2,"^11",["^Q",[["^1;"],["^1;",["^ ","^1>",["^1?","^1@"]]]]],"^Y",["^Q",[["^1;"],["^1;",["^ ","^1>",["^1?","^1@"]]]]],"^13",["^Q",[null,null]]],"^11",["^Q",[["^1;"],["^1;",["^ ","^1>",["^1?","^1@"]]]]],"^12",null,"^13",["^Q",[null,null]],"^5",1,"^4",46,"^6",46,"^14",2,"^15",true,"^Y",["^Q",[["^1;"],["^1;",["^ ","^1>",["^1?","^1@"]]]]],"^O","Converts Hiccup form into a React element. If a non-vector form\n   is supplied, it is returned untouched. Attribute and style keys\n   are converted from `dashed-names` to `camelCase` as spec'd by React.\n\n   - optional -\n   :wrap-props (fn) is applied to all props maps during parsing.\n   :create-element (fn) overrides React.createElement."]],"~:require-macros",["^ ","^B","^B"],"~:cljs.analyzer/constants",["^ ","^D",["^9",["~:else","~:wrap-props","~:create-element"]],"~:order",["^1E","^1F","^1G"]],"~:flags",["^ ","^E",["^9",[]]],"~:js-deps",["^ "],"~:deps",["^C","^B","^@"]]